root@hp:/etc/asterisk# cat extensions_additional.conf
;--------------------------------------------------------------------------------;
;          Do NOT edit this file as it is auto-generated by FreePBX.             ;
;--------------------------------------------------------------------------------;
; For information on adding additional paramaters to this file, please visit the ;
; FreePBX.org wiki page, or ask on IRC. This file was created by the new FreePBX ;
; BMO - Big Module Object. Any similarity in naming with BMO from Adventure Time ;
; is totally deliberate.                                                         ;
;--------------------------------------------------------------------------------;
[globals]
CFDEVSTATE = TRUE
MIXMON_BEEP = 
MONITOR_REC_OPTION = b
DNDDEVSTATE = TRUE
FMDEVSTATE = TRUE
QUEDEVSTATE = TRUE
QUEUETOGGLE = *45
QUEUEPAUSETOGGLE = *46
QUEUECALLERS = *47
OPERATOR_XTN = 
VM_DDTYPE = u
VM_GAIN = 
VM_OPTS = 
VMX_LOOPS = 1
VMX_OPTS_DOVM = 
VMX_OPTS_LOOP = 
VMX_REPEAT = 1
VMX_TIMEOUT = 2
DYNAMIC_FEATURES = apprecord
INTERCOMCODE = *80
ASTETCDIR = /etc/asterisk
ASTMODDIR = /usr/lib64/asterisk/modules
ASTVARLIBDIR = /var/lib/asterisk
ASTAGIDIR = /var/lib/asterisk/agi-bin
ASTSPOOLDIR = /var/spool/asterisk
ASTRUNDIR = /var/run/asterisk
ASTLOGDIR = /var/log/asterisk
CWINUSEBUSY = 1
AMPMGRUSER = 870f2552de9e22a0c1dfa98c2d9e6abf
AMPMGRPASS = c15b4363d0b6d750fd312941f01f0094
ASTMANAGERHOST = localhost
AMPDBENGINE = mysql
AMPDBHOST = localhost
AMPDBNAME = asterisk
AMPDBUSER = freepbxuser
AMPDBPASS = 556ea5791725d88b1dc910f19599609c
AMPBIN = /var/lib/asterisk/bin
VMX_CONTEXT = from-internal
VMX_PRI = 1
VMX_TIMEDEST_CONTEXT = 
VMX_TIMEDEST_EXT = dovm
VMX_TIMEDEST_PRI = 1
VMX_LOOPDEST_CONTEXT = 
VMX_LOOPDEST_EXT = dovm
VMX_LOOPDEST_PRI = 1
MIXMON_DIR = 
MIXMON_POST = 
DIAL_OPTIONS = HhTtr
TRUNK_OPTIONS = T
TRUNK_RING_TIMER = 300
MIXMON_FORMAT = wav
REC_POLICY = caller
RINGTIMER_DEFAULT = 15
TRANSFER_CONTEXT = from-internal-xfer
ASTVERSION = 21.9.1
ASTCHANDAHDI = 0
NULL = ""
SIPLANG = en
ALLOW_SIP_ANON = no
#include globals_custom.conf

;end of [globals]

[app-cf-unavailable-prompt-on]
include => app-cf-unavailable-prompt-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-unavailable-prompt-on,${CHANNEL(language)})}]?app-cf-unavailable-prompt-on,${CHANNEL(language)},${ARG1}():app-cf-unavailable-prompt-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *95,1,Answer
exten => *95,n,Wait(1)
exten => *95,n,Gosub(macro-user-callerid,s,1())
exten => *95,n,Gosub(app-cf-unavailable-prompt-on,lang-playback,1(hook_0))
exten => *95,n,Set(fromext=${IF($["${fromext}"=""]?${AMPUSER}:${fromext})})
exten => *95,n,Wait(1)
exten => *95,n(startread),Gosub(app-cf-unavailable-prompt-on,lang-playback,1(hook_1))
exten => *95,n,GotoIf($["${toext}"=""]?startread)
exten => *95,n,Wait(1)
exten => *95,n,Set(DB(CFU/${fromext})=${toext})
exten => *95,n,Gosub(app-cf-unavailable-prompt-on,lang-playback,1(hook_2))
exten => *95,n,Gosub(macro-hangupcall,s,1())

exten => _*95.,1,Answer
exten => _*95.,n,Wait(1)
exten => _*95.,n,Gosub(macro-user-callerid,s,1())
exten => _*95.,n,Set(fromext=${AMPUSER})
exten => _*95.,n,Set(toext=${EXTEN:3})
exten => _*95.,n,Set(DB(CFU/${fromext})=${toext})
exten => _*95.,n(startread),Gosub(app-cf-unavailable-prompt-on,lang-playback,1(hook_3))
exten => _*95.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Read(fromext,call-fwd-no-ans&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-no-ans&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-no-ans&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-no-ans&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&then-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-no-ans&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-no-ans&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-unavailable-prompt-on] ==--;


[app-cf-unavailable-on]
include => app-cf-unavailable-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-unavailable-on,${CHANNEL(language)})}]?app-cf-unavailable-on,${CHANNEL(language)},${ARG1}():app-cf-unavailable-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *52,1,Answer
exten => *52,n,Wait(1)
exten => *52,n,Gosub(macro-user-callerid,s,1())
exten => *52,n,Set(fromext=${AMPUSER})
exten => *52,n,GotoIf($["${fromext}"!=""]?startread)
exten => *52,n,Playback(agent-loggedoff)
exten => *52,n,Gosub(macro-hangupcall,s,1())
exten => *52,n(startread),Gosub(app-cf-unavailable-on,lang-playback,1(hook_1))
exten => *52,n,GotoIf($["${toext}"=""]?startread)
exten => *52,n,Wait(1)
exten => *52,n,Set(DB(CFU/${fromext})=${toext})
exten => *52,n,Gosub(app-cf-unavailable-on,lang-playback,1(hook_2))
exten => *52,n,Gosub(macro-hangupcall,s,1())

exten => _*52.,1,Answer
exten => _*52.,n,Wait(1)
exten => _*52.,n,Gosub(macro-user-callerid,s,1())
exten => _*52.,n,Set(fromext=${AMPUSER})
exten => _*52.,n,Set(toext=${EXTEN:3})
exten => _*52.,n,Set(DB(CFU/${fromext})=${toext})
exten => _*52.,n(startread),Gosub(app-cf-unavailable-on,lang-playback,1(hook_3))
exten => _*52.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Read(fromext,call-fwd-no-ans&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-no-ans&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-no-ans&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-no-ans&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&then-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-no-ans&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-no-ans&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-unavailable-on] ==--;


[app-cf-unavailable-off]
include => app-cf-unavailable-off-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-unavailable-off,${CHANNEL(language)})}]?app-cf-unavailable-off,${CHANNEL(language)},${ARG1}():app-cf-unavailable-off,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *53,1,Answer
exten => *53,n,Wait(1)
exten => *53,n,Gosub(macro-user-callerid,s,1())
exten => *53,n,Set(fromext=${AMPUSER})
exten => *53,n,Noop(Deleting: CFU/${fromext} ${DB_DELETE(CFU/${fromext})})
exten => *53,n,Gosub(app-cf-unavailable-off,lang-playback,1(hook_0))
exten => *53,n,Gosub(macro-hangupcall,s,1())

exten => _*53.,1,Answer
exten => _*53.,n,Wait(1)
exten => _*53.,n,Gosub(macro-user-callerid,s,1())
exten => _*53.,n,Set(fromext=${EXTEN:3})
exten => _*53.,n,Noop(Deleting: CFU/${fromext} ${DB_DELETE(CFU/${fromext})})
exten => _*53.,n,Gosub(app-cf-unavailable-off,lang-playback,1(hook_1))
exten => _*53.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Playback(call-fwd-no-ans&de-activated)
exten => en,n,Return()
exten => en,n(hook_1),Playback(call-fwd-no-ans&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(cancelled)
exten => en,n,Return()

exten => ja,1(hook_0),Playback(call-fwd-no-ans&de-activated)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-no-ans&jp-wo)
exten => ja,n,Playback(cancelled)
exten => ja,n,Return()

;--== end of [app-cf-unavailable-off] ==--;


[app-cf-prompting-on]
include => app-cf-prompting-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-prompting-on,${CHANNEL(language)})}]?app-cf-prompting-on,${CHANNEL(language)},${ARG1}():app-cf-prompting-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *93,1,Answer
exten => *93,n,Wait(1)
exten => *93,n,Gosub(macro-user-callerid,s,1())
exten => *93,n,Gosub(app-cf-prompting-on,lang-playback,1(hook_0))
exten => *93,n,Set(fromext=${IF($["foo${fromext}"="foo"]?${AMPUSER}:${fromext})})
exten => *93,n,Wait(1)
exten => *93,n(startread),Gosub(app-cf-prompting-on,lang-playback,1(hook_1))
exten => *93,n,GotoIf($["foo${toext}"="foo"]?startread)
exten => *93,n,Wait(1)
exten => *93,n,Set(DB(CF/${fromext})=${toext})
exten => *93,n,Set(STATE=BUSY)
exten => *93,n,Gosub(app-cf-prompting-on,sstate,1())
exten => *93,n,Gosub(app-cf-prompting-on,lang-playback,1(hook_2))
exten => *93,n,Gosub(macro-hangupcall,s,1())

exten => _*93.,1,Answer
exten => _*93.,n,Wait(1)
exten => _*93.,n,Gosub(macro-user-callerid,s,1())
exten => _*93.,n,Set(fromext=${AMPUSER})
exten => _*93.,n,Set(toext=${EXTEN:3})
exten => _*93.,n,Set(DB(CF/${fromext})=${toext})
exten => _*93.,n,Set(STATE=BUSY)
exten => _*93.,n,Gosub(app-cf-prompting-on,sstate,1())
exten => _*93.,n,Gosub(app-cf-prompting-on,lang-playback,1(hook_3))
exten => _*93.,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:CF${fromext})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${fromext}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVCF${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

exten => en,1(hook_0),Read(fromext,call-fwd-unconditional&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-unconditional&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-prompting-on] ==--;


[app-cf-on]
include => app-cf-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-on,${CHANNEL(language)})}]?app-cf-on,${CHANNEL(language)},${ARG1}():app-cf-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *72,1,Answer
exten => *72,n,Wait(1)
exten => *72,n,Gosub(macro-user-callerid,s,1())
exten => *72,n,Set(fromext=${AMPUSER})
exten => *72,n,GotoIf($["${fromext}"!=""]?startread)
exten => *72,n,Playback(agent-loggedoff)
exten => *72,n,Gosub(macro-hangupcall,s,1())
exten => *72,n(startread),Gosub(app-cf-on,lang-playback,1(hook_1))
exten => *72,n,GotoIf($["foo${toext}"="foo"]?startread)
exten => *72,n,Wait(1)
exten => *72,n,Set(DB(CF/${fromext})=${toext})
exten => *72,n,Set(STATE=BUSY)
exten => *72,n,Gosub(app-cf-on,sstate,1())
exten => *72,n,Gosub(app-cf-on,lang-playback,1(hook_2))
exten => *72,n,Gosub(macro-hangupcall,s,1())

exten => _*72.,1,Answer
exten => _*72.,n,Wait(1)
exten => _*72.,n,Gosub(macro-user-callerid,s,1())
exten => _*72.,n,Set(fromext=${AMPUSER})
exten => _*72.,n,Set(toext=${EXTEN:3})
exten => _*72.,n,Set(DB(CF/${fromext})=${toext})
exten => _*72.,n,Set(STATE=BUSY)
exten => _*72.,n,Gosub(app-cf-on,sstate,1())
exten => _*72.,n,Gosub(app-cf-on,lang-playback,1(hook_3))
exten => _*72.,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:CF${fromext})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${fromext}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVCF${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

exten => en,1(hook_0),Read(fromext,call-fwd-unconditional&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-unconditional&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-on] ==--;


[app-cf-off-any]
include => app-cf-off-any-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-off-any,${CHANNEL(language)})}]?app-cf-off-any,${CHANNEL(language)},${ARG1}():app-cf-off-any,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *74,1,Answer
exten => *74,n,Gosub(macro-user-callerid,s,1())
exten => *74,n,Wait(1)
exten => *74,n,Gosub(app-cf-off-any,lang-playback,1(hook_0))
exten => *74,n,Set(fromext=${IF($["foo${fromext}"="foo"]?${AMPUSER}:${fromext})})
exten => *74,n,Wait(1)
exten => *74,n,Noop(Deleting: CF/${fromext} ${DB_DELETE(CF/${fromext})})
exten => *74,n,Set(STATE=NOT_INUSE)
exten => *74,n,Gosub(app-cf-off-any,sstate,1())
exten => *74,n,Gosub(app-cf-off-any,lang-playback,1(hook_1))
exten => *74,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:CF${fromext})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${fromext}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVCF${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

exten => en,1(hook_0),Read(fromext,please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(cancelled)
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo&cancelled)
exten => ja,n,Return()

;--== end of [app-cf-off-any] ==--;


[app-cf-off]
include => app-cf-off-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-off,${CHANNEL(language)})}]?app-cf-off,${CHANNEL(language)},${ARG1}():app-cf-off,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *73,1,Answer
exten => *73,n,Wait(1)
exten => *73,n,Gosub(macro-user-callerid,s,1())
exten => *73,n,Set(fromext=${AMPUSER})
exten => *73,n,Noop(Deleting: CF/${fromext} ${DB_DELETE(CF/${fromext})})
exten => *73,n,Set(STATE=NOT_INUSE)
exten => *73,n,Gosub(app-cf-off,sstate,1())
exten => *73,n,Gosub(app-cf-off,lang-playback,1(hook_0))
exten => *73,n,Gosub(macro-hangupcall,s,1())

exten => _*73.,1,Answer
exten => _*73.,n,Wait(1)
exten => _*73.,n,Gosub(macro-user-callerid,s,1())
exten => _*73.,n,Set(fromext=${EXTEN:3})
exten => _*73.,n,Noop(Deleting: CF/${fromext} ${DB_DELETE(CF/${fromext})})
exten => _*73.,n,Set(STATE=NOT_INUSE)
exten => _*73.,n,Gosub(app-cf-off,sstate,1())
exten => _*73.,n,Gosub(app-cf-off,lang-playback,1(hook_1))
exten => _*73.,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:CF${fromext})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${fromext}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVCF${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

exten => en,1(hook_0),Playback(call-fwd-unconditional&de-activated)
exten => en,n,Return()
exten => en,n(hook_1),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(cancelled)
exten => en,n,Return()

exten => ja,1(hook_0),Playback(call-fwd-unconditional&de-activated)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo&cancelled)
exten => ja,n,Return()

;--== end of [app-cf-off] ==--;


[app-cf-busy-prompting-on]
include => app-cf-busy-prompting-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-busy-prompting-on,${CHANNEL(language)})}]?app-cf-busy-prompting-on,${CHANNEL(language)},${ARG1}():app-cf-busy-prompting-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *94,1,Answer
exten => *94,n,Wait(1)
exten => *94,n,Gosub(macro-user-callerid,s,1())
exten => *94,n,Gosub(app-cf-busy-prompting-on,lang-playback,1(hook_0))
exten => *94,n,Set(fromext=${IF($["${fromext}"=""]?${AMPUSER}:${fromext})})
exten => *94,n,Wait(1)
exten => *94,n(startread),Gosub(app-cf-busy-prompting-on,lang-playback,1(hook_1))
exten => *94,n,Gosub(app-cf-busy-prompting-on,lang-playback,1(hook_2))
exten => *94,n,Gosub(macro-hangupcall,s,1())

exten => _*94.,1,Answer
exten => _*94.,n,Wait(1)
exten => _*94.,n,Gosub(macro-user-callerid,s,1())
exten => _*94.,n,Set(fromext=${AMPUSER})
exten => _*94.,n,Set(toext=${EXTEN:3})
exten => _*94.,n,Set(DB(CFB/${fromext})=${toext})
exten => _*94.,n,Gosub(app-cf-busy-prompting-on,lang-playback,1(hook_3))
exten => _*94.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Read(fromext,call-fwd-on-busy&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,GotoIf($["${toext}"=""]?hook_1)
exten => en,n,Wait(1)
exten => en,n,Set(DB(CFB/${fromext})=${toext})
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-on-busy&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&then-press-pound,,,,)
exten => ja,n,GotoIf($["${toext}"=""]?hook_1)
exten => ja,n,Wait(1)
exten => ja,n,Set(DB(CFB/${fromext})=${toext})
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-busy-prompting-on] ==--;


[app-cf-busy-on]
include => app-cf-busy-on-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-busy-on,${CHANNEL(language)})}]?app-cf-busy-on,${CHANNEL(language)},${ARG1}():app-cf-busy-on,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *90,1,Answer
exten => *90,n,Wait(1)
exten => *90,n,Gosub(macro-user-callerid,s,1())
exten => *90,n,Set(fromext=${AMPUSER})
exten => *90,n,GotoIf($["${fromext}"!=""]?startread)
exten => *90,n,Playback(agent-loggedoff)
exten => *90,n,Gosub(macro-hangupcall,s,1())
exten => *90,n(startread),Gosub(app-cf-busy-on,lang-playback,1(hook_1))
exten => *90,n,Gosub(app-cf-busy-on,lang-playback,1(hook_2))
exten => *90,n,Gosub(macro-hangupcall,s,1())

exten => _*90.,1,Answer
exten => _*90.,n,Wait(1)
exten => _*90.,n,Gosub(macro-user-callerid,s,1())
exten => _*90.,n,Set(fromext=${AMPUSER})
exten => _*90.,n,Set(toext=${EXTEN:3})
exten => _*90.,n,Set(DB(CFB/${fromext})=${toext})
exten => _*90.,n,Gosub(app-cf-busy-on,lang-playback,1(hook_3))
exten => _*90.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Read(fromext,call-fwd-on-busy&please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Read(toext,agent-newlocation,,,,)
exten => en,n,GotoIf($["${toext}"=""]?hook_1)
exten => en,n,Wait(1)
exten => en,n,Set(DB(CFB/${fromext})=${toext})
exten => en,n,Return()
exten => en,n(hook_2),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()
exten => en,n(hook_3),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,call-fwd-on-busy&extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Read(toext,ent-target-attendant&then-press-pound,,,,)
exten => ja,n,GotoIf($["${toext}"=""]?hook_1)
exten => ja,n,Wait(1)
exten => ja,n,Set(DB(CFB/${fromext})=${toext})
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-busy-on] ==--;


[app-cf-busy-off-any]
include => app-cf-busy-off-any-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-busy-off-any,${CHANNEL(language)})}]?app-cf-busy-off-any,${CHANNEL(language)},${ARG1}():app-cf-busy-off-any,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *92,1,Answer
exten => *92,n,Gosub(macro-user-callerid,s,1())
exten => *92,n,Wait(1)
exten => *92,n,Gosub(app-cf-busy-off-any,lang-playback,1(hook_0))
exten => *92,n,Set(fromext=${IF($["foo${fromext}"="foo"]?${AMPUSER}:${fromext})})
exten => *92,n,Wait(1)
exten => *92,n,Noop(Deleting: CFB/${fromext} ${DB_DELETE(CFB/${fromext})})
exten => *92,n,Gosub(app-cf-busy-off-any,lang-playback,1(hook_1))
exten => *92,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Read(fromext,please-enter-your-extension-then-press-pound,,,,)
exten => en,n,Return()
exten => en,n(hook_1),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(cancelled)
exten => en,n,Return()

exten => ja,1(hook_0),Read(fromext,extension&please-enter-your&vm-press-pound,,,,)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,Playback(cancelled)
exten => ja,n,Return()

;--== end of [app-cf-busy-off-any] ==--;


[app-cf-busy-off]
include => app-cf-busy-off-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-busy-off,${CHANNEL(language)})}]?app-cf-busy-off,${CHANNEL(language)},${ARG1}():app-cf-busy-off,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *91,1,Answer
exten => *91,n,Wait(1)
exten => *91,n,Gosub(macro-user-callerid,s,1())
exten => *91,n,Set(fromext=${AMPUSER})
exten => *91,n,Noop(Deleting: CFB/${fromext} ${DB_DELETE(CFB/${fromext})})
exten => *91,n,Gosub(app-cf-busy-off,lang-playback,1(hook_0))
exten => *91,n,Gosub(macro-hangupcall,s,1())

exten => _*91.,1,Answer
exten => _*91.,n,Wait(1)
exten => _*91.,n,Gosub(macro-user-callerid,s,1())
exten => _*91.,n,Set(fromext=${EXTEN:3})
exten => _*91.,n,Noop(Deleting: CFB/${fromext} ${DB_DELETE(CFB/${fromext})})
exten => _*91.,n,Gosub(app-cf-busy-off,lang-playback,1(hook_1))
exten => _*91.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Playback(call-fwd-on-busy&de-activated)
exten => en,n,Return()
exten => en,n(hook_1),Playback(call-fwd-on-busy&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(cancelled)
exten => en,n,Return()

exten => ja,1(hook_0),Playback(call-fwd-on-busy&de-activated)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-on-busy&jp-wo)
exten => ja,n,Playback(cancelled)
exten => ja,n,Return()

;--== end of [app-cf-busy-off] ==--;


[app-cf-toggle]
include => app-cf-toggle-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(app-cf-toggle,${CHANNEL(language)})}]?app-cf-toggle,${CHANNEL(language)},${ARG1}():app-cf-toggle,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *96,1,Answer
exten => *96,n,Wait(1)
exten => *96,n,Gosub(macro-user-callerid,s,1())
exten => *96,n,Set(fromext=${AMPUSER})
exten => *96,n,GotoIf($["${DB(CF/${fromext})}" = ""]?activate:deactivate)
exten => *96,n(activate),Read(toext,agent-newlocation,,,,)
exten => *96,n,GotoIf($["${toext}"=""]?activate)
exten => *96,n,Wait(1)
exten => *96,n(toext),Set(DB(CF/${fromext})=${toext})
exten => *96,n,Set(STATE=BUSY)
exten => *96,n,Gosub(app-cf-toggle,sstate,1())
exten => *96,n,Gosub(app-cf-toggle,lang-playback,1(hook_0))
exten => *96,n,Gosub(macro-hangupcall,s,1())
exten => *96,n(setdirect),Answer
exten => *96,n,Wait(1)
exten => *96,n,Gosub(macro-user-callerid,s,1())
exten => *96,n,Set(fromext=${AMPUSER})
exten => *96,n,Goto(toext)
exten => *96,n(deactivate),Noop(Deleting: CF/${fromext} ${DB_DELETE(CF/${fromext})})
exten => *96,n,Set(STATE=NOT_INUSE)
exten => *96,n,Gosub(app-cf-toggle,sstate,1())
exten => *96,n(hook_off),Playback(call-fwd-unconditional&de-activated)
exten => *96,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:CF${fromext})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${fromext}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVCF${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

exten => en,1(hook_0),Playback(call-fwd-unconditional&for&extension)
exten => en,n,SayDigits(${fromext})
exten => en,n,Playback(is-set-to)
exten => en,n,SayDigits(${toext})
exten => en,n,Return()

exten => ja,1(hook_0),Playback(extension)
exten => ja,n,SayDigits(${fromext})
exten => ja,n,Playback(jp-no&call-fwd-unconditional&jp-wo)
exten => ja,n,SayDigits(${toext})
exten => ja,n,Playback(is-set-to)
exten => ja,n,Return()

;--== end of [app-cf-toggle] ==--;


[ext-cf-hints]
include => ext-cf-hints-custom
exten => _*961001.,1,Set(toext=${EXTEN:7})
exten => _*961001.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961002.,1,Set(toext=${EXTEN:7})
exten => _*961002.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961003.,1,Set(toext=${EXTEN:7})
exten => _*961003.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961004.,1,Set(toext=${EXTEN:7})
exten => _*961004.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961005.,1,Set(toext=${EXTEN:7})
exten => _*961005.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961006.,1,Set(toext=${EXTEN:7})
exten => _*961006.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961007.,1,Set(toext=${EXTEN:7})
exten => _*961007.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961008.,1,Set(toext=${EXTEN:7})
exten => _*961008.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961009.,1,Set(toext=${EXTEN:7})
exten => _*961009.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*961010.,1,Set(toext=${EXTEN:7})
exten => _*961010.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*969090.,1,Set(toext=${EXTEN:7})
exten => _*969090.,n,Goto(app-cf-toggle,*96,setdirect)

exten => _*96XXXX,1,Goto(app-cf-toggle,*96,1)

exten => _*96X.,hint,Custom:DEVCF${EXTEN:3}
;--== end of [ext-cf-hints] ==--;


[sub-record-cancel]
include => sub-record-cancel-custom
exten => s,1,Return()

;--== end of [sub-record-cancel] ==--;


[sub-record-check]
include => sub-record-check-custom
exten => s,1,GotoIf($[${LEN(${FROMEXTEN})}]?initialized)
exten => s,n,Set(__REC_STATUS=INITIALIZED)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(__DAY=${STRFTIME(${NOW},,%d)})
exten => s,n,Set(__MONTH=${STRFTIME(${NOW},,%m)})
exten => s,n,Set(__YEAR=${STRFTIME(${NOW},,%Y)})
exten => s,n,Set(__TIMESTR=${YEAR}${MONTH}${DAY}-${STRFTIME(${NOW},,%H%M%S)})
exten => s,n,Set(__FROMEXTEN=${IF($[${LEN(${AMPUSER})}]?${AMPUSER}:${IF($[${LEN(${REALCALLERIDNUM})}]?${REALCALLERIDNUM}:unknown)})})
exten => s,n,Set(__MON_FMT=${IF($["${MIXMON_FORMAT}"="wav49"]?WAV:${MIXMON_FORMAT})})
exten => s,n(initialized),Noop(Recordings initialized)
exten => s,n,ExecIf($[!${LEN(${ARG3})}]?Set(ARG3=dontcare))
exten => s,n,Set(REC_POLICY_MODE_SAVE=${REC_POLICY_MODE})
exten => s,n,ExecIf($["${BLINDTRANSFER}${ATTENDEDTRANSFER}" != ""]?Set(REC_STATUS=NO))
exten => s,n(next),GotoIf($[${LEN(${ARG1})}]?checkaction)
exten => s,n(recorderror),Playback(something-terribly-wrong,error)
exten => s,n,Hangup()
exten => s,n(checkaction),GotoIf($[${DIALPLAN_EXISTS(sub-record-check,${ARG1})}]?sub-record-check,${ARG1},1)
exten => s,n,Noop(Generic ${ARG1} Recording Check - ${FROMEXTEN} ${ARG2})
exten => s,n,Gosub(recordcheck,1(${ARG3},${ARG1},${ARG2}))
exten => s,n,Return()

exten => recordcheck,1,Noop(Starting recording check against ${ARG1})
exten => recordcheck,n,Goto(${ARG1})
exten => recordcheck,n(dontcare),Return()
exten => recordcheck,n(always),Noop(Detected legacy "always" entry. Mapping to "force")
exten => recordcheck,n(force),Set(__REC_POLICY_MODE=FORCE)
exten => recordcheck,n,GotoIf($["${REC_STATUS}"!="RECORDING"]?startrec)
exten => recordcheck,n,Return()
exten => recordcheck,n(delayed),Noop(Detected legacy "delayed" entry. Mapping to "yes")
exten => recordcheck,n(yes),ExecIf($["${REC_POLICY_MODE_SAVE}" = "never" | "${REC_POLICY_MODE_SAVE}" = "NEVER" | "${REC_POLICY_MODE}" = "NEVER" | "${REC_POLICY_MODE}" = "NO" | "${REC_STATUS}" = "RECORDING"]?Return())
exten => recordcheck,n,Set(__REC_POLICY_MODE=YES)
exten => recordcheck,n,Goto(startrec)
exten => recordcheck,n(no),Set(__REC_POLICY_MODE=NO)
exten => recordcheck,n,Return()
exten => recordcheck,n(never),Set(__REC_POLICY_MODE=NEVER)
exten => recordcheck,n,Goto(stoprec)
exten => recordcheck,n(startrec),Noop(Starting recording: ${ARG2}, ${ARG3})
exten => recordcheck,n,ExecIf($["${FROMQUEUEEXTEN}" != ""]?Set(RECFROMEXTEN=${FROMQUEUEEXTEN}))
exten => recordcheck,n,ExecIf($["${FROMQUEUEEXTEN}" == ""]?Set(RECFROMEXTEN=${FROMEXTEN}))
exten => recordcheck,n,Set(__CALLFILENAME=${ARG2}-${ARG3}-${RECFROMEXTEN}-${TIMESTR}-${UNIQUEID})
exten => recordcheck,n,Set(_LOCAL_MIXMON_ID=${TIMESTR}-${UNIQUEID})
exten => recordcheck,n(monitorcmd),MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT},a${MONITOR_REC_OPTION}i(${LOCAL_MIXMON_ID})${MIXMON_BEEP},${MIXMON_POST})
exten => recordcheck,n,Set(__MIXMON_ID=${LOCAL_MIXMON_ID})
exten => recordcheck,n,Set(__RECORD_ID=${CHANNEL(name)})
exten => recordcheck,n,Set(__REC_STATUS=RECORDING)
exten => recordcheck,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recordcheck,n,Return()
exten => recordcheck,n(stoprec),Noop(Stopping recording: ${ARG2}, ${ARG3})
exten => recordcheck,n,Set(__REC_STATUS=STOPPED)
exten => recordcheck,n,System(${AMPBIN}/stoprecording.php "${CHANNEL(name)}")
exten => recordcheck,n,Return()

exten => out,1,Noop(Outbound Recording Check from ${FROMEXTEN} to ${ARG2})
exten => out,n,Set(RECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/external)})
exten => out,n,ExecIf($[!${LEN(${RECMODE})} | "${RECMODE}" = "dontcare"]?Goto(routewins))
exten => out,n,ExecIf($["${ARG3}" = "never" | "${ARG3}" = "force"]?Goto(routewins))
exten => out,n(extenwins),Gosub(recordcheck,1(${RECMODE},out,${ARG2}))
exten => out,n,Return()
exten => out,n(routewins),Gosub(recordcheck,1(${ARG3},out,${ARG2}))
exten => out,n,Return()

exten => in,1,Noop(Inbound Recording Check to ${ARG2})
exten => in,n,Set(FROMEXTEN=unknown)
exten => in,n,ExecIf($[${LEN(${CALLERID(num)})}]?Set(FROMEXTEN=${CALLERID(num)}))
exten => in,n,Gosub(recordcheck,1(${ARG3},in,${ARG2}))
exten => in,n,Return()

exten => exten,1,Noop(Exten Recording Check between ${FROMEXTEN} and ${ARG2})
exten => exten,n,Set(CALLTYPE=${IF($[${LEN(${FROM_DID})}]?external:internal)})
exten => exten,n,ExecIf(${LEN(${CALLTYPE_OVERRIDE})}?Set(CALLTYPE=${CALLTYPE_OVERRIDE}))
exten => exten,n,Set(CALLEE=${DB(AMPUSER/${ARG2}/recording/in/${CALLTYPE})})
exten => exten,n,ExecIf($[!${LEN(${CALLEE})}]?Set(CALLEE=dontcare))
exten => exten,n,GotoIf($["${CALLTYPE}"="external"]?callee)
exten => exten,n,GotoIf($["${CALLEE}"="dontcare"]?caller)
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${FROMEXTEN}/recording/priority)})}]?Set(CALLER_PRI=${DB(AMPUSER/${FROMEXTEN}/recording/priority)}):Set(CALLER_PRI=0))
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${ARG2}/recording/priority)})}]?Set(CALLEE_PRI=${DB(AMPUSER/${ARG2}/recording/priority)}):Set(CALLEE_PRI=0))
exten => exten,n,GotoIf($["${CALLER_PRI}"="${CALLEE_PRI}"]?${REC_POLICY}:${IF($[${CALLER_PRI}>${CALLEE_PRI}]?caller:callee)})
exten => exten,n(callee),Gosub(recordcheck,1(${CALLEE},${CALLTYPE},${ARG2}))
exten => exten,n,Return()
exten => exten,n(caller),Set(RECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)})
exten => exten,n,Set(CALLERRECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)})
exten => exten,n,Set(CALEERECMODE=${DB(AMPUSER/${ARG2}/recording/in/internal)})
exten => exten,n,GotoIf($[!${LEN(${CALEERECMODE})}]?processnormal)
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="never"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="force" & "${CALLERRECMODE}"="no"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="force" & "${CALLERRECMODE}"="never"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="never" & "${CALLERRECMODE}"="force"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n(processnormal),ExecIf($[!${LEN(${RECMODE})}]?Set(RECMODE=dontcare))
exten => exten,n,ExecIf($["${RECMODE}"="dontcare"]?Set(RECMODE=${CALLEE}))
exten => exten,n,Gosub(recordcheck,1(${RECMODE},${CALLTYPE},${ARG2}))
exten => exten,n,Return()

exten => conf,1,Noop(Conference Recording Check ${FROMEXTEN} to ${ARG2})
exten => conf,n,Gosub(recconf,1(${ARG2},${ARG2},${ARG3}))
exten => conf,n,Return()

exten => page,1,Noop(Paging Recording Check ${FROMEXTEN} to ${ARG2})
exten => page,n,GosubIf($["${REC_POLICY_MODE}"="always"]?recconf,1(${ARG2},${FROMEXTEN},${ARG3}))
exten => page,n,Return()

exten => recconf,1,Noop(Setting up recording: ${ARG1}, ${ARG2}, ${ARG3})
exten => recconf,n,Set(__CALLFILENAME=${IF($[${CONFBRIDGE_INFO(parties,${ARG2})}]?${DB(RECCONF/${ARG2})}:${ARG1}-${ARG2}-${ARG3}-${TIMESTR}-${UNIQUEID})})
exten => recconf,n,ExecIf($[!${CONFBRIDGE_INFO(parties,${ARG2})}]?Set(DB(RECCONF/${ARG2})=${CALLFILENAME}))
exten => recconf,n,Set(CONFBRIDGE(bridge,record_file)=${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT})
exten => recconf,n,ExecIf($["${ARG3}"!="always"]?Return())
exten => recconf,n,Set(CONFBRIDGE(bridge,record_conference)=yes)
exten => recconf,n,Set(CONFBRIDGE(bridge,record_file_timestamp)=no)
exten => recconf,n,Set(__REC_STATUS=RECORDING)
exten => recconf,n,Set(CDR(recordingfile)=${IF($[${CONFBRIDGE_INFO(parties,${ARG2})}]?${CALLFILENAME}.${MON_FMT}:${CALLFILENAME}.${MON_FMT})})
exten => recconf,n,Noop(${MIXMONITOR_FILENAME})
exten => recconf,n,Set(CHANNEL(hangup_handler_push)=sub-record-hh-check,s,1)
exten => recconf,n,Return()

exten => recq,1,Noop(Setting up recording: ${ARG1}, ${ARG2}, ${ARG3})
exten => recq,n,Set(MONITOR_FILENAME=${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME})
exten => recq,n,MixMonitor(${MONITOR_FILENAME}.${MON_FMT},${EVAL(${MONITOR_OPTIONS})}${MIXMON_BEEP},${EVAL(${MIXMON_POST})})
exten => recq,n,Set(__REC_STATUS=RECORDING)
exten => recq,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recq,n,Return()

exten => parking,1,Noop(User ${ARG2} picked up a parked call)
exten => parking,n,Set(USER=${ARG2})
exten => parking,n,ExecIf($[!${LEN(${ARG2})}]?Set(USER=unknown))
exten => parking,n,Set(RECMODE=${DB(AMPUSER/${ARG2}/recording/out/internal)})
exten => parking,n,ExecIf($[!${LEN(${RECMODE})}]?Set(RECMODE=dontcare))
exten => parking,n,Gosub(recordcheck,1(${RECMODE},parked,${USER}))
exten => parking,n,Return()

;--== end of [sub-record-check] ==--;


[sub-record-hh-check]
include => sub-record-hh-check-custom
exten => _s,1,Noop(Callee: ${MIXMONITOR_FILENAME})
exten => _s,n(exit),Return()

;--== end of [sub-record-hh-check] ==--;


[macro-one-touch-record]
include => macro-one-touch-record-custom
exten => s,1,Set(ONETOUCH_REC_SCRIPT_STATUS=)
exten => s,n,System(${AMPBIN}/one_touch_record.php "${CHANNEL(name)}")
exten => s,n,Noop(ONETOUCH_REC_SCRIPT_STATUS: [${ONETOUCH_REC_SCRIPT_STATUS}])
exten => s,n,Noop(REC_STATUS: [${REC_STATUS}])
exten => s,n,GotoIf($["${ONETOUCH_REC_SCRIPT_STATUS:0:6}"="DENIED"]?denied)
exten => s,n,ExecIf($["${REC_STATUS}"="STOPPED"]?Playback(beep&beep))
exten => s,n,GotoIf($["${REC_STATUS}"="STOPPED"]?end)
exten => s,n,GotoIf($["${REC_STATUS}"="RECORDING"]?startrec)
exten => s,n(startrec),MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT},ai(LOCAL_MIXMON_ID)${MIXMON_BEEP},${EVAL(${MIXMON_POST})})
exten => s,n,ExecIf($["${REC_STATUS}"="RECORDING"]?Playback(beep))
exten => s,n(denied),ExecIf($["${ONETOUCH_REC_SCRIPT_STATUS:0:6}"="DENIED"]?Playback(access-denied))
exten => s,n(end),Return(${GOSUB_RETVAL})

;--== end of [macro-one-touch-record] ==--;


[app-callwaiting-cwon]
include => app-callwaiting-cwon-custom
exten => *70,1,Gosub(macro-user-callerid,s,1())
exten => *70,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *70,n,Set(CONNECTEDLINE(name,i)=Call Waiting: ON)
exten => *70,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => *70,n,Answer
exten => *70,n,Wait(1)
exten => *70,n,Set(DB(CW/${AMPUSER})=ENABLED)
exten => *70,n(hook_1),Playback(call-waiting&activated)
exten => *70,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-callwaiting-cwon] ==--;


[app-callwaiting-cwoff]
include => app-callwaiting-cwoff-custom
exten => *71,1,Gosub(macro-user-callerid,s,1())
exten => *71,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *71,n,Set(CONNECTEDLINE(name,i)=Call Waiting: OFF)
exten => *71,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => *71,n,Answer
exten => *71,n,Wait(1)
exten => *71,n,Noop(Deleting: CW/${AMPUSER} ${DB_DELETE(CW/${AMPUSER})})
exten => *71,n(hook_1),Playback(call-waiting&de-activated)
exten => *71,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-callwaiting-cwoff] ==--;


[cidlookup]
include => cidlookup-custom
exten => cidlookup_return,1,ExecIf($["${DB(cidname/${CALLERID(num)})}" != ""]?Set(CALLERID(name)=${DB(cidname/${CALLERID(num)})}))
exten => cidlookup_return,n,Return()

;--== end of [cidlookup] ==--;


[app-dictate-send]
include => app-dictate-send-custom
exten => *35,1,Answer
exten => *35,n,Gosub(macro-user-callerid,s,1())
exten => *35,n,Noop(CallerID is ${AMPUSER})
exten => *35,n,Set(DICTENABLED=${DB(AMPUSER/${AMPUSER}/dictate/enabled)})
exten => *35,n,GotoIf($[$["x${DICTENABLED}"="x"]|$["x${DICTENABLED}"="xdisabled"]]?nodict:dictok)
exten => *35,n(nodict),Playback(feature-not-avail-line)
exten => *35,n,Hangup()
exten => *35,n(dictok),Read(DICTFILE,enter-filename-short,,,,)
exten => *35,n,Set(DICTEMAIL=${DB(AMPUSER/${AMPUSER}/dictate/email)})
exten => *35,n,Set(DICTFMT=${DB(AMPUSER/${AMPUSER}/dictate/format)})
exten => *35,n,Set(DICTFROM=${DB(AMPUSER/${AMPUSER}/dictate/from)})
exten => *35,n,Set(NAME=${DB(AMPUSER/${AMPUSER}/cidname)})
exten => *35,n,Playback(dictation-being-processed)
exten => *35,n,System(/var/lib/asterisk/bin/audio-email.pl --file /var/lib/asterisk/sounds/dictate/${AMPUSER}/${DICTFILE}.raw --attachment dict-${DICTFILE} --format ${DICTFMT} --to ${DICTEMAIL} --from ${DICTFROM} --subject "Dictation from ${NAME} Attached")
exten => *35,n,Playback(dictation-sent)
exten => *35,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-dictate-send] ==--;


[app-dictate-record]
include => app-dictate-record-custom
exten => *34,1,Answer
exten => *34,n,Gosub(macro-user-callerid,s,1())
exten => *34,n,Noop(CallerID is ${AMPUSER})
exten => *34,n,Set(DICTENABLED=${DB(AMPUSER/${AMPUSER}/dictate/enabled)})
exten => *34,n,GotoIf($[$["x${DICTENABLED}"="x"]|$["x${DICTENABLED}"="xdisabled"]]?nodict:dictok)
exten => *34,n(nodict),Playback(feature-not-avail-line)
exten => *34,n,Hangup()
exten => *34,n(dictok),Dictate(/var/lib/asterisk/sounds/dictate/${AMPUSER})
exten => *34,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-dictate-record] ==--;


[disa-dial]
include => disa-dial-custom
exten => _[0-9a-zA-Z],1,Noop(called ${EXTEN} in ${DISACONTEXT} by ID: ${CUT(DISA,^,2)})
exten => _[0-9a-zA-Z],n,Dial(Local/${EXTEN}@${DISACONTEXT},300,${HANGUP})
exten => _[0-9a-zA-Z],n,Gosub(s-${DIALSTATUS},1())
exten => _[0-9a-zA-Z],n,Goto(${CUT(DISA,^,1)},${CUT(DISA,^,2)},${CUT(DISA,^,3)})

exten => _[0-9a-zA-Z*#].,1,Noop(called ${EXTEN} in ${DISACONTEXT} by ID: ${CUT(DISA,^,2)})
exten => _[0-9a-zA-Z*#].,n,Dial(Local/${EXTEN}@${DISACONTEXT},300,${HANGUP})
exten => _[0-9a-zA-Z*#].,n,Gosub(s-${DIALSTATUS},1())
exten => _[0-9a-zA-Z*#].,n,Goto(${CUT(DISA,^,1)},${CUT(DISA,^,2)},${CUT(DISA,^,3)})

exten => s-ANSWER,1,Return()

exten => s-CANCEL,1,Return()

exten => s-BUSY,1,Playtones(busy)
exten => s-BUSY,n,Wait(3)
exten => s-BUSY,n,Return()

exten => _s-.,1,Noop(DISA Dial failed due to ${DIALSTATUS} - returning to dial tone)
exten => _s-.,n,Playtones(congestion)
exten => _s-.,n,Wait(3)
exten => _s-.,n,StopPlaytones
exten => _s-.,n,Return()

;--== end of [disa-dial] ==--;


[app-dnd-toggle]
include => app-dnd-toggle-custom
exten => *76,1,Answer
exten => *76,n,Wait(1)
exten => *76,n,Gosub(macro-user-callerid,s,1())
exten => *76,n,GotoIf($["${DB(DND/${AMPUSER})}" = ""]?activate:deactivate)
exten => *76,n(activate),Set(DB(DND/${AMPUSER})=YES)
exten => *76,n,Set(STATE=BUSY)
exten => *76,n,Gosub(app-dnd-toggle,sstate,1())
exten => *76,n(hook_on),Playback(do-not-disturb&activated)
exten => *76,n,Gosub(macro-hangupcall,s,1())
exten => *76,n(deactivate),Noop(Deleting: DND/${AMPUSER} ${DB_DELETE(DND/${AMPUSER})})
exten => *76,n,Set(STATE=UNAVAILABLE)
exten => *76,n,Gosub(app-dnd-toggle,sstate,1())
exten => *76,n(hook_off),Playback(do-not-disturb&de-activated)
exten => *76,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:DND${AMPUSER})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${AMPUSER}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVDND${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

;--== end of [app-dnd-toggle] ==--;


[app-dnd-on]
include => app-dnd-on-custom
exten => *78,1,Answer
exten => *78,n,Wait(1)
exten => *78,n,Gosub(macro-user-callerid,s,1())
exten => *78,n,Set(DB(DND/${AMPUSER})=YES)
exten => *78,n,Set(STATE=BUSY)
exten => *78,n,Gosub(app-dnd-on,sstate,1())
exten => *78,n(hook_1),Playback(do-not-disturb&activated)
exten => *78,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:DND${AMPUSER})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${AMPUSER}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVDND${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

;--== end of [app-dnd-on] ==--;


[app-dnd-off]
include => app-dnd-off-custom
exten => *79,1,Answer
exten => *79,n,Wait(1)
exten => *79,n,Gosub(macro-user-callerid,s,1())
exten => *79,n,Noop(Deleting: DND/${AMPUSER} ${DB_DELETE(DND/${AMPUSER})})
exten => *79,n,Set(STATE=UNAVAILABLE)
exten => *79,n,Gosub(app-dnd-off,sstate,1())
exten => *79,n(hook_1),Playback(do-not-disturb&de-activated)
exten => *79,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICE_STATE(Custom:DND${AMPUSER})=${STATE})
exten => sstate,n,Set(DEVICES=${DB(AMPUSER/${AMPUSER}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:DEVDND${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

;--== end of [app-dnd-off] ==--;


[ext-dnd-hints]
include => ext-dnd-hints-custom
exten => _*76X.,1,Goto(app-dnd-toggle,*76,1)
exten => _*76X.,hint,Custom:DEVDND${EXTEN:3}

;--== end of [ext-dnd-hints] ==--;


[ext-fax]
include => ext-fax-custom
exten => s,1,Gosub(macro-user-callerid,s,1())
exten => s,n,Noop(Receiving Fax for: ${FAX_FOR} , From: ${CALLERID(all)})
exten => s,n(receivefax),StopPlaytones
exten => s,n,ReceiveFAX(${ASTSPOOLDIR}/fax/${UNIQUEID}.tif,f)
exten => s,n,ExecIf($["${FAXSTATUS:0:6}"="FAILED" && "${FAXERROR}"!="INIT_ERROR"]?Set(FAXSTATUS="FAILED: error: ${FAXERROR} statusstr: ${FAXOPT(statusstr)}"))
exten => s,n,Hangup()

exten => h,1,GotoIf($[${STAT(e,${ASTSPOOLDIR}/fax/${UNIQUEID}.tif)} = 0]?failed)
exten => h,n(delete_opt),Set(DELETE_AFTER_SEND=true)
exten => h,n(process),GotoIf($[ "${FAX_RX_EMAIL_LEN}" = "0" | "${FAX_RX_EMAIL_LEN}" = "" ]?noemail)
exten => h,n(sendfax),System(${AMPBIN}/fax2mail.php --remotestationid "${FAXOPT(remotestationid)}" --user "${FAX_RX_USER}" --dest "${FROM_DID}" --callerid "${BASE64_ENCODE(${CALLERID(all)})}" --file ${ASTSPOOLDIR}/fax/${UNIQUEID}.tif --delete "${DELETE_AFTER_SEND}")
exten => h,n(end),Gosub(macro-hangupcall,s,1())
exten => h,n(noemail),Noop(ERROR: No Email Address to send FAX: status: [${FAXSTATUS}],  From: [${CALLERID(all)}], trying system fax destination)
exten => h,n,GotoIf($[ "${FAX_RX_EMAIL}" = "" ]?delfax)
exten => h,n,System(${AMPBIN}/fax2mail.php --remotestationid "${FAXOPT(remotestationid)}" --sendto "${FAX_RX_EMAIL}" --dest "${FROM_DID}" --callerid "${BASE64_ENCODE(${CALLERID(all)})}" --file ${ASTSPOOLDIR}/fax/${UNIQUEID}.tif --delete "${DELETE_AFTER_SEND}")
exten => h,n,Gosub(macro-hangupcall,s,1())
exten => h,n(delfax),System(${AMPBIN}/fax2mail.php --file ${ASTSPOOLDIR}/fax/${UNIQUEID}.tif --delete "${DELETE_AFTER_SEND}")
exten => h,n,Gosub(macro-hangupcall,s,1())
exten => h,process+101(failed),Noop(FAX ${FAXSTATUS} for: ${FAX_FOR} , From: ${CALLERID(all)})
exten => h,n,Gosub(macro-hangupcall,s,1())

;--== end of [ext-fax] ==--;


[app-fax]
include => app-fax-custom
exten => 666,1,Set(FAX_RX_EMAIL=)
exten => 666,n,Goto(ext-fax,s,1)

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [app-fax] ==--;


[ext-did-0001]
include => ext-did-0001-custom
exten => fax,1,Set(__DIRECTION=INBOUND)
exten => fax,n,Goto(${CUT(FAX_DEST,^,1)},${CUT(FAX_DEST,^,2)},${CUT(FAX_DEST,^,3)})

;--== end of [ext-did-0001] ==--;


[ext-did-0002]
include => ext-did-0002-custom
exten => fax,1,Set(__DIRECTION=INBOUND)
exten => fax,n,Goto(${CUT(FAX_DEST,^,1)},${CUT(FAX_DEST,^,2)},${CUT(FAX_DEST,^,3)})

;--== end of [ext-did-0002] ==--;


[ivr-1] ; Welcome 
include => ivr-1-custom
include => from-ivr-directory-Disabled
exten => fax,1,Goto(${CUT(FAX_DEST,^,1)},${CUT(FAX_DEST,^,2)},${CUT(FAX_DEST,^,3)})

exten => s,1,Set(TIMEOUT_LOOPCOUNT=0)
exten => s,n,Set(INVALID_LOOPCOUNT=0)
exten => s,n,Set(_IVR_CONTEXT_${CONTEXT}=${IVR_CONTEXT})
exten => s,n,Set(_IVR_CONTEXT=${CONTEXT})
exten => s,n,Set(__IVR_RETVM=)
exten => s,n,Set(__IVR_ACCEPT_POUND=0)
exten => s,n,GotoIf($["${CHANNEL(state)}" = "Up"]?skip)
exten => s,n,Answer
exten => s,n(skip),Set(IVR_MSG=custom/00_Welcome_Message&custom/01_Language&custom/02_General_Service&custom/03_Meet_Staff&custom/04_Sirkuni&custom/05_Debo&custom/06_ERGA&custom/08_Error_Retry&custom/07_NoInput_Retry&custom/09_AllBusy&custom/10_CallTermination&custom/11_All_Busy&custom/choose_lang&custom/meet_staff&custom/no_input&custom/general_service&custom/srikuni&custom/welcome)
exten => s,n(start),Set(TIMEOUT(digit)=3)
exten => s,n,ExecIf($["${IVR_MSG}" != ""]?Background(${IVR_MSG}))
exten => s,n,WaitExten(10,)

exten => i,1,Set(INVALID_LOOPCOUNT=$[${INVALID_LOOPCOUNT}+1])
exten => i,n,GotoIf($[${INVALID_LOOPCOUNT} > 3]?final)
exten => i,n,Set(IVR_MSG=no-valid-responce-pls-try-again)
exten => i,n,Goto(s,start)
exten => i,n(final),Playback(no-valid-responce-transfering)
exten => i,n,Goto()

exten => t,1,Set(TIMEOUT_LOOPCOUNT=$[${TIMEOUT_LOOPCOUNT}+1])
exten => t,n,GotoIf($[${TIMEOUT_LOOPCOUNT} > 3]?final)
exten => t,n,Set(IVR_MSG=no-valid-responce-pls-try-again)
exten => t,n,Goto(s,start)
exten => t,n(final),Playback(no-valid-responce-transfering)
exten => t,n,Goto()

exten => return,1,Set(_IVR_CONTEXT=${CONTEXT})
exten => return,n,Set(_IVR_CONTEXT_${CONTEXT}=${IVR_CONTEXT_${CONTEXT}})
exten => return,n,Set(IVR_MSG=custom/00_Welcome_Message&custom/01_Language&custom/02_General_Service&custom/03_Meet_Staff&custom/04_Sirkuni&custom/05_Debo&custom/06_ERGA&custom/08_Error_Retry&custom/07_NoInput_Retry&custom/09_AllBusy&custom/10_CallTermination&custom/11_All_Busy&custom/choose_lang&custom/meet_staff&custom/no_input&custom/general_service&custom/srikuni&custom/welcome)
exten => return,n,Goto(s,start)

exten => h,1,Hangup()

exten => hang,1,Playback(vm-goodbye)
exten => hang,n,Hangup()

;--== end of [ivr-1] ==--;


[app-fmf-toggle]
include => app-fmf-toggle-custom
exten => *21,1,Goto(app-fmf-toggle,s,start)

exten => s,1(start),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/followme/ddial)}" = "EXTENSION"]?activate)
exten => s,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/followme/ddial)}" = "DIRECT"]?deactivate:end)
exten => s,n(deactivate),Set(DB(AMPUSER/${AMPUSER}/followme/ddial)=EXTENSION)
exten => s,n,Set(STATE=NOT_INUSE)
exten => s,n,Gosub(app-fmf-toggle,sstate,1())
exten => s,n(hook_off),Playback(followme&de-activated)
exten => s,n(end),Gosub(macro-hangupcall,s,1())
exten => s,n(activate),Set(DB(AMPUSER/${AMPUSER}/followme/ddial)=DIRECT)
exten => s,n,Set(STATE=INUSE)
exten => s,n,Gosub(app-fmf-toggle,sstate,1())
exten => s,n(hook_on),Playback(followme&activated)
exten => s,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICES=${DB(AMPUSER/${AMPUSER}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:FOLLOWME${CUT(DEVICES,&,${ITER})})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

;--== end of [app-fmf-toggle] ==--;


[ext-findmefollow]
include => ext-findmefollow-custom
exten => _*21X!,1,Goto(app-fmf-toggle,*21,1)
exten => _*21X!,hint,Custom:FOLLOWME${EXTEN:3}

exten => 1001,1,GotoIf($[${DB_EXISTS(AMPUSER/${EXTEN}/followme/ddial)} != 1 | "${DB(AMPUSER/${EXTEN}/followme/ddial)}" = "EXTENSION"]?ext-local,${EXTEN},1:followme-check,${EXTEN},1)

exten => _FMX!,1,Goto(followme-check,${EXTEN:2},FMCID)

;--== end of [ext-findmefollow] ==--;


[fmgrps]
include => fmgrps-custom
exten => _RG-1001*.,1+1,Gosub(macro-dial,s,1(${DB(AMPUSER/1001/followme/grptime)},${DIAL_OPTIONS}U(macro-confirm^^^1001),${EXTEN:9}))

exten => _RG-X!,1,Set(CDR_PROP(disable)=true)

;--== end of [fmgrps] ==--;


[followme-check]
include => followme-check-custom
exten => _X!,1(FMCID),Gosub(followme-sub,${EXTEN},1())
exten => _X!,n,Noop(Should never get here)
exten => _X!,n,Hangup()

;--== end of [followme-check] ==--;


[followme-sub]
include => followme-sub-custom
exten => _X!,1,Set(__FMFM=TRUE)
exten => _X!,n,GotoIf($[${LEN(${BLINDTRANSFER})} > 0 | ${LEN(${ATTENDEDTRANSFER})} > 0]?skipclid)
exten => _X!,n,Gosub(macro-user-callerid,s,1())
exten => _X!,n(skipclid),Set(DIAL_OPTIONS=${DIAL_OPTIONS}I)
exten => _X!,n,Set(CONNECTEDLINE(num,i)=${EXTEN})
exten => _X!,n,Gosub(sub-presencestate-display,s,1(${EXTEN}))
exten => _X!,n,Set(CONNECTEDLINE(name)=${DB(AMPUSER/${EXTEN}/cidname)}${PRESENCESTATE_DISPLAY})
exten => _X!,n,Set(FM_DIALSTATUS=${EXTENSION_STATE(${EXTEN}@ext-local)})
exten => _X!,n,Set(__EXTTOCALL=${EXTEN})
exten => _X!,n,Set(__PICKUPMARK=${EXTEN})
exten => _X!,n,Gosub(macro-blkvm-setifempty,s,1())
exten => _X!,n,GotoIf($["${GOSUB_RETVAL}" = "TRUE"]?skipov)
exten => _X!,n,Gosub(macro-blkvm-set,s,1(reset))
exten => _X!,n,Set(__NODEST=)
exten => _X!,n(skipov),Set(RRNODEST=${NODEST})
exten => _X!,n(skipvmblk),Set(__NODEST=${EXTEN})
exten => _X!,n,GosubIf($[${DB_EXISTS(AMPUSER/${EXTEN}/followme/changecid)} = 1 & "${DB(AMPUSER/${EXTEN}/followme/changecid)}" != "default" & "${DB(AMPUSER/${EXTEN}/followme/changecid)}" != ""]?sub-fmsetcid,s,1())
exten => _X!,n,GotoIf($[ "${DB(AMPUSER/${EXTEN}/followme/grppre)}" = "" ]?skipprepend)
exten => _X!,n,Gosub(macro-prepend-cid,s,1(${DB(AMPUSER/${EXTEN}/followme/grppre)}))
exten => _X!,n(skipprepend),Set(RecordMethod=Group)
exten => _X!,n(checkrecord),Gosub(sub-record-check,s,1(exten,${EXTEN},))
exten => _X!,n,GotoIf($[ $["${DB(AMPUSER/${EXTEN}/followme/dring)}" = ""] | $["${ALERT_INFO}"!=""] ]?skipdring)
exten => _X!,n,Set(DRING=${DB(AMPUSER/${EXTEN}/followme/dring)})
exten => _X!,n,Set(__ALERT_INFO=${STRREPLACE(DRING,\;,\\;)})
exten => _X!,n(skipdring),Set(STRATEGY=${DB(AMPUSER/${EXTEN}/followme/strategy)})
exten => _X!,n,Set(__RVOL=${DB(AMPUSER/${EXTEN}/followme/rvolume)})
exten => _X!,n,GotoIf($["${CUT(STRATEGY,-,1)}"="ringallv2"]?skipsimple)
exten => _X!,n,GotoIf($[$[ "${DB(AMPUSER/${EXTEN}/followme/prering)}" = "0" ] | $[ "${DB(AMPUSER/${EXTEN}/followme/prering)}" = "" ]] ?skipsimple)
exten => _X!,n,Gosub(macro-simple-dial,s,1(${EXTEN},${DB(AMPUSER/${EXTEN}/followme/prering)}))
exten => _X!,n(skipsimple),Set(RingGroupMethod=${STRATEGY})
exten => _X!,n,Set(_FMGRP=${EXTEN})
exten => _X!,n,GotoIf($[$["${DB(AMPUSER/${EXTEN}/followme/annmsg)}" = ""] | $["${DIALSTATUS}" = "ANSWER"] | $["foo${RRNODEST}" != "foo"]]?DIALGRP)
exten => _X!,n,Answer
exten => _X!,n,Wait(1)
exten => _X!,n,Playback(${DB(AMPUSER/${EXTEN}/followme/annmsg)})
exten => _X!,n(DIALGRP),ExecIf($[$["${DB(AMPUSER/${EXTEN}/followme/ringing)}"="Ring"] | $["${DB(AMPUSER/${EXTEN}/followme/ringing)}"=""]]?Set(DOPTS=${DIAL_OPTIONS}):Set(DOPTS=m(${DB(AMPUSER/${EXTEN}/followme/ringing)})${STRREPLACE(DIAL_OPTIONS,r)}))
exten => _X!,n,Set(__ALT_CONFIRM_MSG=${IF($["${ALT_CONFIRM_MSG}"!=""]?${ALT_CONFIRM_MSG}:${IF($[${LEN(${VQ_CONFIRMMSG})}>1]?${VQ_CONFIRMMSG}:)})})
exten => _X!,n,GotoIf($[(("${DB(AMPUSER/${EXTEN}/followme/grpconf)}"="ENABLED") | ("${FORCE_CONFIRM}"!="") | ($[${LEN(${VQ_CONFIRMMSG})}>1])) & ("${RG_CONFIRM}" != "1")]?doconfirm)
exten => _X!,n,GotoIf($["${CUT(STRATEGY,-,1)}"="ringallv2"]?ringallv21)
exten => _X!,n,Gosub(macro-dial,s,1(${DB(AMPUSER/${EXTEN}/followme/grptime)},${DOPTS},${DB(AMPUSER/${EXTEN}/followme/grplist)}))
exten => _X!,n,Goto(nextstep)
exten => _X!,n(ringallv21),Gosub(macro-dial,s,1($[ ${DB(AMPUSER/${EXTEN}/followme/grptime)} + ${DB(AMPUSER/${EXTEN}/followme/prering)} ],${DOPTS},${DB(AMPUSER/${EXTEN}/followme/grplist)}))
exten => _X!,n,Goto(nextstep)
exten => _X!,n(doconfirm),GotoIf($["${CUT(STRATEGY,-,1)}"="ringallv2"]?ringallv22)
exten => _X!,n,Gosub(macro-dial-confirm,s,1(${DB(AMPUSER/${EXTEN}/followme/grptime)},${DOPTS},${DB(AMPUSER/${EXTEN}/followme/grplist)},${EXTEN}))
exten => _X!,n,Goto(nextstep)
exten => _X!,n(ringallv22),Gosub(macro-dial-confirm,s,1($[ ${DB(AMPUSER/${EXTEN}/followme/grptime)} + ${DB(AMPUSER/${EXTEN}/followme/prering)} ],${DOPTS},${DB(AMPUSER/${EXTEN}/followme/grplist)},${EXTEN}))
exten => _X!,n(nextstep),Set(RingGroupMethod=)
exten => _X!,n,GotoIf($["foo${RRNODEST}" != "foo"]?nodest)
exten => _X!,n,Set(__NODEST=)
exten => _X!,n,Set(__PICKUPMARK=)
exten => _X!,n,Gosub(macro-blkvm-clr,s,1())
exten => _X!,n,Set(DIALSTATUS=${IF($["${FM_DIALSTATUS}"="NOT_INUSE"&"${DIALSTATUS}"!="CHANUNAVAIL"]?NOANSWER:${IF($["${DIALSTATUS}"="CHANUNAVAIL"|"${FM_DIALSTATUS}"="UNAVAILABLE"|"${FM_DIALSTATUS}"="UNKNOWN"|"${FM_DIALSTATUS}"="INVALID"]?CHANUNAVAIL:BUSY)})})
exten => _X!,n,GotoIf($["${DB(AMPUSER/${EXTEN}/followme/postdest)}"=""]?dohangup)
exten => _X!,n,Goto(${DB(AMPUSER/${EXTEN}/followme/postdest)})
exten => _X!,n(dohangup),Hangup()
exten => _X!,n(nodest),Noop(SKIPPING DEST, CALL CAME FROM Q/RG: ${RRNODEST})
exten => _X!,n,Return()

;--== end of [followme-sub] ==--;


[sub-fmsetcid]
include => sub-fmsetcid-custom
exten => s,1,Goto(s-${DB(AMPUSER/${EXTTOCALL}/followme/changecid)},1)

exten => s-fixed,1,ExecIf($["${REGEX("^[\+]?[0-9]+$" ${DB(AMPUSER/${EXTTOCALL}/followme/fixedcid)})}" = "1"]?Set(__TRUNKCIDOVERRIDE=${DB(AMPUSER/${EXTTOCALL}/followme/fixedcid)}))
exten => s-fixed,n,Return()

exten => s-extern,1,ExecIf($["${REGEX("^[\+]?[0-9]+$" ${DB(AMPUSER/${EXTTOCALL}/followme/fixedcid)})}" == "1" & "${FROM_DID}" != ""]?Set(__TRUNKCIDOVERRIDE=${DB(AMPUSER/${EXTTOCALL}/followme/fixedcid)}))
exten => s-extern,n,Return()

exten => s-did,1,ExecIf($["${REGEX("^[\+]?[0-9]+$" ${FROM_DID})}" = "1"]?Set(__REALCALLERIDNUM=${FROM_DID}))
exten => s-did,n,Return()

exten => s-forcedid,1,ExecIf($["${REGEX("^[\+]?[0-9]+$" ${FROM_DID})}" = "1"]?Set(__TRUNKCIDOVERRIDE=${FROM_DID}))
exten => s-forcedid,n,Return()

exten => _s-.,1,Noop(Unknown value for AMPUSER/${EXTTOCALL}/followme/changecid of ${DB(AMPUSER/${EXTTOCALL}/followme/changecid)} set to "default")
exten => _s-.,n,Set(DB(AMPUSER/${EXTTOCALL}/followme/changecid)=default)
exten => _s-.,n,Return()

;--== end of [sub-fmsetcid] ==--;


[app-hotelwakeup]
include => app-hotelwakeup-custom
exten => *68,1,Gosub(macro-user-callerid,s,1())
exten => *68,n,Answer
exten => *68,n,Wait(1)
exten => *68,n,AGI(agi://127.0.0.1/wakeup)
exten => *68,n,Hangup()

;--== end of [app-hotelwakeup] ==--;


[sub-hr12format]
include => sub-hr12format-custom
exten => s,1,GotoIf($[${DIALPLAN_EXISTS(sub-hr12format,${CHANNEL(language)},1)}]?sub-hr12format,${CHANNEL(language)},1:sub-hr12format,en,1)
exten => s,n,GotoIf($[${DIALPLAN_EXISTS(sub-hr12format,${CHANNEL(language)},1)}]?${CHANNEL(language)},1:en,1)

exten => en,1,Playback(at-tone-time-exactly)
exten => en,n,SayUnixTime(${FutureTime},,IM 'vm-and' S 'seconds' p)
exten => en,n,Return()
exten => en,n,Playback(at-tone-time-exactly)
exten => en,n,SayUnixTime(${FutureTime},,IM 'vm-and' S 'seconds' p)
exten => en,n,Return()

exten => fr,1,Playback(at-tone-time-exactly)
exten => fr,n,SayUnixTime(${FutureTime},,IMSp)
exten => fr,n,Return()
exten => fr,n,Playback(at-tone-time-exactly)
exten => fr,n,SayUnixTime(${FutureTime},,IMSp)
exten => fr,n,Return()

exten => de,1,Playback(at-tone-time-exactly)
exten => de,n,SayUnixTime(${FutureTime},,IMSp)
exten => de,n,Return()
exten => de,n,Playback(at-tone-time-exactly)
exten => de,n,SayUnixTime(${FutureTime},,IMSp)
exten => de,n,Return()

exten => ja,1,Playback(at-tone-time-exactly)
exten => ja,n,SayUnixTime(${FutureTime},,pIMS)
exten => ja,n,Return()
exten => ja,n,Playback(at-tone-time-exactly)
exten => ja,n,SayUnixTime(${FutureTime},,pIMS)
exten => ja,n,Return()

;--== end of [sub-hr12format] ==--;


[app-speakingclock]
include => app-speakingclock-custom
exten => *60,1,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *60,n,Set(CONNECTEDLINE(name,i)=Speaking Clock)
exten => *60,n,Set(CONNECTEDLINE(num,i)=*60)
exten => *60,n,Gosub(macro-user-callerid,s,1())
exten => *60,n,Answer
exten => *60,n,Wait(1)
exten => *60,n,Set(NumLoops=0)
exten => *60,n(start),Set(FutureTime=$[${EPOCH} + 8])
exten => *60,n,Set(FutureTimeMod=$[${FutureTime} % 10])
exten => *60,n,Set(FutureTime=$[${FutureTime} - ${FutureTimeMod} + 10])
exten => *60,n,Gosub(sub-hr12format,s,1())
exten => *60,n(waitloop),Set(TimeLeft=$[${FutureTime} - ${EPOCH}])
exten => *60,n,GotoIf($[${TimeLeft} < 1]?playbeep)
exten => *60,n,Wait(1)
exten => *60,n,Goto(waitloop)
exten => *60,n(playbeep),Playback(beep)
exten => *60,n,Wait(5)
exten => *60,n,Set(NumLoops=$[${NumLoops} + 1])
exten => *60,n,GotoIf($[${NumLoops} < 5]?start)
exten => *60,n,Playback(goodbye)
exten => *60,n,Hangup()

;--== end of [app-speakingclock] ==--;


[sub-hr24format]
include => sub-hr24format-custom
exten => s,1,GotoIf($[${DIALPLAN_EXISTS(sub-hr24format,${CHANNEL(language)},1)}]?${CHANNEL(language)},1:en,1)

exten => en,1,Playback(at-tone-time-exactly)
exten => en,n,SayUnixTime(${FutureTime},,kM 'vm-and' S 'seconds')
exten => en,n,Return()

exten => fr,1,Playback(at-tone-time-exactly)
exten => fr,n,SayUnixTime(${FutureTime},,kMS)
exten => fr,n,Return()

exten => de,1,Playback(at-tone-time-exactly)
exten => de,n,SayUnixTime(${FutureTime},,kMS)
exten => de,n,Return()

exten => ja,1,Playback(at-tone-time-exactly)
exten => ja,n,SayUnixTime(${FutureTime},,kMS)
exten => ja,n,Return()

;--== end of [sub-hr24format] ==--;


[app-speakextennum]
include => app-speakextennum-custom
exten => *65,1,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *65,n,Set(CONNECTEDLINE(name,i)=Speak Extension)
exten => *65,n,Set(CONNECTEDLINE(num,i)=*65)
exten => *65,n,Answer
exten => *65,n,Wait(1)
exten => *65,n,Gosub(macro-user-callerid,s,1())
exten => *65,n,GotoIf($[${DIALPLAN_EXISTS(app-speakextennum,${CHANNEL(language)},1)}]?app-speakextennum,${CHANNEL(language)},1:app-speakextennum,en,1)

exten => en,1,Playback(your)
exten => en,n,Playback(extension)
exten => en,n,Playback(number)
exten => en,n,Playback(is)
exten => en,n,SayDigits(${AMPUSER})
exten => en,n,Wait(2)
exten => en,n,Hangup()

exten => fr,1,Playback(your)
exten => fr,n,Playback(extension)
exten => fr,n,Playback(is2)
exten => fr,n,SayDigits(${AMPUSER})
exten => fr,n,Wait(2)
exten => fr,n,Hangup()

exten => ja,1,Playback(your)
exten => ja,n,Playback(extension)
exten => ja,n,Playback(jp-wa)
exten => ja,n,SayDigits(${AMPUSER})
exten => ja,n,Wait(2)
exten => ja,n,Hangup()

;--== end of [app-speakextennum] ==--;


[app-echo-test]
include => app-echo-test-custom
exten => *43,1,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *43,n,Set(CONNECTEDLINE(name,i)=Echo Test)
exten => *43,n,Set(CONNECTEDLINE(num,i)=*43)
exten => *43,n,Answer
exten => *43,n,Gosub(macro-user-callerid,s,1())
exten => *43,n,Wait(1)
exten => *43,n,Background(demo-echotest,,,app-echo-test-echo)
exten => *43,n,Goto(app-echo-test-echo,1,1)

;--== end of [app-echo-test] ==--;


[app-echo-test-echo]
include => app-echo-test-echo-custom
exten => _[0-9#*],1,Echo()
exten => _[0-9#*],n,Playback(demo-echodone)
exten => _[0-9#*],n,Hangup()

;--== end of [app-echo-test-echo] ==--;


[app-calltrace]
include => app-calltrace-custom
exten => *69,1,Goto(app-calltrace-perform,s,1)

;--== end of [app-calltrace] ==--;


[app-calltrace-perform]
include => app-calltrace-perform-custom
exten => s,1,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => s,n,Set(CONNECTEDLINE(name,i)=Call Trace)
exten => s,n,Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Set(INVALID_LOOPCOUNT=0)
exten => s,n,Playback(info-about-last-call&telephone-number)
exten => s,n,Set(lastcaller=${DB(CALLTRACE/${AMPUSER})})
exten => s,n,GotoIf($[ $[ "${lastcaller}" = "" ] | $[ "${lastcaller}" = "unknown" ] ]?noinfo)
exten => s,n,SayDigits(${lastcaller})
exten => s,n,Set(TIMEOUT(digit)=3)
exten => s,n,Set(TIMEOUT(response)=7)
exten => s,n(repeatoption),Set(INVALID_LOOPCOUNT=$[${INVALID_LOOPCOUNT}+1])
exten => s,n,Read(EXT,to-call-this-number&vm-press&digits/1,1,,0,10)
exten => s,n,GotoIf($["${EXT}" = ""]?i,invalid)
exten => s,n,GotoIf($["${DIALPLAN_EXISTS(app-calltrace-perform,${EXT},1)}" = "0"]?i,invalid:1,dial)
exten => s,n,Goto(fin)
exten => s,n(noinfo),Playback(from-unknown-caller)
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(fin),Noop(Waiting for input)

exten => 1,1(dial),Goto(from-internal,${lastcaller},1)

exten => i,1(invalid),Playback(no-valid-responce-pls-try-again)
exten => i,n,GotoIf($[${INVALID_LOOPCOUNT} < 3 ]?s,repeatoption)
exten => i,n,Playback(vm-goodbye)
exten => i,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-calltrace-perform] ==--;


[app-miscapps]
include => app-miscapps-custom
exten => 909,1,Noop(Running miscapp 1: A welcome entery )
exten => 909,n,Gosub(macro-user-callerid,s,1())
exten => 909,n,Goto(ivr-1,s,1)

;--== end of [app-miscapps] ==--;


[originate-aa]
include => originate-aa-custom
exten => _.X,1,Gosub(macro-blkvm-set,s,1())
exten => _.X,n,Gosub(app-paging,ssetup,1())
exten => _.X,n,Gosub(macro-autoanswer,s,1(${EXTEN}))
exten => _.X,n,Gosub(autoanswer,s,1(${ALERTINFO},${CALLINFO}))
exten => _.X,n,Goto(from-internal,${EXTEN},1)

;--== end of [originate-aa] ==--;


[ext-intercom]
include => ext-intercom-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(ext-intercom,${CHANNEL(language)})}]?ext-intercom,${CHANNEL(language)},${ARG1}():ext-intercom,en,${ARG1}())
exten => lang-playback,n,Return()

exten => _*80.,1,Gosub(macro-user-callerid,s,1())
exten => _*80.,n,Set(dialnumber=${EXTEN:3})
exten => _*80.,n,Set(INTERCOM_CALL=TRUE)
exten => _*80.,n,Gosub(sub-record-check,s,1(exten,${dialnumber}))
exten => _*80.,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/intercom/block)}" = "blocked"]?end)
exten => _*80.,n,GotoIf($["${DB(DND/${dialnumber})}" = "YES"]?end)
exten => _*80.,n,GotoIf($["${DB(AMPUSER/${dialnumber}/intercom/${AMPUSER})}" = "allow" ]?allow)
exten => _*80.,n,GotoIf($["${DB(AMPUSER/${dialnumber}/intercom/${AMPUSER})}" = "deny" ]?nointercom)
exten => _*80.,n,GotoIf($["${DB(AMPUSER/${dialnumber}/intercom)}" = "disabled" ]?nointercom)
exten => _*80.,n(allow),Set(DEVICES=${DB(AMPUSER/${dialnumber}/device)})
exten => _*80.,n,GotoIf($["${DEVICES}" = "" ]?end)
exten => _*80.,n,Set(OVERRIDE=${DB(AMPUSER/${dialnumber}/intercom/override)})
exten => _*80.,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => _*80.,n,Set(_SIPURI=)
exten => _*80.,n,Set(_ALERTINFO=Ring Answer)
exten => _*80.,n,Set(_CALLINFO=<uri>\;answer-after=0)
exten => _*80.,n,Set(_SIPURI=intercom=true)
exten => _*80.,n,Set(_DTIME=5)
exten => _*80.,n,Set(_ANSWERMACRO=)
exten => _*80.,n,GotoIf($[${LOOPCNT} > 1 ]?pagemode)
exten => _*80.,n,Gosub(macro-autoanswer,s,1(${DEVICES}))
exten => _*80.,n,Set(_DOPTIONS=A(beep)b(autoanswer^s^1(${ALERTINFO},${CALLINFO})))
exten => _*80.,n(check),ChanIsAvail(${DEVICE},s)
exten => _*80.,n,ExecIf($["${AVAILSTATUS}" = "6"]?Set(AVAILORIGCHAN=${DEVICE}))
exten => _*80.,n,GotoIf($["${AVAILORIGCHAN}" != ""]?continue)
exten => _*80.,n,ExecIf($["${OVERRIDE}" = ""]?Set(OVERRIDE=reject))
exten => _*80.,n,GotoIf($["${OVERRIDE}" = "reject"]?end)
exten => _*80.,n,Set(DTIME=30)
exten => _*80.,n,ExecIf($["${OVERRIDE}" = "ring"]?Set(DOPTIONS=A(beep)))
exten => _*80.,n(continue),Noop(Continuing with page)
exten => _*80.,n,GotoIf($["${DB(AMPUSER/${EXTEN:3}/cidname)}" = ""]?godial)
exten => _*80.,n,Set(CONNECTEDLINE(name,i)=${DB(AMPUSER/${EXTEN:3}/cidname)})
exten => _*80.,n,Set(CONNECTEDLINE(num)=${EXTEN:3})
exten => _*80.,n(godial),Dial(${DIAL},${DTIME},I${DOPTIONS}${INTERCOM_EXT_DOPTIONS})
exten => _*80.,n(end),ExecIf($[${INTERCOM_RETURN}]?Return())
exten => _*80.,n,Busy(20)
exten => _*80.,n,Gosub(macro-hangupcall,s,1())
exten => _*80.,n(pagemode),Set(ITER=1)
exten => _*80.,n,Set(DIALSTR=)
exten => _*80.,n(begin),ChanIsAvail(${DB(DEVICE/${CUT(DEVICES,&,${ITER})}/dial)},s)
exten => _*80.,n,GotoIf($["${AVAILORIGCHAN}" = ""]?skip)
exten => _*80.,n,Set(DIALSTR=${DIALSTR}-${CUT(DEVICES,&,${ITER})})
exten => _*80.,n(skip),Set(ITER=$[${ITER} + 1])
exten => _*80.,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => _*80.,n,Set(DIALSTR=${DIALSTR:1})
exten => _*80.,n,GotoIf($["${DIALSTR}" = ""]?checkpageoption)
exten => _*80.,n,Set(_AMPUSER=${AMPUSER})
exten => _*80.,n,Gosub(page,1(${DIALSTR}))
exten => _*80.,n(checkpageoption),Noop(Intercom option ${OVERRIDE})
exten => _*80.,n,GotoIf($["${OVERRIDE}" = "reject"]?end2)
exten => _*80.,n,Gosub(dialall,1(${DIALSTR}))
exten => _*80.,n(end2),ExecIf($[${INTERCOM_RETURN}]?Return())
exten => _*80.,n,Busy(20)
exten => _*80.,n,Gosub(macro-hangupcall,s,1())
exten => _*80.,n(nointercom),Noop(Intercom disallowed by ${dialnumber})
exten => _*80.,n,ExecIf($[${INTERCOM_RETURN}]?Return())
exten => _*80.,n,Gosub(ext-intercom,lang-playback,1(hook_0))
exten => _*80.,n,Congestion(20)

exten => page,1,Set(PAGE_CONF=${EPOCH}${RAND(100,999)})
exten => page,n,Set(PAGEMODE=PAGE)
exten => page,n,Set(PAGE_MEMBERS=${ARG1})
exten => page,n,Set(PAGE_CONF_OPTS=duplex)
exten => page,n,AGI(agi://127.0.0.1/page.agi)
exten => page,n,Set(CONFBRIDGE(user,template)=page_user_duplex)
exten => page,n,Set(CONFBRIDGE(user,admin)=yes)
exten => page,n,Set(CONFBRIDGE(user,marked)=yes)
exten => page,n,ConfBridge(${PAGE_CONF},,,admin_menu)
exten => page,n,Hangup()

exten => dialall,1,GotoIf($[${LOOPCNT} > 1 ]?preparedialst)
exten => dialall,n(preparedialst),Set(ITER=1)
exten => dialall,n,Set(DIALSTR=)
exten => dialall,n(begin1),Set(DIALSTR=${DIALSTR}&${DB(DEVICE/${CUT(DEVICES,&,${ITER})}/dial)})
exten => dialall,n,Set(ITER=$[${ITER} + 1])
exten => dialall,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin1)
exten => dialall,n,Set(DIALSTR=${DIALSTR:1})
exten => dialall,n,Noop(Dial statring  ${DIALSTR})
exten => dialall,n,GotoIf($["${OVERRIDE}" = "ring"]?dialnow)
exten => dialall,n,Set(_DOPTIONS=A(beep)b(autoanswer^s^1(${ALERTINFO},${CALLINFO})))
exten => dialall,n(dialnow),Dial(${DIALSTR},${DTIME},I${DOPTIONS}${INTERCOM_EXT_DOPTIONS})
exten => dialall,n,Hangup()

exten => en,1(hook_0),Playback(intercom&for&extension)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Playback(is&disabled)
exten => en,n,Return()

exten => ja,1(hook_0),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(jp-no&intercom&jp-wa&disabled-2)
exten => ja,n,Return()

;--== end of [ext-intercom] ==--;


[ext-intercom-users]
include => ext-intercom-users-custom
exten => _*80XXXX,1,Goto(ext-intercom,${EXTEN},1)

exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(ext-intercom-users,${CHANNEL(language)})}]?ext-intercom-users,${CHANNEL(language)},${ARG1}():ext-intercom-users,en,${ARG1}())
exten => lang-playback,n,Return()

exten => *54,1,Gosub(macro-user-callerid,s,1())
exten => *54,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *54,n,Set(CONNECTEDLINE(name,i)=Intercom: Enabled)
exten => *54,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => *54,n,Answer
exten => *54,n,Wait(1)
exten => *54,n,Set(DB(AMPUSER/${AMPUSER}/intercom)=enabled)
exten => *54,n,Playback(intercom&enabled)
exten => *54,n,Gosub(macro-hangupcall,s,1())

exten => _*54.,1,Gosub(macro-user-callerid,s,1())
exten => _*54.,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => _*54.,n,Set(CONNECTEDLINE(name,i)=Intercom from ${EXTEN:3}: Enabled)
exten => _*54.,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => _*54.,n,Set(dialnumber=${EVAL(${EXTEN:3})})
exten => _*54.,n,Answer
exten => _*54.,n,Wait(1)
exten => _*54.,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})}" = "allow" ]}?unset)
exten => _*54.,n,GotoIf($[${DB_EXISTS(AMPUSER/${EXTEN:3}/device)} != 1]?invaliduser)
exten => _*54.,n,Set(DB(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})=allow)
exten => _*54.,n,Gosub(ext-intercom-users,lang-playback,1(hook_1))
exten => _*54.,n,Gosub(macro-hangupcall,s,1())
exten => _*54.,n(unset),dbDeltree(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})
exten => _*54.,n,Gosub(ext-intercom-users,lang-playback,1(hook_2))
exten => _*54.,n,Gosub(macro-hangupcall,s,1())
exten => _*54.,n(invaliduser),Gosub(ext-intercom-users,lang-playback,1(hook_3))
exten => _*54.,n,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_1),Playback(intercom&from&extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Playback(enabled)
exten => en,n,Return()
exten => en,n(hook_2),Playback(intercom&enabled&cancelled&for&extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Return()
exten => en,n(hook_3),Playback(extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Playback(invalid)
exten => en,n,Return()
exten => en,n(hook_4),Playback(intercom&from&extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Playback(disabled)
exten => en,n,Return()
exten => en,n(hook_5),Playback(intercom&disabled&cancelled&for&extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Return()
exten => en,n(hook_6),Playback(extension&number)
exten => en,n,SayDigits(${dialnumber})
exten => en,n,Playback(invalid)
exten => en,n,Return()

exten => ja,1(hook_1),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(jp-kara&jp-no&intercom&jp-wo&allow)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(jp-kara&jp-no&intercom&setting&jp-wo&cancelled)
exten => ja,n,Return()
exten => ja,n(hook_3),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(invalid)
exten => ja,n,Return()
exten => ja,n(hook_4),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(jp-kara&jp-no&intercom&jp-wo&deny)
exten => ja,n,Return()
exten => ja,n(hook_5),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(jp-kara&jp-no&intercom&setting&jp-wo&cancelled)
exten => ja,n,Return()
exten => ja,n(hook_6),Playback(extension)
exten => ja,n,SayDigits(${dialnumber})
exten => ja,n,Playback(invalid)
exten => ja,n,Return()

exten => *55,1,Gosub(macro-user-callerid,s,1())
exten => *55,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *55,n,Set(CONNECTEDLINE(name,i)=Intercom: Disabled)
exten => *55,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => *55,n,Answer
exten => *55,n,Wait(1)
exten => *55,n,Set(DB(AMPUSER/${AMPUSER}/intercom)=disabled)
exten => *55,n,Playback(intercom&disabled)
exten => *55,n,Gosub(macro-hangupcall,s,1())

exten => _*55.,1,Gosub(macro-user-callerid,s,1())
exten => _*55.,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => _*55.,n,Set(CONNECTEDLINE(name,i)=Intercom from ${EXTEN:3}: Disabled)
exten => _*55.,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => _*55.,n,Set(dialnumber=${EVAL(${EXTEN:3})})
exten => _*55.,n,Answer
exten => _*55.,n,Wait(1)
exten => _*55.,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})}" = "deny" ]}?unset2)
exten => _*55.,n,GotoIf($[${DB_EXISTS(AMPUSER/${EXTEN:3}/device)} != 1]?invaliduser2)
exten => _*55.,n,Set(DB(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})=deny)
exten => _*55.,n,Gosub(ext-intercom-users,lang-playback,1(hook_4))
exten => _*55.,n,Gosub(macro-hangupcall,s,1())
exten => _*55.,n(unset2),dbDeltree(AMPUSER/${AMPUSER}/intercom/${EXTEN:3})
exten => _*55.,n,Gosub(ext-intercom-users,lang-playback,1(hook_5))
exten => _*55.,n,Gosub(macro-hangupcall,s,1())
exten => _*55.,n(invaliduser2),Gosub(ext-intercom-users,lang-playback,1(hook_6))
exten => _*55.,n,Gosub(macro-hangupcall,s,1())

;--== end of [ext-intercom-users] ==--;


[macro-autoanswer]
include => macro-autoanswer-custom
exten => s,1,GotoIf($["${KNOWNDIAL}" != ""]?knowndial)
exten => s,n,Set(DEVICE=${DB(DEVICE/${ARG1}/dial)})
exten => s,n,GotoIf($["${DEVICE:0:5}" == "PJSIP" ]?dopjsip)
exten => s,n,Set(KNOWNDIAL=${DEVICE})
exten => s,n,Goto(knowndial)
exten => s,n(dopjsip),Set(KNOWNDIAL=${PJSIP_DIAL_CONTACTS(${ARG1})})
exten => s,n,GotoIf($[${REGEX("&" ${KNOWNDIAL})} == 0]?knowndial)
exten => s,n,Gosub(app-paging,ssetup,1())
exten => s,n,Set(PAGEMODE=PAGE)
exten => s,n,Set(PAGE_CONF_OPTS=duplex)
exten => s,n,Set(STREAM=NONE)
exten => s,n,Set(PAGE_MEMBERS=${ARG1})
exten => s,n,AGI(agi://127.0.0.1/page.agi)
exten => s,n,Set(CONFBRIDGE(user,template)=page_user_duplex)
exten => s,n,Set(CONFBRIDGE(user,admin)=yes)
exten => s,n,Set(CONFBRIDGE(user,marked)=yes)
exten => s,n,ConfBridge(${PAGE_CONF},,,admin_menu)
exten => s,n,Hangup()
exten => s,n(knowndial),Set(DIAL=${KNOWNDIAL})
exten => s,n,GotoIf($["${DB(DEVICE/${ARG1}/autoanswer/macro)}" != "" ]?macro)
exten => s,n,GotoIf($["${DIAL:0:5}" = "PJSIP"]?pjsipua)
exten => s,n,Set(USERAGENT=${SIPPEER(${CUT(DIAL,/,2)},useragent)})
exten => s,n,Goto(uafin)
exten => s,n(pjsipua),Set(AOR=${CUT(DIAL,/,2)})
exten => s,n,Set(CONTACT=${PJSIP_AOR(${AOR},contact)})
exten => s,n,Set(USERAGENT=${PJSIP_CONTACT(${CONTACT},user_agent)})
exten => s,n(uafin),ExecIf($["${KNOWNAGENT}" != ""]?Set(USERAGENT=${KNOWNAGENT}))
exten => s,n,ExecIf($["${LEN(${PVOL})}" != "0"]?Set(PAGE_VOL=\;volume=${PVOL}))
exten => s,n,ExecIf($["${USERAGENT:0:6}" = "Digium"]?Set(ALERTINFO=ring-answer))
exten => s,n,ExecIf($["${USERAGENT:0:5}" = "Mitel"]?Set(CALLINFO=<sip:broadworks.net>\;answer-after=0))
exten => s,n,ExecIf($["${USERAGENT:0:9}" = "OpenStage"]?Set(ALERTINFO=<http://example.com>\;info=alert-autoanswer))
exten => s,n,ExecIf($["${USERAGENT:0:9}" = "Panasonic"]?Set(ALERTINFO=Intercom))
exten => s,n,ExecIf($["${USERAGENT:0:7}" = "Polycom"]?Set(ALERTINFO=info=Auto Answer))
exten => s,n,ExecIf($["${USERAGENT:0:23}" = "Sangoma macOS Softphone"]?Set(ALERTINFO=Direct-Intercom))
exten => s,n,ExecIf($["${USERAGENT:0:9}" = "Sangoma P"]?Set(ALERTINFO=ring-answer))
exten => s,n,ExecIf($["${USERAGENT:0:9}" = "Sangoma S"]?Set(ALERTINFO=<http://www.sangoma.com>\;info=external${PAGE_VOL}))
exten => s,n,ExecIf($["${USERAGENT:0:25}" = "Sangoma Windows Softphone"]?Set(ALERTINFO=Direct-Intercom))
exten => s,n,ExecIf($["${SIPURI}" != ""]?Set(__SIP_URI_OPTIONS=${SIPURI}))
exten => s,n,Return()
exten => s,n+2(macro),Gosub(macro-${DB(DEVICE/${ARG1}/autoanswer/macro)},s,1(${ARG1}))

;--== end of [macro-autoanswer] ==--;


[autoanswer]
include => autoanswer-custom
exten => s,1,GosubIf($["${ARG1}" != ""]?func-set-sipheader,s,1(Alert-Info,${ARG1}))
exten => s,n,GosubIf($["${ARG2}" != ""]?func-set-sipheader,s,1(Call-Info,${ARG2}))
exten => s,n,Gosub(func-apply-sipheaders,s,1())
exten => s,n,Return()

;--== end of [autoanswer] ==--;


[app-paging]
include => app-paging-custom
exten => ssetup,1,Set(_SIPURI=)
exten => ssetup,n,Set(_ALERTINFO=Ring Answer)
exten => ssetup,n,Set(_CALLINFO=<uri>\;answer-after=0)
exten => ssetup,n,Set(_SIPURI=intercom=true)
exten => ssetup,n,Set(_DTIME=5)
exten => ssetup,n,Set(_ANSWERMACRO=)
exten => ssetup,n,Set(PAGE_CONF=${EPOCH}${RAND(100,999)})
exten => ssetup,n,Return()

exten => _PAGE.,1(SKIPCHECK),Gosub(macro-autoanswer,s,1(${EXTEN:4}))
exten => _PAGE.,n,Noop(${EXTRINGTIME})
exten => _PAGE.,n,GotoIf($["${EXTRINGTIME}" != "true"]?doptions)
exten => _PAGE.,n,Set(_DTIME=${RINGTIMER_DEFAULT})
exten => _PAGE.,n,ExecIf($["${DB(AMPUSER/${EXTEN:4}/ringtimer)}" != "" & ${DB(AMPUSER/${EXTEN:4}/ringtimer)} > 0]?Set(_DTIME=${DB(AMPUSER/${EXTEN:4}/ringtimer)}))
exten => _PAGE.,n(doptions),ExecIf($["${DOPTIONS}" = ""]?Set(_DOPTIONS=b(autoanswer^s^1(${ALERTINFO},${CALLINFO}))))
exten => _PAGE.,n,Dial(${DIAL},${DTIME},A(${ANNOUNCEMENT})${DOPTIONS})
exten => _PAGE.,n(skipself),Hangup()

exten => _SPAGE.,1(chanspy),ChanSpy(${SP_DEVICE}-,qW)
exten => _SPAGE.,n,Hangup()

;--== end of [app-paging] ==--;


[app-page-stream]
include => app-page-stream-custom
exten => s,1,Wait(1)
exten => s,n,Answer
exten => s,n,Set(CHANNEL(language)=${SIPLANG})
exten => s,n,Set(CONFBRIDGE(user,template)=page_user_duplex)
exten => s,n,Set(CONFBRIDGE(user,marked)=yes)
exten => s,n,ExecIf($["${PAGE_USER_TYPE}" = "ADMIN_MUTED"]?Set(CONFBRIDGE(user,startmuted)=yes))
exten => s,n,ExecIf($["${PAGE_USER_TYPE}" = "ADMIN_MUTED"]?Set(CONFBRIDGE(user,marked)=yes))
exten => s,n,ConfBridge(${PAGE_CONF},,,)
exten => s,n,Hangup()

;--== end of [app-page-stream] ==--;


[macro-parked-call]
include => macro-parked-call-custom
exten => s,1,Gosub(macro-user-callerid,s,1())
exten => s,n,Gosub(sub-record-check,s,1(parking,${AMPUSER},${AMPUSER}))
exten => s,n,Noop(PARKRETURNTO: ${SHARED(PARKRETURNTO,${CHANNEL})})
exten => s,n,GotoIf($[${LEN(${SHARED(PARKRETURNTO,${CHANNEL})})} > 0]?backtosender)
exten => s,n,GotoIf($[${LEN(${BLINDTRANSFER})} > 0 | ${LEN(${ATTENDEDTRANSFER})} > 0]?attemptpark)
exten => s,n,Set(PARKIE=${PARK_GET_CHANNEL(${ARG1},${ARG2})})
exten => s,n,Set(MIXMON_DIR=${IMPORT(${PARKIE},MIXMON_DIR)})
exten => s,n,Set(YEAR=${IMPORT(${PARKIE},YEAR)})
exten => s,n,Set(MONTH=${IMPORT(${PARKIE},MONTH)})
exten => s,n,Set(DAY=${IMPORT(${PARKIE},DAY)})
exten => s,n,Set(CALLFILENAME=${IMPORT(${PARKIE},CALLFILENAME)})
exten => s,n,Set(MIXMON_FORMAT=${IMPORT(${PARKIE},MIXMON_FORMAT)})
exten => s,n,Set(MIXMON_POST=${IMPORT(${PARKIE},MIXMON_POST)})
exten => s,n,Set(MON_FMT=${IMPORT(${PARKIE},MON_FMT)})
exten => s,n,Set(MIXMON_ID=${IMPORT(${PARKIE},MIXMON_ID)})
exten => s,n,Set(REC_STATUS=${IMPORT(${PARKIE},REC_STATUS)})
exten => s,n,Set(REC_POLICY_MODE=${IMPORT(${PARKIE},REC_POLICY_MODE)})
exten => s,n,Set(RECORD_ID=${IMPORT(${PARKIE},RECORD_ID)})
exten => s,n,GotoIf($["${REC_STATUS}" != "RECORDING"]?next)
exten => s,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => s,n(next),Set(CCSS_SETUP=TRUE)
exten => s,n,GotoIf($["${PARKIE}" != ""]?pcall)
exten => s,n,ResetCDR()
exten => s,n,Set(CDR_PROP(disable)=true)
exten => s,n,Wait(1)
exten => s,n,Playback(pbx-invalidpark)
exten => s,n,Wait(1)
exten => s,n,Hangup()
exten => s,n(pcall),Noop(User: ${CALLERID(all)} attempting to pick up Parked Call Slot ${ARG1})
exten => s,n,Noop(PARKIE: ${PARKIE})
exten => s,n,Set(SHARED(PARKRETURNTO,${PARKIE})=)
exten => s,n,Set(PARKOWNER=1)
exten => s,n,ParkedCall(${ARG2},${ARG1})
exten => s,n,Hangup()
exten => s,n(attemptpark),Noop(User: ${CALLERID(all)} attempting to Park into slot ${ARG1})
exten => s,n,Noop(Blind Transfer: ${BLINDTRANSFER}, Attended Transfer: ${ATTENDEDTRANSFER})
exten => s,n,Noop($[${LEN(${PARKOWNER})} = 0])
exten => s,n,GotoIf($[${LEN(${PARKOWNER})} = 0]?parkit)
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(parkit),Set(PARKINGEXTEN=${ARG1})
exten => s,n,ExecIf($[${LEN(${BLINDTRANSFER})} > 0]?Set(SHARED(PARKRETURNTO,${CHANNEL})=${CUT(BLINDTRANSFER,-,1)}):Set(SHARED(PARKRETURNTO,${CHANNEL})=${CUT(ATTENDEDTRANSFER,-,1)}))
exten => s,n,Noop(PARKRETURNTO: ${SHARED(PARKRETURNTO,${CHANNEL})})
exten => s,n,Park(${ARG2},sc(${CONTEXT},s,200))
exten => s,1+199(backtosender),Noop(Attempting to go back to sender)
exten => s,n,Set(PARKCALLBACK=${PARKER})
exten => s,n,Set(SHARED(PARKRETURNTO,${CHANNEL})=)
exten => s,n,Goto(park-return-routing,${PARKING_SPACE},1)

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [macro-parked-call] ==--;


[parkedcallstimeout]
include => parkedcallstimeout-custom
exten => _[0-9a-zA-Z*#].,1,Set(PARKCALLBACK=${REPLACE(EXTEN,_,/)})
exten => _[0-9a-zA-Z*#].,n,GotoIf($["${REC_STATUS}" != "RECORDING"]?next)
exten => _[0-9a-zA-Z*#].,n,MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MIXMON_FORMAT},a,${MIXMON_POST})
exten => _[0-9a-zA-Z*#].,n(next),Goto(park-return-routing,${PARKING_SPACE},1)

;--== end of [parkedcallstimeout] ==--;


[park-dial]
include => park-dial-custom
exten => t,1,Noop(WARNING: PARKRETURN to: [${EXTEN}] failed with: [${DIALSTATUS}]. Trying Alternate Dest On Parking Lot ${PARKING_SPACE})
exten => t,n,Goto(park-orphan-routing,70,1)

exten => _[0-9a-zA-Z*#].,1,Noop(WARNING: PARKRETURN to: [${EXTEN}] failed with: [${DIALSTATUS}]. Trying Alternate Dest On Parking Lot ${PARKING_SPACE})
exten => _[0-9a-zA-Z*#].,n,Goto(park-orphan-routing,70,1)

;--== end of [park-dial] ==--;


[park-orphan-routing]
include => park-orphan-routing-custom
exten => 70,1,Goto(app-blackhole,hangup,1)

;--== end of [park-orphan-routing] ==--;


[park-return-routing]
include => park-return-routing-custom
exten => 70,1,Set(PLOT=70)
exten => 70,n,ExecIf($["${ALERT_INFO}"!=""]?Set(HASH(__SIPHEADERS,Alert-Info)=${ALERT_INFO}))
exten => 70,n,ExecIf($["${RVOL}"!=""]?Set(HASH(__SIPHEADERS,Alert-Info)=${ALERT_INFO}\;volume=${RVOL}))
exten => 70,n,GotoIf($["${PARKCALLBACK:0:5}"!="PJSIP"]?dial)
exten => 70,n,Noop(Debug: Found PJSIP Destination ${PARKCALLBACK}, updating with PJSIP_DIAL_CONTACTS from ${PARKER:6})
exten => 70,n,Set(PARKCALLBACK=${PJSIP_DIAL_CONTACTS(${PARKER:6})})
exten => 70,n(dial),Dial(${PARKCALLBACK},15,b(func-apply-sipheaders^s^1),tr)
exten => 70,n,Set(PARKCALLBACK=)
exten => 70,n,Goto(app-blackhole,hangup,1)

exten => 71,1,Goto(70,1)

exten => 72,1,Goto(70,1)

exten => 73,1,Goto(70,1)

exten => 74,1,Goto(70,1)

exten => 75,1,Goto(70,1)

exten => 76,1,Goto(70,1)

exten => 77,1,Goto(70,1)

exten => 78,1,Goto(70,1)

;--== end of [park-return-routing] ==--;


[park-hints]
include => park-hints-custom
include => parkedcalls ; Default Lot
exten => 71,1,Gosub(macro-parked-call,s,1(71,default))
exten => 71,hint,park:71@parkedcalls

exten => *8571,1,Set(FORCEPICKUP=default)
exten => *8571,n,Gosub(macro-parked-call,s,1(71,default))
exten => *8571,hint,park:71@parkedcalls

exten => 72,1,Gosub(macro-parked-call,s,1(72,default))
exten => 72,hint,park:72@parkedcalls

exten => *8572,1,Set(FORCEPICKUP=default)
exten => *8572,n,Gosub(macro-parked-call,s,1(72,default))
exten => *8572,hint,park:72@parkedcalls

exten => 73,1,Gosub(macro-parked-call,s,1(73,default))
exten => 73,hint,park:73@parkedcalls

exten => *8573,1,Set(FORCEPICKUP=default)
exten => *8573,n,Gosub(macro-parked-call,s,1(73,default))
exten => *8573,hint,park:73@parkedcalls

exten => 74,1,Gosub(macro-parked-call,s,1(74,default))
exten => 74,hint,park:74@parkedcalls

exten => *8574,1,Set(FORCEPICKUP=default)
exten => *8574,n,Gosub(macro-parked-call,s,1(74,default))
exten => *8574,hint,park:74@parkedcalls

exten => 75,1,Gosub(macro-parked-call,s,1(75,default))
exten => 75,hint,park:75@parkedcalls

exten => *8575,1,Set(FORCEPICKUP=default)
exten => *8575,n,Gosub(macro-parked-call,s,1(75,default))
exten => *8575,hint,park:75@parkedcalls

exten => 76,1,Gosub(macro-parked-call,s,1(76,default))
exten => 76,hint,park:76@parkedcalls

exten => *8576,1,Set(FORCEPICKUP=default)
exten => *8576,n,Gosub(macro-parked-call,s,1(76,default))
exten => *8576,hint,park:76@parkedcalls

exten => 77,1,Gosub(macro-parked-call,s,1(77,default))
exten => 77,hint,park:77@parkedcalls

exten => *8577,1,Set(FORCEPICKUP=default)
exten => *8577,n,Gosub(macro-parked-call,s,1(77,default))
exten => *8577,hint,park:77@parkedcalls

exten => 78,1,Gosub(macro-parked-call,s,1(78,default))
exten => 78,hint,park:78@parkedcalls

exten => *8578,1,Set(FORCEPICKUP=default)
exten => *8578,n,Gosub(macro-parked-call,s,1(78,default))
exten => *8578,hint,park:78@parkedcalls

exten => 70,hint,park:71@parkedcalls&park:72@parkedcalls&park:73@parkedcalls&park:74@parkedcalls&park:75@parkedcalls&park:76@parkedcalls&park:77@parkedcalls&park:78@parkedcalls
;--== end of [park-hints] ==--;


[app-queue-toggle]
include => app-queue-toggle-custom
exten => s,1(start),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Set(QUEUEUSER=${IF($[${LEN(${QUEUEUSER})}>0]?${QUEUEUSER}:${AMPUSER})})
exten => s,n,Set(QUEUESTAT=LOGGEDOUT)
exten => s,n,AGI(agi://127.0.0.1/queue_devstate.agi,getqueues,${QUEUEUSER})
exten => s,n,GotoIf($["${QUEUESTAT}" = "LOGGEDOUT"]?activate)
exten => s,n,GotoIf($["${QUEUESTAT}" = "LOGGEDIN"]?deactivate)
exten => s,n,GotoIf($["${QUEUESTAT}" = "STATIC"]?static:end)
exten => s,n(deactivate),Noop(Agent Logged out)
exten => s,n,Gosub(macro-toggle-del-agent,s,1())
exten => s,n(logout),Set(STATE=NOT_INUSE)
exten => s,n,Gosub(sstate,1())
exten => s,n,Playback(agent-loggedoff)
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(activate),Noop(Agent Logged In)
exten => s,n,Gosub(macro-toggle-add-agent,s,1())
exten => s,n,GotoIf($["${QAGENT_UNAUTHORIZED}"="1"]?logout)
exten => s,n,Set(STATE=INUSE)
exten => s,n,Gosub(sstate,1())
exten => s,n,Playback(agent-loginok)
exten => s,n,SayDigits(${QUEUEUSER})
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(static),Noop(User is a Static Agent)
exten => s,n,Set(STATE=INUSE)
exten => s,n,Gosub(sstate,1())
exten => s,n,Playback(agent-loginok)
exten => s,n,Gosub(macro-hangupcall,s,1())

exten => sstate,1,Set(DEVICES=${DB(AMPUSER/${QUEUEUSER}/device)})
exten => sstate,n,GotoIf($["${DEVICES}" = "" ]?return)
exten => sstate,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => sstate,n,Set(ITER=1)
exten => sstate,n(begin),Set(DEVICE_STATE(Custom:QUEUE${CUT(DEVICES,&,${ITER})}*${QUEUENO})=${STATE})
exten => sstate,n,Set(ITER=$[${ITER} + 1])
exten => sstate,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin)
exten => sstate,n(return),Return()

;--== end of [app-queue-toggle] ==--;


[app-all-queue-toggle]
include => app-all-queue-toggle-custom
exten => s,1(start),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,AGI(agi://127.0.0.1/queue_devstate.agi,getall,${AMPUSER})
exten => s,n,GotoIf($["${QUEUESTAT}" = "NOQUEUES"]?skip)
exten => s,n,Set(TOGGLE_MACRO=${IF($["${QUEUESTAT}"="LOGGEDOUT"]?toggle-add-agent:toggle-del-agent)})
exten => s,n,Set(STATE=${IF($["${QUEUESTAT}"="LOGGEDOUT"]?INUSE:NOT_INUSE)})
exten => s,n,Set(LOOPCNTALL=${FIELDQTY(USERQUEUES,-)})
exten => s,n,Set(ITERALL=1)
exten => s,n(begin),Set(QUEUENO=${CUT(USERQUEUES,-,${ITERALL})})
exten => s,n,Set(ITERALL=$[${ITERALL}+1])
exten => s,n,Gosub(macro-${TOGGLE_MACRO},s,1())
exten => s,n,Gosub(app-queue-toggle,sstate,1())
exten => s,n,GotoIf($[${ITERALL} <= ${LOOPCNTALL}]?begin)
exten => s,n(skip),ExecIf($["${QUEUESTAT}"="LOGGEDIN" | "${QUEUESTAT}"="NOQUEUES"]?Playback(agent-loggedoff))
exten => s,n,ExecIf($["${QUEUESTAT}"="LOGGEDOUT"]?Playback(agent-loginok))
exten => s,n,ExecIf($["${QUEUESTAT}"="LOGGEDOUT"]?SayDigits(${AMPUSER}))
exten => s,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-all-queue-toggle] ==--;


[macro-toggle-del-agent]
include => macro-toggle-del-agent-custom
exten => s,1,Gosub(macro-user-callerid,s,1(SKIPTTL))
exten => s,n,Set(QUEUEUSER=${IF($[${LEN(${QUEUEUSER})}>0]?${QUEUEUSER}:${AMPUSER})})
exten => s,n,Set(QUEUEUSERCIDNAME="${DB(AMPUSER/${QUEUEUSER}/cidname)}")
exten => s,n,RemoveQueueMember(${QUEUENO},Local/${QUEUEUSER}@from-queue/n)
exten => s,n,RemoveQueueMember(${QUEUENO},Local/${QUEUEUSER}@from-internal/n)
exten => s,n,UserEvent(RefreshQueue)
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-toggle-del-agent] ==--;


[macro-toggle-add-agent]
include => macro-toggle-add-agent-custom
exten => s,1,Gosub(macro-user-callerid,s,1(SKIPTTL))
exten => s,n,Set(QUEUEUSER=${IF($[${LEN(${QUEUEUSER})}>0]?${QUEUEUSER}:${AMPUSER})})
exten => s,n,Set(QUEUEUSERCIDNAME="${DB(AMPUSER/${QUEUEUSER}/cidname)}")
exten => s,n,GotoIf($["${DB(QPENALTY/${QUEUENO}/dynmemberonly)}" = "yes" & ${DB_EXISTS(QPENALTY/${QUEUENO}/agents/${QUEUEUSER})} != 1]?invalid)
exten => s,n,ExecIf($["${DB(AMPUSER/${QUEUEUSER}/queues/qnostate)}" != "ignorestate"]?AddQueueMember(${QUEUENO},Local/${QUEUEUSER}@from-queue/n,${DB(QPENALTY/${QUEUENO}/agents/${QUEUEUSER})},,${QUEUEUSERCIDNAME},hint:${QUEUEUSER}@ext-local))
exten => s,n,ExecIf($["${DB(AMPUSER/${QUEUEUSER}/queues/qnostate)}" = "ignorestate"]?AddQueueMember(${QUEUENO},Local/${QUEUEUSER}@from-queue/n,${DB(QPENALTY/${QUEUENO}/agents/${QUEUEUSER})},,${QUEUEUSERCIDNAME}))
exten => s,n,UserEvent(AgentLogin,Agent: ${QUEUEUSER})
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(invalid),Playback(pbx-invalid)
exten => s,n,Set(QAGENT_UNAUTHORIZED=1)
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-toggle-add-agent] ==--;


[app-queue-pause-toggle]
include => app-queue-pause-toggle-custom
exten => s,1(start),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Set(QUEUEUSER=${IF($[${LEN(${ARG2})}>0]?${ARG2}:${AMPUSER})})
exten => s,n,Set(MEMBR=Local/${QUEUEUSER}@from-queue/n)
exten => s,n,Set(PAUSE_STATE=${QUEUE_MEMBER(${ARG1},paused,${MEMBR})})
exten => s,n,Set(QUEUE_MEMBER(${ARG1},paused,${MEMBR})=${IF($[${PAUSE_STATE}]?0:1)})
exten => s,n,Playback(dictate/pause&${IF($[${PAUSE_STATE}]?de-activated:activated)})
exten => s,n,ExecIf($[${ARG2}]?Return())
exten => s,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-queue-pause-toggle] ==--;


[app-all-queue-pause-toggle]
include => app-all-queue-pause-toggle-custom
exten => s,1(start),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,AGI(agi://127.0.0.1/queue_devstate.agi,toggle-pause-all,${AMPUSER})
exten => s,n,Playback(dictate/pause&${IF($[${TOGGLEPAUSED}]?activated:de-activated)})
exten => s,n,Gosub(macro-hangupcall,s,1())

;--== end of [app-all-queue-pause-toggle] ==--;


[ext-queues]
include => ext-queues-custom
exten => 101000,1,Gosub(macro-user-callerid,s,1())
exten => 101000,n,Set(__MCQUEUE=${EXTEN})
exten => 101000,n,Answer
exten => 101000,n,Set(__FROMQUEUEEXTEN=${CALLERID(number)})
exten => 101000,n,Gosub(macro-blkvm-set,s,1(reset))
exten => 101000,n,ExecIf($["${REGEX("(M[(]auto-blkvm[)])" ${DIAL_OPTIONS})}" != "1"]?Set(_DIAL_OPTIONS=${DIAL_OPTIONS}U(macro-auto-blkvm)))
exten => 101000,n,Set(__NODEST=${EXTEN})
exten => 101000,n,Set(__QCONTEXT=0)
exten => 101000,n,Set(QCIDPP=${IF($[${LEN(${VQ_CIDPP})}>0]?"${VQ_CIDPP}": )})
exten => 101000,n,Set(VQ_CIDPP=)
exten => 101000,n,ExecIf($["${QCIDPP}"!=""]?Gosub(macro-prepend-cid,s,1(${QCIDPP})))
exten => 101000,n,Set(QAINFO=${IF($[${LEN(${VQ_AINFO})}>0]?${VQ_AINFO}: )})
exten => 101000,n,Set(VQ_AINFO=)
exten => 101000,n,Set(__RVOL_MODE=dontcare)
exten => 101000,n,ExecIf($["${QAINFO}"!=""]?Set(__ALERT_INFO=${QAINFO}))
exten => 101000,n,Set(QJOINMSG=${IF($[${LEN(${VQ_JOINMSG})}>0]?${IF($["${VQ_JOINMSG}"!="0"]?${VQ_JOINMSG}: )}: )})
exten => 101000,n,Set(VQ_JOINMSG=)
exten => 101000,n,Set(QCANCELMISSED=)
exten => 101000,n,Set(QRETRY=${IF($[${LEN(${VQ_RETRY})}>0]?${VQ_RETRY}: )})
exten => 101000,n,Set(VQ_RETRY=)
exten => 101000,n(qoptions),Set(QOPTIONS=${IF($[${LEN(${VQ_OPTIONS})}>0]?${VQ_OPTIONS}:t)}${QCANCELMISSED}${QRINGOPTS}${QRETRY})
exten => 101000,n,Set(VQ_OPTIONS=)
exten => 101000,n(qgosub),Set(QGOSUB=${IF($[${LEN(${VQ_GOSUB})}>0]?${VQ_GOSUB}:${QGOSUB})})
exten => 101000,n,Set(VQ_GOSUB=)
exten => 101000,n(qagi),Set(QAGI=${IF($[${LEN(${VQ_AGI})}>0]?${VQ_AGI}:${QAGI})})
exten => 101000,n,Set(VQ_AGI=)
exten => 101000,n(qrule),Set(QRULE=${IF($[${LEN(${VQ_RULE})}>0]?${IF($["${VQ_RULE}"!="0"]?${VQ_RULE}: )}:${QRULE})})
exten => 101000,n,Set(VQ_RULE=)
exten => 101000,n(qposition),Set(QPOSITION=${IF($[${LEN(${VQ_POSITION})}>0]?${VQ_POSITION}:${QPOSITION})})
exten => 101000,n,Set(VQ_POSITION=)
exten => 101000,n,Gosub(sub-record-check,s,1(q,101000,dontcare))
exten => 101000,n,Set(__SIGNORE=TRUE)
exten => 101000,n,Set(__QC_CONFIRM=0)
exten => 101000,n,GotoIf($[$["${QC_CONFIRM}"="1"] | $[${LEN(${VQ_CONFIRMMSG})}>1]]?QVQANNOUNCE:NOQVQANNOUNCE)
exten => 101000,n(QVQANNOUNCE),Set(__FORCE_CONFIRM=${CHANNEL})
exten => 101000,n,Set(SHARED(ANSWER_STATUS)=NOANSWER)
exten => 101000,n,Set(__CALLCONFIRMCID=${CALLERID(number)})
exten => 101000,n,Set(__ALT_CONFIRM_MSG=${IF($[${LEN(${VQ_CONFIRMMSG})}>0]?${IF($["${VQ_CONFIRMMSG}"!="0"]?${VQ_CONFIRMMSG}:default )}:default)})
exten => 101000,n(NOQVQANNOUNCE),Set(VQ_CONFIRMMSG=)
exten => 101000,n,ExecIf($["${QJOINMSG}"!=""]?Playback(${QJOINMSG}, ))
exten => 101000,n,QueueLog(101000,${UNIQUEID},NONE,DID,${FROM_DID})
exten => 101000,n,Set(QAANNOUNCE=${IF($[${LEN(${VQ_AANNOUNCE})}>0]?${IF($["${VQ_AANNOUNCE}"!="0"]?${VQ_AANNOUNCE}: )}: )})
exten => 101000,n,Set(VQ_AANNOUNCE=)
exten => 101000,n,Set(QMOH=${IF($["${VQ_MOH}"!=""]?${VQ_MOH}: )})
exten => 101000,n,Set(VQ_MOH=)
exten => 101000,n,ExecIf($["${QMOH}"!=""]?Set(__MOHCLASS=${QMOH}))
exten => 101000,n,ExecIf($["${MOHCLASS}"!=""]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => 101000,n,Set(QMAXWAIT=${IF($[${LEN(${VQ_MAXWAIT})}>0]?${VQ_MAXWAIT}: )})
exten => 101000,n,Set(VQ_MAXWAIT=)
exten => 101000,n,Set(QUEUENUM=101000)
exten => 101000,n,Set(QUEUEJOINTIME=${EPOCH})
exten => 101000,n(qcall),Queue(101000,${QOPTIONS},,${QAANNOUNCE},${QMAXWAIT},${QAGI},${QGOSUB},${QRULE},${QPOSITION},)
exten => 101000,n,Gosub(macro-blkvm-clr,s,1())
exten => 101000,n,Gosub(sub-record-cancel,s,1())
exten => 101000,n,Set(__NODEST=)
exten => 101000,n,Set(_QUEUE_PRIO=0)
exten => 101000,n,Set(QDEST=${VQ_DEST})
exten => 101000,n,Set(VQ_DEST=)
exten => 101000,n(gotodest),GotoIf($["${QDEST}"=""]?play-system-recording,2,1:${CUT(QDEST,^,1)},${CUT(QDEST,^,2)},${CUT(QDEST,^,3)})

exten => *45101000,1,Set(QUEUENO=101000)
exten => *45101000,n,Goto(app-queue-toggle,s,start)

exten => *46101000,1,Gosub(app-queue-pause-toggle,s,1(101000))

exten => _*45XXXX*XXXXXX,1,Set(QUEUENO=${EXTEN:8:6})
exten => _*45XXXX*XXXXXX,n,Set(QUEUEUSER=${EXTEN:3:4})
exten => _*45XXXX*XXXXXX,n,Goto(app-queue-toggle,s,start)
exten => _*45XXXX*XXXXXX,hint,Custom:QUEUE${EXTEN:3}

exten => 2000,1,Gosub(macro-user-callerid,s,1())
exten => 2000,n,Set(__MCQUEUE=${EXTEN})
exten => 2000,n,Answer
exten => 2000,n,Set(__FROMQUEUEEXTEN=${CALLERID(number)})
exten => 2000,n,Gosub(macro-blkvm-set,s,1(reset))
exten => 2000,n,ExecIf($["${REGEX("(M[(]auto-blkvm[)])" ${DIAL_OPTIONS})}" != "1"]?Set(_DIAL_OPTIONS=${DIAL_OPTIONS}U(macro-auto-blkvm)))
exten => 2000,n,Set(__NODEST=${EXTEN})
exten => 2000,n,Set(__QCONTEXT=0)
exten => 2000,n,Set(QCIDPP=${IF($[${LEN(${VQ_CIDPP})}>0]?"${VQ_CIDPP}": )})
exten => 2000,n,Set(VQ_CIDPP=)
exten => 2000,n,ExecIf($["${QCIDPP}"!=""]?Gosub(macro-prepend-cid,s,1(${QCIDPP})))
exten => 2000,n,Set(QAINFO=${IF($[${LEN(${VQ_AINFO})}>0]?${VQ_AINFO}: )})
exten => 2000,n,Set(VQ_AINFO=)
exten => 2000,n,Set(__RVOL_MODE=dontcare)
exten => 2000,n,ExecIf($["${QAINFO}"!=""]?Set(__ALERT_INFO=${QAINFO}))
exten => 2000,n,Set(QJOINMSG=${IF($[${LEN(${VQ_JOINMSG})}>0]?${IF($["${VQ_JOINMSG}"!="0"]?${VQ_JOINMSG}: )}: )})
exten => 2000,n,Set(VQ_JOINMSG=)
exten => 2000,n,Set(QCANCELMISSED=)
exten => 2000,n,Set(QRETRY=${IF($[${LEN(${VQ_RETRY})}>0]?${VQ_RETRY}: )})
exten => 2000,n,Set(VQ_RETRY=)
exten => 2000,n(qoptions),Set(QOPTIONS=${IF($[${LEN(${VQ_OPTIONS})}>0]?${VQ_OPTIONS}:t)}${QCANCELMISSED}${QRINGOPTS}${QRETRY})
exten => 2000,n,Set(VQ_OPTIONS=)
exten => 2000,n(qgosub),Set(QGOSUB=${IF($[${LEN(${VQ_GOSUB})}>0]?${VQ_GOSUB}:${QGOSUB})})
exten => 2000,n,Set(VQ_GOSUB=)
exten => 2000,n(qagi),Set(QAGI=${IF($[${LEN(${VQ_AGI})}>0]?${VQ_AGI}:${QAGI})})
exten => 2000,n,Set(VQ_AGI=)
exten => 2000,n(qrule),Set(QRULE=${IF($[${LEN(${VQ_RULE})}>0]?${IF($["${VQ_RULE}"!="0"]?${VQ_RULE}: )}:${QRULE})})
exten => 2000,n,Set(VQ_RULE=)
exten => 2000,n(qposition),Set(QPOSITION=${IF($[${LEN(${VQ_POSITION})}>0]?${VQ_POSITION}:${QPOSITION})})
exten => 2000,n,Set(VQ_POSITION=)
exten => 2000,n,Gosub(sub-record-check,s,1(q,2000,dontcare))
exten => 2000,n,Set(__SIGNORE=TRUE)
exten => 2000,n,Set(__QC_CONFIRM=0)
exten => 2000,n,GotoIf($[$["${QC_CONFIRM}"="1"] | $[${LEN(${VQ_CONFIRMMSG})}>1]]?QVQANNOUNCE:NOQVQANNOUNCE)
exten => 2000,n(QVQANNOUNCE),Set(__FORCE_CONFIRM=${CHANNEL})
exten => 2000,n,Set(SHARED(ANSWER_STATUS)=NOANSWER)
exten => 2000,n,Set(__CALLCONFIRMCID=${CALLERID(number)})
exten => 2000,n,Set(__ALT_CONFIRM_MSG=${IF($[${LEN(${VQ_CONFIRMMSG})}>0]?${IF($["${VQ_CONFIRMMSG}"!="0"]?${VQ_CONFIRMMSG}:default )}:default)})
exten => 2000,n(NOQVQANNOUNCE),Set(VQ_CONFIRMMSG=)
exten => 2000,n,ExecIf($["${QJOINMSG}"!=""]?Playback(${QJOINMSG}, ))
exten => 2000,n,QueueLog(2000,${UNIQUEID},NONE,DID,${FROM_DID})
exten => 2000,n,Set(QAANNOUNCE=${IF($[${LEN(${VQ_AANNOUNCE})}>0]?${IF($["${VQ_AANNOUNCE}"!="0"]?${VQ_AANNOUNCE}: )}: )})
exten => 2000,n,Set(VQ_AANNOUNCE=)
exten => 2000,n,Set(QMOH=${IF($["${VQ_MOH}"!=""]?${VQ_MOH}: )})
exten => 2000,n,Set(VQ_MOH=)
exten => 2000,n,ExecIf($["${QMOH}"!=""]?Set(__MOHCLASS=${QMOH}))
exten => 2000,n,ExecIf($["${MOHCLASS}"!=""]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => 2000,n,Set(QMAXWAIT=${IF($[${LEN(${VQ_MAXWAIT})}>0]?${VQ_MAXWAIT}: )})
exten => 2000,n,Set(VQ_MAXWAIT=)
exten => 2000,n,Set(QUEUENUM=2000)
exten => 2000,n,Set(QUEUEJOINTIME=${EPOCH})
exten => 2000,n(qcall),Queue(2000,${QOPTIONS},,${QAANNOUNCE},${QMAXWAIT},${QAGI},${QGOSUB},${QRULE},${QPOSITION},)
exten => 2000,n,Gosub(macro-blkvm-clr,s,1())
exten => 2000,n,Gosub(sub-record-cancel,s,1())
exten => 2000,n,Set(__NODEST=)
exten => 2000,n,Set(_QUEUE_PRIO=0)
exten => 2000,n,Set(QDEST=${VQ_DEST})
exten => 2000,n,Set(VQ_DEST=)
exten => 2000,n(gotodest),GotoIf($["${QDEST}"=""]?play-system-recording,2,1:${CUT(QDEST,^,1)},${CUT(QDEST,^,2)},${CUT(QDEST,^,3)})

exten => *452000,1,Set(QUEUENO=2000)
exten => *452000,n,Goto(app-queue-toggle,s,start)

exten => *462000,1,Gosub(app-queue-pause-toggle,s,1(2000))

exten => _*45XXXX*XXXX,1,Set(QUEUENO=${EXTEN:8:4})
exten => _*45XXXX*XXXX,n,Set(QUEUEUSER=${EXTEN:3:4})
exten => _*45XXXX*XXXX,n,Goto(app-queue-toggle,s,start)
exten => _*45XXXX*XXXX,hint,Custom:QUEUE${EXTEN:3}

exten => 3000,1,Gosub(macro-user-callerid,s,1())
exten => 3000,n,Set(__MCQUEUE=${EXTEN})
exten => 3000,n,Answer
exten => 3000,n,Set(__FROMQUEUEEXTEN=${CALLERID(number)})
exten => 3000,n,Gosub(macro-blkvm-set,s,1(reset))
exten => 3000,n,ExecIf($["${REGEX("(M[(]auto-blkvm[)])" ${DIAL_OPTIONS})}" != "1"]?Set(_DIAL_OPTIONS=${DIAL_OPTIONS}U(macro-auto-blkvm)))
exten => 3000,n,Set(__NODEST=${EXTEN})
exten => 3000,n,Set(__QCONTEXT=0)
exten => 3000,n,Set(QCIDPP=${IF($[${LEN(${VQ_CIDPP})}>0]?"${VQ_CIDPP}": )})
exten => 3000,n,Set(VQ_CIDPP=)
exten => 3000,n,ExecIf($["${QCIDPP}"!=""]?Gosub(macro-prepend-cid,s,1(${QCIDPP})))
exten => 3000,n,Set(QAINFO=${IF($[${LEN(${VQ_AINFO})}>0]?${VQ_AINFO}: )})
exten => 3000,n,Set(VQ_AINFO=)
exten => 3000,n,Set(__RVOL_MODE=dontcare)
exten => 3000,n,ExecIf($["${QAINFO}"!=""]?Set(__ALERT_INFO=${QAINFO}))
exten => 3000,n,Set(QJOINMSG=${IF($[${LEN(${VQ_JOINMSG})}>0]?${IF($["${VQ_JOINMSG}"!="0"]?${VQ_JOINMSG}: )}: )})
exten => 3000,n,Set(VQ_JOINMSG=)
exten => 3000,n,Set(QCANCELMISSED=)
exten => 3000,n,Set(QRETRY=${IF($[${LEN(${VQ_RETRY})}>0]?${VQ_RETRY}: )})
exten => 3000,n,Set(VQ_RETRY=)
exten => 3000,n(qoptions),Set(QOPTIONS=${IF($[${LEN(${VQ_OPTIONS})}>0]?${VQ_OPTIONS}:t)}${QCANCELMISSED}${QRINGOPTS}${QRETRY})
exten => 3000,n,Set(VQ_OPTIONS=)
exten => 3000,n(qgosub),Set(QGOSUB=${IF($[${LEN(${VQ_GOSUB})}>0]?${VQ_GOSUB}:${QGOSUB})})
exten => 3000,n,Set(VQ_GOSUB=)
exten => 3000,n(qagi),Set(QAGI=${IF($[${LEN(${VQ_AGI})}>0]?${VQ_AGI}:${QAGI})})
exten => 3000,n,Set(VQ_AGI=)
exten => 3000,n(qrule),Set(QRULE=${IF($[${LEN(${VQ_RULE})}>0]?${IF($["${VQ_RULE}"!="0"]?${VQ_RULE}: )}:${QRULE})})
exten => 3000,n,Set(VQ_RULE=)
exten => 3000,n(qposition),Set(QPOSITION=${IF($[${LEN(${VQ_POSITION})}>0]?${VQ_POSITION}:${QPOSITION})})
exten => 3000,n,Set(VQ_POSITION=)
exten => 3000,n,Gosub(sub-record-check,s,1(q,3000,dontcare))
exten => 3000,n,Set(__SIGNORE=TRUE)
exten => 3000,n,Set(__QC_CONFIRM=0)
exten => 3000,n,GotoIf($[$["${QC_CONFIRM}"="1"] | $[${LEN(${VQ_CONFIRMMSG})}>1]]?QVQANNOUNCE:NOQVQANNOUNCE)
exten => 3000,n(QVQANNOUNCE),Set(__FORCE_CONFIRM=${CHANNEL})
exten => 3000,n,Set(SHARED(ANSWER_STATUS)=NOANSWER)
exten => 3000,n,Set(__CALLCONFIRMCID=${CALLERID(number)})
exten => 3000,n,Set(__ALT_CONFIRM_MSG=${IF($[${LEN(${VQ_CONFIRMMSG})}>0]?${IF($["${VQ_CONFIRMMSG}"!="0"]?${VQ_CONFIRMMSG}:default )}:default)})
exten => 3000,n(NOQVQANNOUNCE),Set(VQ_CONFIRMMSG=)
exten => 3000,n,ExecIf($["${QJOINMSG}"!=""]?Playback(${QJOINMSG}, ))
exten => 3000,n,QueueLog(3000,${UNIQUEID},NONE,DID,${FROM_DID})
exten => 3000,n,Set(QAANNOUNCE=${IF($[${LEN(${VQ_AANNOUNCE})}>0]?${IF($["${VQ_AANNOUNCE}"!="0"]?${VQ_AANNOUNCE}: )}: )})
exten => 3000,n,Set(VQ_AANNOUNCE=)
exten => 3000,n,Set(QMOH=${IF($["${VQ_MOH}"!=""]?${VQ_MOH}: )})
exten => 3000,n,Set(VQ_MOH=)
exten => 3000,n,ExecIf($["${QMOH}"!=""]?Set(__MOHCLASS=${QMOH}))
exten => 3000,n,ExecIf($["${MOHCLASS}"!=""]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => 3000,n,Set(QMAXWAIT=${IF($[${LEN(${VQ_MAXWAIT})}>0]?${VQ_MAXWAIT}: )})
exten => 3000,n,Set(VQ_MAXWAIT=)
exten => 3000,n,Set(QUEUENUM=3000)
exten => 3000,n,Set(QUEUEJOINTIME=${EPOCH})
exten => 3000,n(qcall),Queue(3000,${QOPTIONS},,${QAANNOUNCE},${QMAXWAIT},${QAGI},${QGOSUB},${QRULE},${QPOSITION},)
exten => 3000,n,Gosub(macro-blkvm-clr,s,1())
exten => 3000,n,Gosub(sub-record-cancel,s,1())
exten => 3000,n,Set(__NODEST=)
exten => 3000,n,Set(_QUEUE_PRIO=0)
exten => 3000,n,Set(QDEST=${VQ_DEST})
exten => 3000,n,Set(VQ_DEST=)
exten => 3000,n(gotodest),GotoIf($["${QDEST}"=""]?play-system-recording,2,1:${CUT(QDEST,^,1)},${CUT(QDEST,^,2)},${CUT(QDEST,^,3)})

exten => *453000,1,Set(QUEUENO=3000)
exten => *453000,n,Goto(app-queue-toggle,s,start)

exten => *463000,1,Gosub(app-queue-pause-toggle,s,1(3000))

exten => 4000,1,Gosub(macro-user-callerid,s,1())
exten => 4000,n,Set(__MCQUEUE=${EXTEN})
exten => 4000,n,Answer
exten => 4000,n,Set(__FROMQUEUEEXTEN=${CALLERID(number)})
exten => 4000,n,Gosub(macro-blkvm-set,s,1(reset))
exten => 4000,n,ExecIf($["${REGEX("(M[(]auto-blkvm[)])" ${DIAL_OPTIONS})}" != "1"]?Set(_DIAL_OPTIONS=${DIAL_OPTIONS}U(macro-auto-blkvm)))
exten => 4000,n,Set(__NODEST=${EXTEN})
exten => 4000,n,Set(__QCONTEXT=0)
exten => 4000,n,Set(QCIDPP=${IF($[${LEN(${VQ_CIDPP})}>0]?"${VQ_CIDPP}": )})
exten => 4000,n,Set(VQ_CIDPP=)
exten => 4000,n,ExecIf($["${QCIDPP}"!=""]?Gosub(macro-prepend-cid,s,1(${QCIDPP})))
exten => 4000,n,Set(QAINFO=${IF($[${LEN(${VQ_AINFO})}>0]?${VQ_AINFO}: )})
exten => 4000,n,Set(VQ_AINFO=)
exten => 4000,n,Set(__RVOL_MODE=dontcare)
exten => 4000,n,ExecIf($["${QAINFO}"!=""]?Set(__ALERT_INFO=${QAINFO}))
exten => 4000,n,Set(QJOINMSG=${IF($[${LEN(${VQ_JOINMSG})}>0]?${IF($["${VQ_JOINMSG}"!="0"]?${VQ_JOINMSG}: )}: )})
exten => 4000,n,Set(VQ_JOINMSG=)
exten => 4000,n,Set(QCANCELMISSED=)
exten => 4000,n,Set(QRETRY=${IF($[${LEN(${VQ_RETRY})}>0]?${VQ_RETRY}: )})
exten => 4000,n,Set(VQ_RETRY=)
exten => 4000,n(qoptions),Set(QOPTIONS=${IF($[${LEN(${VQ_OPTIONS})}>0]?${VQ_OPTIONS}:t)}${QCANCELMISSED}${QRINGOPTS}${QRETRY})
exten => 4000,n,Set(VQ_OPTIONS=)
exten => 4000,n(qgosub),Set(QGOSUB=${IF($[${LEN(${VQ_GOSUB})}>0]?${VQ_GOSUB}:${QGOSUB})})
exten => 4000,n,Set(VQ_GOSUB=)
exten => 4000,n(qagi),Set(QAGI=${IF($[${LEN(${VQ_AGI})}>0]?${VQ_AGI}:${QAGI})})
exten => 4000,n,Set(VQ_AGI=)
exten => 4000,n(qrule),Set(QRULE=${IF($[${LEN(${VQ_RULE})}>0]?${IF($["${VQ_RULE}"!="0"]?${VQ_RULE}: )}:${QRULE})})
exten => 4000,n,Set(VQ_RULE=)
exten => 4000,n(qposition),Set(QPOSITION=${IF($[${LEN(${VQ_POSITION})}>0]?${VQ_POSITION}:${QPOSITION})})
exten => 4000,n,Set(VQ_POSITION=)
exten => 4000,n,Gosub(sub-record-check,s,1(q,4000,dontcare))
exten => 4000,n,Set(__SIGNORE=TRUE)
exten => 4000,n,Set(__QC_CONFIRM=0)
exten => 4000,n,GotoIf($[$["${QC_CONFIRM}"="1"] | $[${LEN(${VQ_CONFIRMMSG})}>1]]?QVQANNOUNCE:NOQVQANNOUNCE)
exten => 4000,n(QVQANNOUNCE),Set(__FORCE_CONFIRM=${CHANNEL})
exten => 4000,n,Set(SHARED(ANSWER_STATUS)=NOANSWER)
exten => 4000,n,Set(__CALLCONFIRMCID=${CALLERID(number)})
exten => 4000,n,Set(__ALT_CONFIRM_MSG=${IF($[${LEN(${VQ_CONFIRMMSG})}>0]?${IF($["${VQ_CONFIRMMSG}"!="0"]?${VQ_CONFIRMMSG}:default )}:default)})
exten => 4000,n(NOQVQANNOUNCE),Set(VQ_CONFIRMMSG=)
exten => 4000,n,ExecIf($["${QJOINMSG}"!=""]?Playback(${QJOINMSG}, ))
exten => 4000,n,QueueLog(4000,${UNIQUEID},NONE,DID,${FROM_DID})
exten => 4000,n,Set(QAANNOUNCE=${IF($[${LEN(${VQ_AANNOUNCE})}>0]?${IF($["${VQ_AANNOUNCE}"!="0"]?${VQ_AANNOUNCE}: )}: )})
exten => 4000,n,Set(VQ_AANNOUNCE=)
exten => 4000,n,Set(QMOH=${IF($["${VQ_MOH}"!=""]?${VQ_MOH}: )})
exten => 4000,n,Set(VQ_MOH=)
exten => 4000,n,ExecIf($["${QMOH}"!=""]?Set(__MOHCLASS=${QMOH}))
exten => 4000,n,ExecIf($["${MOHCLASS}"!=""]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => 4000,n,Set(QMAXWAIT=${IF($[${LEN(${VQ_MAXWAIT})}>0]?${VQ_MAXWAIT}: )})
exten => 4000,n,Set(VQ_MAXWAIT=)
exten => 4000,n,Set(QUEUENUM=4000)
exten => 4000,n,Set(QUEUEJOINTIME=${EPOCH})
exten => 4000,n(qcall),Queue(4000,${QOPTIONS},,${QAANNOUNCE},${QMAXWAIT},${QAGI},${QGOSUB},${QRULE},${QPOSITION},)
exten => 4000,n,Gosub(macro-blkvm-clr,s,1())
exten => 4000,n,Gosub(sub-record-cancel,s,1())
exten => 4000,n,Set(__NODEST=)
exten => 4000,n,Set(_QUEUE_PRIO=0)
exten => 4000,n,Set(QDEST=${VQ_DEST})
exten => 4000,n,Set(VQ_DEST=)
exten => 4000,n(gotodest),GotoIf($["${QDEST}"=""]?play-system-recording,2,1:${CUT(QDEST,^,1)},${CUT(QDEST,^,2)},${CUT(QDEST,^,3)})

exten => *454000,1,Set(QUEUENO=4000)
exten => *454000,n,Goto(app-queue-toggle,s,start)

exten => *464000,1,Gosub(app-queue-pause-toggle,s,1(4000))

exten => *45,1,Goto(app-all-queue-toggle,s,start)

exten => _*45*X.,1,Goto(app-all-queue-toggle,s,start)
exten => _*45*X.,hint,${DB(AMPUSER/${EXTEN:4}/queuehint)}

exten => *46,1,Goto(app-all-queue-pause-toggle,s,1)

exten => _*46*X.,1,Goto(app-all-queue-pause-toggle,s,1)
exten => _*46*X.,hint,${DB(AMPUSER/${EXTEN:4}/pausequeuehint)}

exten => _*46*XXXX*2000,1,Gosub(app-queue-pause-toggle,s,1(2000,${DB(DEVICE/${EXTEN:4:4}/user)}))
exten => _*46*XXXX*2000,hint,Queue:2000_pause_Local/${DB(DEVICE/${EXTEN:4:4}/user)}@from-queue/n

exten => _*46*XXXX*3000,1,Gosub(app-queue-pause-toggle,s,1(3000,${DB(DEVICE/${EXTEN:4:4}/user)}))
exten => _*46*XXXX*3000,hint,Queue:3000_pause_Local/${DB(DEVICE/${EXTEN:4:4}/user)}@from-queue/n

exten => _*46*XXXX*101000,1,Gosub(app-queue-pause-toggle,s,1(101000,${DB(DEVICE/${EXTEN:4:4}/user)}))
exten => _*46*XXXX*101000,hint,Queue:101000_pause_Local/${DB(DEVICE/${EXTEN:4:4}/user)}@from-queue/n

exten => _*46*XXXX*4000,1,Gosub(app-queue-pause-toggle,s,1(4000,${DB(DEVICE/${EXTEN:4:4}/user)}))
exten => _*46*XXXX*4000,hint,Queue:4000_pause_Local/${DB(DEVICE/${EXTEN:4:4}/user)}@from-queue/n

exten => *47,1,Goto(app-queue-caller-count,s,1)

exten => *47*101000,1,Set(QUEUE=101000)
exten => *47*101000,n,Goto(app-queue-caller-count,s,1)

exten => *47*2000,1,Set(QUEUE=2000)
exten => *47*2000,n,Goto(app-queue-caller-count,s,1)

exten => *47*3000,1,Set(QUEUE=3000)
exten => *47*3000,n,Goto(app-queue-caller-count,s,1)

exten => *47*4000,1,Set(QUEUE=4000)
exten => *47*4000,n,Goto(app-queue-caller-count,s,1)

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [ext-queues] ==--;


[from-queue]
include => from-queue-custom
exten => 101000,1,Goto(from-internal,${QAGENT},1)

exten => 2000,1,Goto(from-internal,${QAGENT},1)

exten => 3000,1,Goto(from-internal,${QAGENT},1)

exten => 4000,1,Goto(from-internal,${QAGENT},1)

exten => _.,1,Set(QAGENT=${EXTEN})
exten => _.,n,Set(__FROMQ=true)
exten => _.,n,GotoIf($["${LEN(${NODEST})}" = "0"]?hangup)
exten => _.,n,GotoIf($["${DIALPLAN_EXISTS(from-queue,${NODEST},1)}" = "1"]?${NODEST},1:hangup)
exten => _.,n(hangup),Gosub(macro-hangupcall,s,1())

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [from-queue] ==--;


[app-queue-caller-count]
include => app-queue-caller-count-custom
exten => s,1,AGI(agi://127.0.0.1/queue_devstate.agi,getuserQueues,${CALLERID(num)},${QUEUE})
exten => s,n,Answer
exten => s,n,Set(COUNT=0)
exten => s,n,Noop(${QUEUES})
exten => s,n,GotoIf($["${QUEUES}" = "0"]?skip)
exten => s,n,Wait(1)
exten => s,n,Set(LOOPCNT=${FIELDQTY(QUEUES,&)})
exten => s,n,Set(ITER=1)
exten => s,n(begin1),Set(QUEUE=${CUT(QUEUES,&,${ITER})})
exten => s,n,Set(COUNT=$[${COUNT} + ${QUEUE_WAITING_COUNT(${QUEUE})}])
exten => s,n(end1),Set(ITER=$[${ITER} + 1])
exten => s,n,GotoIf($[${ITER} <= ${LOOPCNT}]?begin1)
exten => s,n(skip),Wait(1)
exten => s,n,SayNumber(${COUNT},f)
exten => s,n,Playback(queue-quantity2)
exten => s,n,Return()

;--== end of [app-queue-caller-count] ==--;


[macro-auto-blkvm]
include => macro-auto-blkvm-custom
exten => s,1,ExecIf($["${FROMQ}" = "true" & "${CALLFILENAME}" != "" & "${CDR(recordingfile)}" = ""]?Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT}))
exten => s,n,Set(__GOSUB_RESULT=)
exten => s,n,Set(CFIGNORE=)
exten => s,n,Set(MASTER_CHANNEL(CFIGNORE)=)
exten => s,n,Set(FORWARD_CONTEXT=from-internal)
exten => s,n,Set(MASTER_CHANNEL(FORWARD_CONTEXT)=from-internal)
exten => s,n,Gosub(macro-blkvm-clr,s,1())
exten => s,n,ExecIf($[!${REGEX("[^0-9]" ${DIALEDPEERNUMBER})} && "${DB(AMPUSER/${AMPUSER}/cidname)}" != ""]?Set(MASTER_CHANNEL(CONNECTEDLINE(num))=${DIALEDPEERNUMBER}))
exten => s,n,ExecIf($[!${REGEX("[^0-9]" ${DIALEDPEERNUMBER})} && "${DB(AMPUSER/${AMPUSER}/cidname)}" != ""]?Set(MASTER_CHANNEL(CONNECTEDLINE(name))=${DB(AMPUSER/${DIALEDPEERNUMBER}/cidname)}))
exten => s,n,Return()

;--== end of [macro-auto-blkvm] ==--;


[from-queue-exten-only-x]
include => from-queue-exten-only-x-custom
include => from-internal
exten => foo,1,Noop(bar)

;--== end of [from-queue-exten-only-x] ==--;


[from-queue-exten-internal]
include => from-queue-exten-internal-custom
include => from-queue-exten-only
include => from-queue-exten-only-x
include => from-internal
exten => foo,1,Noop(bar)

;--== end of [from-queue-exten-internal] ==--;


[from-queue-exten-only]
include => from-queue-exten-only-custom
exten => _XXXX,1,GotoIf($[${DB_EXISTS(AMPUSER/${EXTEN}/cidnum)} = 0 & ${QCONTEXT}=2]?hangup)
exten => _XXXX,n,GotoIf($[${DB_EXISTS(AMPUSER/${EXTEN}/cidnum)} = 0]?from-queue-exten-only-x,${EXTEN},1)
exten => _XXXX,n,Set(RingGroupMethod=none)
exten => _XXXX,n,Set(CHANNEL(language)=${MASTER_CHANNEL(CHANNEL(language))})
exten => _XXXX,n,Set(QDOPTS=${IF($["${CALLER_DEST}"!=""]?g)}${IF($["${AGENT_DEST}"!=""]?F(${AGENT_DEST}))})
exten => _XXXX,n(checkrecord),Set(CALLTYPE_OVERRIDE=external)
exten => _XXXX,n,ExecIf($[!${LEN(${FROMEXTEN})}]?Set(FROMEXTEN=${IF(${LEN(${NODEST})}?${NODEST}:external)}))
exten => _XXXX,n,Gosub(sub-record-check,s,1(exten,${EXTEN},))
exten => _XXXX,n,Gosub(macro-dial-one,s,1(,${DIAL_OPTIONS}${QDOPTS},${EXTEN}))
exten => _XXXX,n,GotoIf($["${CALLER_DEST}"!=""&&"${DIALSTATUS}"="ANSWER"]?${CUT(CALLER_DEST,^,1)},${CUT(CALLER_DEST,^,2)},${CUT(CALLER_DEST,^,3)})
exten => _XXXX,n(hangup),Hangup()

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [from-queue-exten-only] ==--;


[play-system-recording]
include => play-system-recording-custom
exten => 2,1,Answer
exten => 2,n,Playback(custom/09_AllBusy)
exten => 2,n,Hangup()

exten => 1,1,Answer
exten => 1,n,Playback(custom/00_Welcome_Message&custom/01_Language&custom/02_General_Service&custom/03_Meet_Staff&custom/04_Sirkuni&custom/05_Debo&custom/06_ERGA&custom/08_Error_Retry&custom/07_NoInput_Retry&custom/09_AllBusy&custom/10_CallTermination&custom/11_All_Busy&custom/choose_lang&custom/meet_staff&custom/no_input&custom/general_service&custom/srikuni&custom/welcome)
exten => 1,n,Hangup()

;--== end of [play-system-recording] ==--;


[systemrecording-gui]
include => systemrecording-gui-custom
exten => dorecord,1,Record(${RECFILE}.wav,,,k)

exten => h,1,System(touch ${RECFILE}.finished)
exten => h,n(exit),Hangup()

;--== end of [systemrecording-gui] ==--;


[macro-systemrecording]
include => macro-systemrecording-custom
exten => s,1,GotoIf($["${ARG2}" = ""]?invalid)
exten => s,n,Set(TMPLANG=${CHANNEL(language)})
exten => s,n,ExecIf($["${ARG4}" != ""]?Set(TMPLANG=${ARG4}))
exten => s,n,Set(RECFILE=${TMPLANG}/${ARG2})
exten => s,n,Set(LISTEN=docheck)
exten => s,n,ExecIf($["${ARG3}" != ""]?Authenticate(${ARG3}))
exten => s,n,Goto(${ARG1},1)

exten => dorecord,1,Set(TMPRECFILE=${RECFILE}-TMP)
exten => dorecord,n,Background(say-temp-msg-prs-pound,,${CHANNEL(language)})
exten => dorecord,n,Record(${TMPRECFILE}.${CHANNEL(audioreadformat)},,,k)
exten => dorecord,n,Set(LISTEN=dochecknolanguage)
exten => dorecord,n,Goto(confmenu,1)

exten => dochecknolanguage,1,Playback(beep)
exten => dochecknolanguage,n(dc_start),Background(${TMPRECFILE},m,,macro-systemrecording)
exten => dochecknolanguage,n,Wait(1)
exten => dochecknolanguage,n,Goto(confmenu,1)

exten => docheck,1,Playback(beep)
exten => docheck,n(dc_start),Background(${RECFILE},m,${CHANNEL(language)},macro-systemrecording)
exten => docheck,n,Wait(1)
exten => docheck,n,Goto(confmenu,1)

exten => confmenu,1,Background(to-listen-to-it&press-1&to-accept-recording&press-2&to-rerecord-it&press-star&language&press-3,m,${CHANNEL(language)},macro-systemrecording)
exten => confmenu,n,Read(RECRESULT,,1,,,4)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x*"]?dorecord,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x1"]?${LISTEN},2)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x2"]?doaccept,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x3"]?switchlang,1)
exten => confmenu,n,Goto(1)

exten => doaccept,1,Set(EXISTS=${STAT(e,${ASTVARLIBDIR}/sounds/${TMPRECFILE}.${CHANNEL(audioreadformat)})})
exten => doaccept,n,Noop(${EXISTS})
exten => doaccept,n,GotoIf($["${EXISTS}" != "1"]?exit)
exten => doaccept,n,System(touch ${ASTVARLIBDIR}/sounds/${RECFILE}.finished)
exten => doaccept,n,GotoIf($["x${TMPRECFILE}"="x"]?exit)
exten => doaccept,n,System(mv ${ASTVARLIBDIR}/sounds/${TMPRECFILE}.${CHANNEL(audioreadformat)} ${ASTVARLIBDIR}/sounds/${RECFILE}.${CHANNEL(audioreadformat)})
exten => doaccept,n,Playback(wait-moment)
exten => doaccept,n,AGI(agi://127.0.0.1/recordings.agi)
exten => doaccept,n,Set(TMPRECFILE=${RECFILE})
exten => doaccept,n(exit),Playback(auth-thankyou)
exten => doaccept,n,Goto(confmenu,1)

exten => switchlang,1,Playback(language&is-set-to)
exten => switchlang,n,SayAlpha(${TMPLANG})
exten => switchlang,n,Playback(after-the-tone)
exten => switchlang,n,Background(press-1)
exten => switchlang,n,SayAlpha(en)
exten => switchlang,n,Playback(beep)
exten => switchlang,n,Read(LANGRESULT,,1,,,4)
exten => switchlang,n,ExecIf($["x${LANGRESULT}"="x1"]?Set(TMPLANG=en))
exten => switchlang,n,Set(RECFILE=${TMPLANG}/${ARG2})
exten => switchlang,n,Playback(language&is-set-to)
exten => switchlang,n,SayAlpha(${TMPLANG})
exten => switchlang,n,Goto(confmenu,1)

exten => invalid,1,Playback(pm-invalid-option)
exten => invalid,n,Hangup()

exten => 1,1,Goto(${LISTEN},dc_start)

exten => 2,1,Goto(doaccept,1)

exten => 3,1,Goto(switchlang,1)

exten => *,1,Goto(dorecord,1)

exten => t,1,Playback(goodbye)
exten => t,n,Hangup()

exten => i,1,Playback(pm-invalid-option)
exten => i,n,Goto(confmenu,1)

exten => h,1,System(touch ${ASTVARLIBDIR}/sounds/${RECFILE}.finished)
exten => h,n,GotoIf($["x${TMPRECFILE}"="x"]?exit)
exten => h,n,System(mv ${ASTVARLIBDIR}/sounds/${TMPRECFILE}.${CHANNEL(audioreadformat)} ${ASTVARLIBDIR}/sounds/${CHANNEL(language)}/${RECFILE}.${CHANNEL(audioreadformat)})
exten => h,n(exit),Hangup()

;--== end of [macro-systemrecording] ==--;


[ext-group]
include => ext-group-custom
exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [ext-group] ==--;


[vm-callme]
include => vm-callme-custom
exten => s,1,Answer
exten => s,n,Wait(1)
exten => s,n(repeat),Background(${MSG}&silence/2&vm-repeat&vm-starmain)
exten => s,n,WaitExten(15,)

exten => 5,1,Goto(s,repeat)

exten => #,1,Playback(vm-goodbye)
exten => #,n,Hangup()

exten => *,1,Gosub(macro-get-vmcontext,s,1(${MBOX}))
exten => *,n,VoiceMailMain(${MBOX}@${VMCONTEXT},s)

exten => i,1,Playback(pm-invalid-option)
exten => i,n,Goto(s,repeat)

exten => t,1,Playback(vm-goodbye)
exten => t,n,Hangup()

exten => h,1,Hangup()

;--== end of [vm-callme] ==--;


[app-vmmain]
include => app-vmmain-custom
exten => *97,1,Gosub(macro-user-callerid,s,1())
exten => *97,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *97,n,Set(CONNECTEDLINE(name,i)=My Voicemail)
exten => *97,n,Set(CONNECTEDLINE(num,i)=${AMPUSER})
exten => *97,n,Answer
exten => *97,n,Wait(1)
exten => *97,n,Gosub(macro-get-vmcontext,s,1(${AMPUSER}))
exten => *97,n(check),Set(VMBOXEXISTSSTATUS=${IF(${VM_INFO(${AMPUSER}@${VMCONTEXT},exists)}?SUCCESS:FAILED)})
exten => *97,n,GotoIf($["${VMBOXEXISTSSTATUS}" = "SUCCESS"]?mbexist)
exten => *97,n,VoiceMailMain()
exten => *97,n,GotoIf($["${IVR_RETVM}" = "RETURN" & "${IVR_CONTEXT}" != ""]?playret)
exten => *97,n,Gosub(macro-hangupcall,s,1())
exten => *97,check+101(mbexist),GotoIf($["${DB(AMPUSER/${AMPUSER}/novmpw)}"!=""]?novmpw:vmpw)
exten => *97,n(novmpw),Noop(Verifying channel ${CHANNEL} is actually ${AMPUSER})
exten => *97,n,Set(DEVICES=${DB(AMPUSER/${AMPUSER}/device)})
exten => *97,n,ExecIf($["${DEVICES}" = ""]?Set(DEVICES=${AMPUSER}))
exten => *97,n,ExecIf($["${DEVICES:0:1}" = "&"]?Set(DEVICES=${DEVICES:1}))
exten => *97,n,While($["${SET(DEV=${SHIFT(DEVICES,&)})}" != ""])
exten => *97,n,GotoIf($["${DB(DEVICE/${DEV}/dial)}" = "${CUT(CHANNEL,-,1)}"]?vmpwskip)
exten => *97,n,EndWhile
exten => *97,n,Noop(Channel ${CHANNEL} is NOT ${AMPUSER} forcing VM Password)
exten => *97,n(vmpw),VoiceMailMain(${AMPUSER}@${VMCONTEXT})
exten => *97,n,Goto(vmend)
exten => *97,n(vmpwskip),VoiceMailMain(${AMPUSER}@${VMCONTEXT},s)
exten => *97,n(vmend),GotoIf($["${IVR_RETVM}" = "RETURN" & "${IVR_CONTEXT}" != ""]?playret)
exten => *97,n,Gosub(macro-hangupcall,s,1())
exten => *97,n(playret),Playback(beep&you-will-be-transfered-menu&silence/1)
exten => *97,n,Goto(${IVR_CONTEXT},return,1)

;--== end of [app-vmmain] ==--;


[app-dialvm]
include => app-dialvm-custom
exten => *98,1,Gosub(macro-user-callerid,s,1())
exten => *98,n,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => *98,n,Set(CONNECTEDLINE(name,i)=Dial Voicemail)
exten => *98,n,Set(CONNECTEDLINE(num,i)=${EXTEN})
exten => *98,n,Answer
exten => *98,n(start),Wait(1)
exten => *98,n,Noop(app-dialvm: Asking for mailbox)
exten => *98,n,Read(MAILBOX,vm-login,,,3,2)
exten => *98,n(check),GotoIf($["${MAILBOX}" = ""]?hangup)
exten => *98,n,Noop(app-dialvm: Got Mailbox ${MAILBOX})
exten => *98,n,Gosub(macro-get-vmcontext,s,1(${MAILBOX}))
exten => *98,n,Set(VMBOXEXISTSSTATUS=${IF(${VM_INFO(${MAILBOX}@${VMCONTEXT},exists)}?SUCCESS:FAILED)})
exten => *98,n,GotoIf($["${VMBOXEXISTSSTATUS}" = "SUCCESS"]?good:bad)
exten => *98,n,Gosub(macro-hangupcall,s,1())
exten => *98,n(good),Noop(app-dialvm: Good mailbox ${MAILBOX}@${VMCONTEXT})
exten => *98,n,VoiceMailMain(${MAILBOX}@${VMCONTEXT})
exten => *98,n,GotoIf($["${IVR_RETVM}" = "RETURN" & "${IVR_CONTEXT}" != ""]?playret)
exten => *98,n,Gosub(macro-hangupcall,s,1())
exten => *98,n(bad),Noop(app-dialvm: BAD mailbox ${MAILBOX}@${VMCONTEXT})
exten => *98,n,Wait(1)
exten => *98,n,Noop(app-dialvm: Asking for password so people can't probe for existence of a mailbox)
exten => *98,n,Read(FAKEPW,vm-password,,,3,2)
exten => *98,n,Noop(app-dialvm: Asking for mailbox again)
exten => *98,n,Read(MAILBOX,vm-incorrect-mailbox,,,3,2)
exten => *98,n,Goto(check)
exten => *98,n,Gosub(macro-hangupcall,s,1())
exten => *98,n(hangup),Playback(vm-incorrect&vm-goodbye)
exten => *98,n,Gosub(macro-hangupcall,s,1())
exten => *98,n(playret),Playback(beep&you-will-be-transfered-menu&silence/1)
exten => *98,n,Goto(${IVR_CONTEXT},return,1)

exten => _dvm.,1,Set(CONNECTEDLINE(name-charset,i)=utf8)
exten => _dvm.,n,Set(CONNECTEDLINE(name,i)=Dial Voicemail)
exten => _dvm.,n,Set(CONNECTEDLINE(num,i)=${EXTEN:3})
exten => _dvm.,n,Answer
exten => _dvm.,n,Wait(1)
exten => _dvm.,n,Gosub(macro-get-vmcontext,s,1(${EXTEN:3}))
exten => _dvm.,n,VoiceMailMain(${EXTEN:3}@${VMCONTEXT})
exten => _dvm.,n,GotoIf($["${IVR_RETVM}" = "RETURN" & "${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => _dvm.,n,Gosub(macro-hangupcall,s,1())

exten => _*98X.,hint,MWI:${EXTEN:3}@${DB(AMPUSER/${EXTEN:3}/voicemail)}
;--== end of [app-dialvm] ==--;


[app-vmblast]
include => app-vmblast-custom
exten => vmblast,1(digits),ExecIf($["${DIGITS}" != ""]?SayDigits(${DIGITS}))
exten => vmblast,n(msg),ExecIf($["${VMBMSG}" != ""]?Background(${VMBMSG}))
exten => vmblast,n,Background(if-correct-press&digits/1)
exten => vmblast,n,WaitExten(20,)
exten => vmblast,n,Playback(sorry-youre-having-problems&goodbye)
exten => vmblast,n,Hangup()

exten => 1,1,VoiceMail(${GRPLIST:1},s)
exten => 1,n,Hangup()

;--== end of [app-vmblast] ==--;


[app-allowlist]
include => app-allowlist-custom
exten => s,1,Gosub(macro-user-callerid,s,1())

exten => *38,1,Goto(app-allowlist-add,s,1)

exten => *39,1,Goto(app-allowlist-remove,s,1)

exten => *40,1,Goto(app-allowlist-last,s,1)

exten => *41,1,Goto(app-allowlist-pause-toggle,s,1)

;--== end of [app-allowlist] ==--;


[app-allowlist-check]
include => app-allowlist-check-custom
exten => s,1,GosubIf($[${DIALPLAN_EXISTS(app-allowlist-check-predial-hook,s,1)}]?app-allowlist-check-predial-hook,s,1())
exten => s,n,GotoIf($["${callerallowed}"="1"]?returnto)
exten => s,n,Gosub(app-allowlist-pause-check,s,1())
exten => s,n,GotoIf($["${DB_EXISTS(allowlist/pause)}"="1"]?returnto)
exten => s,n(check-list),GotoIf($["${DB_EXISTS(allowlist/${CALLERID(num)})}"="0"]?check-contacts)
exten => s,n,Set(CALLED_ALLOWLIST=1)
exten => s,n,Return()
exten => s,n(check-contacts),GotoIf($["${DB_EXISTS(allowlist/knowncallers)}" = "0"]?nonallowlisted)
exten => s,n,AGI(agi://127.0.0.1/allowlist-check.agi,"allowlisted")
exten => s,n,GotoIf($["${allowlisted}"="false"]?nonallowlisted)
exten => s,n,Set(CALLED_ALLOWLIST=1)
exten => s,n,Return()
exten => s,n(nonallowlisted),Noop(Caller does not apper on allowlists)
exten => s,n,Set(ALDEST=${DB(allowlist/dest)})
exten => s,n,ExecIf($["${ALDEST}"=""]?Set(ALDEST=app-blackhole,hangup,1))
exten => s,n,GotoIf($["${alreturnhere}"="1"]?returnto)
exten => s,n,GotoIf(${LEN(${ALDEST})}?${ALDEST}:app-blackhole,zapateller,1)
exten => s,n(returnto),Return()

;--== end of [app-allowlist-check] ==--;


[app-allowlist-add]
include => app-allowlist-add-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Wait(1)
exten => s,n,Set(NumLoops=0)
exten => s,n(start),Set(TIMEOUT(digit)=5)
exten => s,n,Set(TIMEOUT(response)=10)
exten => s,n,Read(allownr,enter-num-whitelist&vm-then-pound,,,,)
exten => s,n,SayDigits(${allownr})
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-allowlist-add,${CHANNEL(language)})}]?app-allowlist-add,${CHANNEL(language)},1():app-allowlist-add,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-allowlist-add,1,1)
exten => s,n,GotoIf($[ "${confirm}" = "2" ]?app-allowlist-add,2,1)
exten => s,n,Goto(app-allowlist-add-invalid,s,1)

exten => en,1,Set(TIMEOUT(digit)=1)
exten => en,n,Read(confirm,if-correct-press&digits/1&to-enter-a-diff-number&press&digits/2,,,,)
exten => en,n,Return()

exten => ja,1,Set(TIMEOUT(digit)=1)
exten => ja,n,Read(if-correct-press&digits/1&pleasepress,,,,,)
exten => ja,n,Return()

exten => 1,1,GotoIf($[ "${allownr}" != ""]?:app-allowlist-add-invalid,s,1)
exten => 1,n,Set(DB(allowlist/${allownr})=1)
exten => 1,n,Playback(num-was-successfully&added)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => 2,1,Set(NumLoops=$[${NumLoops} + 1])
exten => 2,n,GotoIf($[${NumLoops} < 3]?app-allowlist-add,s,start)
exten => 2,n,Playback(sorry-youre-having-problems&goodbye)
exten => 2,n,Hangup()

;--== end of [app-allowlist-add] ==--;


[app-allowlist-add-invalid]
include => app-allowlist-add-invalid-custom
exten => s,1,Set(NumLoops=$[${NumLoops} + 1])
exten => s,n,Playback(pm-invalid-option)
exten => s,n,GotoIf($[${NumLoops} < 3]?app-allowlist-add,s,start)
exten => s,n,Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

;--== end of [app-allowlist-add-invalid] ==--;


[app-allowlist-remove]
include => app-allowlist-remove-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Set(NumLoops=0)
exten => s,n,Wait(1)
exten => s,n(start),Set(TIMEOUT(digit)=5)
exten => s,n,Set(TIMEOUT(response)=10)
exten => s,n,Read(allownr,entr-num-rmv-allowlist&vm-then-pound,,,,)
exten => s,n,SayDigits(${allownr})
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-allowlist-remove,${CHANNEL(language)})}]?app-allowlist-remove,${CHANNEL(language)},1():app-allowlist-remove,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-allowlist-remove,1,1)
exten => s,n,GotoIf($[ "${confirm}" = "2" ]?app-allowlist-remove,2,1)
exten => s,n,Goto(app-allowlist-add-invalid,s,1)

exten => en,1,Set(TIMEOUT(digit)=1)
exten => en,n,Read(confirm,if-correct-press&digits/1&to-enter-a-diff-number&press&digits/2,,,,)
exten => en,n,Return()

exten => ja,1,Set(TIMEOUT(digit)=1)
exten => ja,n,Read(confirm,if-correct-press&digits/1&pleasepress,,,,)
exten => ja,n,Return()

exten => 1,1,Noop(Deleting: allowlist/${allownr} ${DB_DELETE(allowlist/${allownr})})
exten => 1,n,Playback(num-was-successfully&removed)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => 2,1,Set(NumLoops=$[${NumLoops} + 1])
exten => 2,n,GotoIf($[${NumLoops} < 3]?app-allowlist-remove,s,start)
exten => 2,n,Playback(goodbye)
exten => 2,n,Hangup()

;--== end of [app-allowlist-remove] ==--;


[app-allowlist-remove-invalid]
include => app-allowlist-remove-invalid-custom
exten => s,1,Set(NumLoops=$[${NumLoops} + 1])
exten => s,n,Playback(pm-invalid-option)
exten => s,n,GotoIf($[${NumLoops} < 3]?app-allowlist-remove,s,start)
exten => s,n,Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

;--== end of [app-allowlist-remove-invalid] ==--;


[app-allowlist-last]
include => app-allowlist-last-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Wait(1)
exten => s,n,Set(lastcaller=${DB(CALLTRACE/${AMPUSER})})
exten => s,n,GotoIf($[ $[ "${lastcaller}" = "" ] | $[ "${lastcaller}" = "unknown" ] ]?noinfo)
exten => s,n,Playback(privacy-to-whitelist-last-caller&telephone-number)
exten => s,n,SayDigits(${lastcaller})
exten => s,n,Set(TIMEOUT(digit)=1)
exten => s,n,Set(TIMEOUT(response)=7)
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-allowlist-last,${CHANNEL(language)})}]?app-allowlist-last,${CHANNEL(language)},1():app-allowlist-last,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-allowlist-last,1,1)
exten => s,n,Goto(end)
exten => s,n(noinfo),Playback(unidentified-no-callback)
exten => s,n,Hangup()
exten => s,n,Noop(Waiting for input)
exten => s,n(end),Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

exten => en,1,Read(confirm,if-correct-press&digits/1,,,,)
exten => en,n,Return()

exten => ja,1,Read(confirm,if-correct-press&digits/1&pleasepress,,,,)
exten => ja,n,Return()

exten => 1,1,Set(DB(allowlist/${lastcaller})=1)
exten => 1,n,Playback(num-was-successfully)
exten => 1,n,Playback(added)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => i,1,Playback(sorry-youre-having-problems&goodbye)
exten => i,n,Hangup()

;--== end of [app-allowlist-last] ==--;


[app-allowlist-pause-toggle]
include => app-allowlist-pause-toggle-custom
exten => s,1,GosubIf($[${DB_EXISTS(allowlist/pause)}]?app-allowlist-pause-disable,s,1:app-allowlist-pause-enable,s,1())
exten => s,n,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Wait(1)
exten => s,n,GotoIf($[${DB_EXISTS(allowlist/pause)}] ]?paused:unpaused)
exten => s,n(paused),Playback(dictate/pause&enabled)
exten => s,n,Hangup()
exten => s,n(unpaused),Playback(dictate/pause&disabled)
exten => s,n,Hangup()

;--== end of [app-allowlist-pause-toggle] ==--;


[app-allowlist-pause-enable]
include => app-allowlist-pause-enable-custom
exten => s,1,Noop(Current time ${EPOCH})
exten => s,n,Set(DB(allowlist/pause)=${MATH(${EPOCH}+86400,int)})
exten => s,n,Return()

;--== end of [app-allowlist-pause-enable] ==--;


[app-allowlist-pause-disable]
include => app-allowlist-pause-disable-custom
exten => s,1,Noop(Deleting: allowlist/pause ${DB_DELETE(allowlist/pause)})
exten => s,n,Return()

;--== end of [app-allowlist-pause-disable] ==--;


[app-allowlist-pause-check]
include => app-allowlist-pause-check-custom
exten => s,1,Noop(Current time ${EPOCH})
exten => s,n,Noop(Pause timer expire ${DB(allowlist/pause)})
exten => s,n,GosubIf($[${DB_EXISTS(allowlist/pause)} && "${DB(allowlist/pause)}"<"${EPOCH}"]?app-allowlist-pause-disable,s,1())
exten => s,n,Return()

;--== end of [app-allowlist-pause-check] ==--;


[app-blacklist]
include => app-blacklist-custom
exten => s,1,Gosub(macro-user-callerid,s,1())

exten => *30,1,Goto(app-blacklist-add,s,1)

exten => *31,1,Goto(app-blacklist-remove,s,1)

exten => *32,1,Goto(app-blacklist-last,s,1)

;--== end of [app-blacklist] ==--;


[app-blacklist-check]
include => app-blacklist-check-custom
exten => s,1(check),GotoIf($["${BLACKLIST()}"="1"]?blacklisted)
exten => s,n,Set(CALLED_BLACKLIST=1)
exten => s,n,Return()
exten => s,n(blacklisted),Answer
exten => s,n,Set(BLDEST=${DB(blacklist/dest)})
exten => s,n,ExecIf($["${BLDEST}"=""]?Set(BLDEST=app-blackhole,hangup,1))
exten => s,n,GotoIf($["${returnhere}"="1"]?returnto)
exten => s,n,GotoIf(${LEN(${BLDEST})}?${BLDEST}:app-blackhole,zapateller,1)
exten => s,n(returnto),Return()

;--== end of [app-blacklist-check] ==--;


[app-blacklist-add]
include => app-blacklist-add-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Wait(1)
exten => s,n,Set(NumLoops=0)
exten => s,n(start),Set(TIMEOUT(digit)=5)
exten => s,n,Set(TIMEOUT(response)=10)
exten => s,n,Read(blacknr,enter-num-blacklist&vm-then-pound,,,,)
exten => s,n,SayDigits(${blacknr})
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-blacklist-add,${CHANNEL(language)})}]?app-blacklist-add,${CHANNEL(language)},1():app-blacklist-add,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-blacklist-add,1,1)
exten => s,n,GotoIf($[ "${confirm}" = "2" ]?app-blacklist-add,2,1)
exten => s,n,Goto(app-blacklist-add-invalid,s,1)

exten => en,1,Set(TIMEOUT(digit)=1)
exten => en,n,Read(confirm,if-correct-press&digits/1&to-enter-a-diff-number&press&digits/2,,,,)
exten => en,n,Return()

exten => ja,1,Set(TIMEOUT(digit)=1)
exten => ja,n,Read(if-correct-press&digits/1&pleasepress,,,,,)
exten => ja,n,Return()

exten => 1,1,GotoIf($[ "${blacknr}" != ""]?:app-blacklist-add-invalid,s,1)
exten => 1,n,Set(DB(blacklist/${blacknr})=1)
exten => 1,n,Playback(num-was-successfully&added)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => 2,1,Set(NumLoops=$[${NumLoops} + 1])
exten => 2,n,GotoIf($[${NumLoops} < 3]?app-blacklist-add,s,start)
exten => 2,n,Playback(sorry-youre-having-problems&goodbye)
exten => 2,n,Hangup()

;--== end of [app-blacklist-add] ==--;


[app-blacklist-add-invalid]
include => app-blacklist-add-invalid-custom
exten => s,1,Set(NumLoops=$[${NumLoops} + 1])
exten => s,n,Playback(pm-invalid-option)
exten => s,n,GotoIf($[${NumLoops} < 3]?app-blacklist-add,s,start)
exten => s,n,Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

;--== end of [app-blacklist-add-invalid] ==--;


[app-blacklist-remove]
include => app-blacklist-remove-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Set(NumLoops=0)
exten => s,n,Wait(1)
exten => s,n(start),Set(TIMEOUT(digit)=5)
exten => s,n,Set(TIMEOUT(response)=10)
exten => s,n,Read(blacknr,entr-num-rmv-blklist&vm-then-pound,,,,)
exten => s,n,SayDigits(${blacknr})
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-blacklist-remove,${CHANNEL(language)})}]?app-blacklist-remove,${CHANNEL(language)},1():app-blacklist-remove,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-blacklist-remove,1,1)
exten => s,n,GotoIf($[ "${confirm}" = "2" ]?app-blacklist-remove,2,1)
exten => s,n,Goto(app-blacklist-add-invalid,s,1)

exten => en,1,Set(TIMEOUT(digit)=1)
exten => en,n,Read(confirm,if-correct-press&digits/1&to-enter-a-diff-number&press&digits/2,,,,)
exten => en,n,Return()

exten => ja,1,Set(TIMEOUT(digit)=1)
exten => ja,n,Read(confirm,if-correct-press&digits/1&pleasepress,,,,)
exten => ja,n,Return()

exten => 1,1,Noop(Deleting: blacklist/${blacknr} ${DB_DELETE(blacklist/${blacknr})})
exten => 1,n,Playback(num-was-successfully&removed)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => 2,1,Set(NumLoops=$[${NumLoops} + 1])
exten => 2,n,GotoIf($[${NumLoops} < 3]?app-blacklist-remove,s,start)
exten => 2,n,Playback(goodbye)
exten => 2,n,Hangup()

;--== end of [app-blacklist-remove] ==--;


[app-blacklist-remove-invalid]
include => app-blacklist-remove-invalid-custom
exten => s,1,Set(NumLoops=$[${NumLoops} + 1])
exten => s,n,Playback(pm-invalid-option)
exten => s,n,GotoIf($[${NumLoops} < 3]?app-blacklist-remove,s,start)
exten => s,n,Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

;--== end of [app-blacklist-remove-invalid] ==--;


[app-blacklist-last]
include => app-blacklist-last-custom
exten => s,1,Answer
exten => s,n,Gosub(macro-user-callerid,s,1())
exten => s,n,Wait(1)
exten => s,n,Set(lastcaller=${DB(CALLTRACE/${AMPUSER})})
exten => s,n,GotoIf($[ $[ "${lastcaller}" = "" ] | $[ "${lastcaller}" = "unknown" ] ]?noinfo)
exten => s,n,Playback(privacy-to-blacklist-last-caller&telephone-number)
exten => s,n,SayDigits(${lastcaller})
exten => s,n,Set(TIMEOUT(digit)=1)
exten => s,n,Set(TIMEOUT(response)=7)
exten => s,n,GosubIf($[${DIALPLAN_EXISTS(app-blacklist-last,${CHANNEL(language)})}]?app-blacklist-last,${CHANNEL(language)},1():app-blacklist-last,en,1())
exten => s,n,GotoIf($[ "${confirm}" = "1" ]?app-blacklist-last,1,1)
exten => s,n,Goto(end)
exten => s,n(noinfo),Playback(unidentified-no-callback)
exten => s,n,Hangup()
exten => s,n,Noop(Waiting for input)
exten => s,n(end),Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Hangup()

exten => en,1,Read(confirm,if-correct-press&digits/1,,,,)
exten => en,n,Return()

exten => ja,1,Read(confirm,if-correct-press&digits/1&pleasepress,,,,)
exten => ja,n,Return()

exten => 1,1,Set(DB(blacklist/${lastcaller})=1)
exten => 1,n,Playback(num-was-successfully)
exten => 1,n,Playback(added)
exten => 1,n,Wait(1)
exten => 1,n,Hangup()

exten => i,1,Playback(sorry-youre-having-problems&goodbye)
exten => i,n,Hangup()

;--== end of [app-blacklist-last] ==--;


[app-contactmanager-sd]
include => app-contactmanager-sd-custom
exten => _*10X!,1,Answer
exten => _*10X!,n,Gosub(macro-user-callerid,s,1())
exten => _*10X!,n,GotoIf($[${DB_EXISTS(CM/speeddial/${EXTEN:3})}=1]?from-internal,${DB(CM/speeddial/${EXTEN:3})},1)
exten => _*10X!,n,Goto(bad-number,s,1)

;--== end of [app-contactmanager-sd] ==--;


[macro-dial]
include => macro-dial-custom
exten => s,1,Noop(Blind Transfer: ${BLINDTRANSFER}, Attended Transfer: ${ATTENDEDTRANSFER}, User: ${AMPUSER}, Alert Info: ${ALERT_INFO})
exten => s,n,ExecIf($["${ALERT_INFO}"="" & ${LEN(${AMPUSER})}!=0 & ${LEN(${BLINDTRANSFER})}=0 & ${LEN(${ATTENDEDTRANSFER})}=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($[${LEN(${BLINDTRANSFER})}!=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($[${LEN(${ATTENDEDTRANSFER})}!=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($[("${MOHCLASS}"!="default") & ("${MOHCLASS}"!="")]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => s,n(dial),AGI(agi://127.0.0.1/dialparties.agi)
exten => s,n,GotoIf($["${MACRODIALGOTO_PRI}"!=""]?${MACRODIALGOTO_PRI})
exten => s,n,Noop(Returned from dialparties with no extensions to call and DIALSTATUS: ${DIALSTATUS})
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(normdial),Noop(Returned from dialparties with groups to dial)
exten => s,n,Noop(ringall array ${FMGL_DIAL} )
exten => s,n,Noop(ds= ${ds} )
exten => s,n,Noop(dsextra= ${dsextra})
exten => s,n,Set(ds=${ds}${dsextra})
exten => s,n,Noop(ds= ${ds})
exten => s,n,Set(__FMGL_DIAL=${FMGL_DIAL})
exten => s,n,Set(LOOPCNT=${FIELDQTY(FILTERED_DIAL,-)})
exten => s,n,Set(ITER=1)
exten => s,n(ndloopbegin),Set(__EXTTOCALL=${CUT(FILTERED_DIAL,-,${ITER})})
exten => s,n,Set(__MCEXTTOCALL=${EXTTOCALL})
exten => s,n,Noop(Working with ${EXTTOCALL})
exten => s,n,ExecIf($["${RVOL}"!=""]?Set(HASH(__SIPHEADERS,Alert-Info)=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${RVOL}))
exten => s,n,ExecIf($["${RVOL}"="" & "${DB(AMPUSER/${EXTTOCALL}/rvolume)}" != ""]?Set(HASH(__SIPHEADERS,Alert-Info)=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${DB(AMPUSER/${EXTTOCALL}/rvolume)}))
exten => s,n,Set(ITER=$[${ITER}+1])
exten => s,n,GotoIf($[${ITER}<=${LOOPCNT}]?ndloopbegin)
exten => s,n,Gosub(macro-dial-ringall-predial-hook,s,1())
exten => s,n,ExecIf($["${DB(AMPUSER/${EXTTOCALL}/cwtone)}" = "enabled" & "${EXTENSION_STATE(${EXTTOCALL})}" = "INUSE"]?Set(CWRING=r(callwaiting)):Set(CWRING=))
exten => s,n,ExecIf($["${FMFM}" = "TRUE"]?Set(RGFMDIAL=${EXTTOCALL}):Set(RGFMDIAL=${NODEST}))
exten => s,n,ExecIf($["${ivrreturn}" = "1"]?Set(ds=${ds}g))
exten => s,n(nddialapp),Gosub(dial-with-exten,${RGFMDIAL},1())
exten => s,n,Set(DIALSTATUS=${IF($["${DIALSTATUS_CW}"!="" ]?${DIALSTATUS_CW}:${DIALSTATUS})})
exten => s,n,GosubIf($[("${SCREEN}" != "" & ("${DIALSTATUS}" = "TORTURE" | "${DIALSTATUS}" = "DONTCALL"))  | "${DIALSTATUS}" = "ANSWER"]?${DIALSTATUS},1())
exten => s,n(groupnoanswer),Noop(Returning since nobody answered)
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(huntdial),Noop(Returned from dialparties with ${HuntMembers} hunt members to dial)
exten => s,n,Set(HuntLoop=0)
exten => s,n,ExecIf($[${LEN(${HuntMembers})}=0]?Set(HuntMembers=0))
exten => s,n(a22),GotoIf($[${HuntMembers} >= 1]?a30)
exten => s,n(huntnoanswer),Noop(Returning as there are no members left in the hunt group to ring)
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(a30),Set(HuntMember=HuntMember${HuntLoop})
exten => s,n,GotoIf($[$["${CALLTRACE_HUNT}" != "" ] & $[$["${RingGroupMethod}" = "hunt" ] | $["${RingGroupMethod}" = "firstavailable"] | $["${RingGroupMethod}" = "firstnotonphone"]]]?a32:a35)
exten => s,n(a32),Set(CT_EXTEN=${CUT(FILTERED_DIAL,,$[${HuntLoop} + 1])})
exten => s,n,Set(__EXTTOCALL=${CT_EXTEN})
exten => s,n,Set(__PICKUPMARK=${CT_EXTEN})
exten => s,n,Set(DB(CALLTRACE/${CT_EXTEN})=${CALLTRACE_HUNT})
exten => s,n,Goto(s,huntstart)
exten => s,n(a35),GotoIf($[$["${CALLTRACE_HUNT}" != "" ] & $["${RingGroupMethod}" = "memoryhunt" ]]?a36:a50)
exten => s,n(a36),Set(CTLoop=0)
exten => s,n(a37),GotoIf($[${CTLoop} > ${HuntLoop}]?huntstart)
exten => s,n,Set(CT_EXTEN=${CUT(FILTERED_DIAL,,$[${CTLoop} + 1])})
exten => s,n,Set(__EXTTOCALL=${CT_EXTEN})
exten => s,n,Set(DB(CALLTRACE/${CT_EXTEN})=${CALLTRACE_HUNT})
exten => s,n,Set(CTLoop=$[1 + ${CTLoop}])
exten => s,n,Goto(s,a37)
exten => s,n(huntstart),Noop(Hunt Dial Start)
exten => s,n,Set(__MCEXTTOCALL=${EXTTOCALL})
exten => s,n,ExecIf($["${RVOL}"!=""]?Set(HASH(__SIPHEADERS,Alert-Info)=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${RVOL}))
exten => s,n,ExecIf($["${RVOL}"="" & "${DB(AMPUSER/${EXTTOCALL}/rvolume)}" != ""]?Set(HASH(__SIPHEADERS,Alert-Info)=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${DB(AMPUSER/${EXTTOCALL}/rvolume)}))
exten => s,n,Gosub(macro-dial-hunt-predial-hook,s,1())
exten => s,n,ExecIf($["${DB(AMPUSER/${EXTTOCALL}/cwtone)}" = "enabled" & "${EXTENSION_STATE(${EXTTOCALL})}" = "INUSE"]?Set(CWRING=r(callwaiting)):Set(CWRING=))
exten => s,n,ExecIf($["${FMFM}" = "TRUE"]?Set(RGFMDIAL=${EXTTOCALL}):Set(RGFMDIAL=${NODEST}))
exten => s,n,ExecIf($["${ivrreturn}" = "1"]?Set(ds=${ds}g))
exten => s,n(hsdialapp),Gosub(dial-ext-with-exten,${RGFMDIAL},1())
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"]?ANSWER,1)
exten => s,n,Set(HuntLoop=$[1 + ${HuntLoop}])
exten => s,n,GotoIf($[$["${RingGroupMethod}" = "firstavailable"] | $["${RingGroupMethod}" = "firstnotonphone"]] & $[$["${DIALSTATUS}" != "CHANUNAVAIL"] & $["${DIALSTATUS}" != "CONGESTION"]]]?huntreset:a46)
exten => s,n(huntreset),Set(HuntMembers=1)
exten => s,n(a46),Set(HuntMembers=$[${HuntMembers} - 1])
exten => s,n,Goto(s,a22)
exten => s,n(a50),ExecIf($["${CT_EXTEN}"!=""]?Noop(Deleting: CALLTRACE/${CT_EXTEN} ${DB_DELETE(CALLTRACE/${CT_EXTEN})}))
exten => s,n,Goto(s,huntstart)

exten => NOANSWER,1,Gosub(macro-vm,s,1(${SCREEN_EXTEN},BUSY,${IVR_RETVM}))
exten => NOANSWER,n,GotoIf($["${IVR_RETVM}" != "RETURN" | "${IVR_CONTEXT}" = ""]?bye)
exten => NOANSWER,n,Return()
exten => NOANSWER,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => NOANSWER,n(bye),Noop(checking something else to do ?${ivrreturn}? IVR return!!)
exten => NOANSWER,n,Gosub(macro-hangupcall,s,1())

exten => TORTURE,1,Goto(app-blackhole,musiconhold,1)
exten => TORTURE,n,Gosub(macro-hangupcall,s,1())

exten => DONTCALL,1,Answer
exten => DONTCALL,n,Wait(1)
exten => DONTCALL,n,Zapateller()
exten => DONTCALL,n,Playback(ss-noservice)
exten => DONTCALL,n,Gosub(macro-hangupcall,s,1())

exten => ANSWER,1(answered),Noop(Call successfully answered - Hanging up now)
exten => ANSWER,n,GotoIf($["${CALLER_DEST}"!=""&&"${DIALSTATUS}"="ANSWER"]?${CUT(CALLER_DEST,^,1)},${CUT(CALLER_DEST,^,2)},${CUT(CALLER_DEST,^,3)})
exten => ANSWER,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => ANSWER,n(bye),Noop(checking something else to do ?${ivrreturn}? IVR return!!)
exten => ANSWER,n,Gosub(macro-hangupcall,s,1())

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [macro-dial] ==--;


[dial-with-exten]
include => dial-with-exten-custom
exten => _+X.,1,Dial(${ds}${CWRING}b(func-apply-sipheaders^s^1),)
exten => _+X.,n,Return()

exten => _X.,1,Dial(${ds}${CWRING}b(func-apply-sipheaders^s^1),)
exten => _X.,n,Return()

exten => _X,1,Dial(${ds}${CWRING}b(func-apply-sipheaders^s^1),)
exten => _X,n,Return()

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [dial-with-exten] ==--;


[dial-ext-with-exten]
include => dial-ext-with-exten-custom
exten => _[+-X].,1,Dial(${${HuntMember}}${ds}${CWRING}b(func-apply-sipheaders^s^1),)
exten => _[+-X].,n,Return()

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [dial-ext-with-exten] ==--;


[ext-local-confirm]
include => ext-local-confirm-custom
exten => _LC-.,1,ExecIf($["${DIRECTION}" = "INBOUND"]?Set(DIAL_OPTIONS=${STRREPLACE(DIAL_OPTIONS,T)}))
exten => _LC-.,n,Set(THISDIAL=${DB(DEVICE/${EXTEN:3}/dial)})
exten => _LC-.,n,GotoIf($["${THISDIAL:0:5}"!="PJSIP"]?dial)
exten => _LC-.,n,Noop(Debug: Found PJSIP Destination ${THISDIAL}, updating with PJSIP_DIAL_CONTACTS)
exten => _LC-.,n,Set(THISDIAL=${PJSIP_DIAL_CONTACTS(${EXTEN:3})})
exten => _LC-.,n(dial),Dial(${THISDIAL},${RT},${DIAL_OPTIONS}U(macro-auto-confirm^${RG_IDX})b(func-apply-sipheaders^s^1))

;--== end of [ext-local-confirm] ==--;


[findmefollow-ringallv2]
include => findmefollow-ringallv2-custom
exten => _FMPR-.,1,Set(CDR_PROP(disable)=true)
exten => _FMPR-.,n,Set(RingGroupMethod=)
exten => _FMPR-.,n,Set(USE_CONFIRMATION=)
exten => _FMPR-.,n,Set(RINGGROUP_INDEX=)
exten => _FMPR-.,n,Gosub(macro-simple-dial,s,1(${EXTEN:5},${FMREALPRERING}))
exten => _FMPR-.,n,ExecIf($["${DIALSTATUS}" = "BUSY"]?Set(SHARED(FM_DND,${FMUNIQUE})=DND))
exten => _FMPR-.,n,Hangup()

exten => _FMGL-.,1,Set(CDR_PROP(disable)=true)
exten => _FMGL-.,n,Set(DIALNUMS=${IF($[${LEN(${FMGL_DIAL})}>0]?${FMGL_DIAL}:${EXTEN:5})})
exten => _FMGL-.,n,Set(ENDLOOP=$[${EPOCH} + ${FMPRERING} + 2])
exten => _FMGL-.,n(start),GotoIf($["${SHARED(FM_DND,${FMUNIQUE})}" = "DND"]?dodnd)
exten => _FMGL-.,n,Wait(1)
exten => _FMGL-.,n,GotoIf($[${EPOCH} < ${ENDLOOP}]?start)
exten => _FMGL-.,n,Set(SHARED(FM_DND,${FMUNIQUE})=)
exten => _FMGL-.,n(dodial),Gosub(macro-dial,s,1(${FMGRPTIME},${DIAL_OPTIONS},${DIALNUMS}))
exten => _FMGL-.,n,Hangup()
exten => _FMGL-.,n+10(dodnd),Set(SHARED(FM_DND,${FMUNIQUE})=)
exten => _FMGL-.,n,GotoIf($["${FMPRIME}" = "FALSE"]?dodial)
exten => _FMGL-.,n,Hangup()

;--== end of [findmefollow-ringallv2] ==--;


[app-pickup]
include => app-pickup-custom
exten => _**.,1,Gosub(macro-user-callerid,s,1())
exten => _**.,n,Set(PICKUP_EXTEN=${AMPUSER})
exten => _**.,n,Pickup(${EXTEN:2}&${EXTEN:2}@PICKUPMARK)
exten => _**.,n,Hangup()

exten => _***80.,1,Gosub(macro-user-callerid,s,1())
exten => _***80.,n,Set(PICKUP_EXTEN=${AMPUSER})
exten => _***80.,n,Pickup(${EXTEN:5}&${EXTEN:5}@PICKUPMARK)
exten => _***80.,n,Hangup()

;--== end of [app-pickup] ==--;


[ext-test]
include => ext-test-custom
exten => 7777,1,Gosub(macro-user-callerid,s,1())
exten => 7777,n,Goto(from-pstn,${EXTEN},1)

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [ext-test] ==--;


[ext-did]
include => ext-did-custom
include => ext-did-0001
include => ext-did-0002
exten => foo,1,Noop(bar)

;--== end of [ext-did] ==--;


[ext-did-catchall]
include => ext-did-catchall-custom
exten => s,1,Noop(No DID or CID Match)
exten => s,n(a2),Answer
exten => s,n,Log(WARNING,Friendly Scanner from ${CUT(CUT(SIP_HEADER(Via), ,2),:,1)})
exten => s,n,Wait(2)
exten => s,n,Playback(ss-noservice)
exten => s,n,SayAlpha(${FROM_DID})
exten => s,n,Hangup()

exten => _.,1,Set(__FROM_DID=${EXTEN})
exten => _.,n,Noop(Received an unknown call with DID set to ${EXTEN})
exten => _.,n,Goto(s,a2)

exten => h,1,Hangup()

;--== end of [ext-did-catchall] ==--;


[ext-local]
include => ext-local-custom
exten => 1001,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1001/ringtimer)}" > "0"]?${DB(AMPUSER/1001/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1001,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1001,n,Gosub(macro-exten-vm,s,1(novm,1001,0,0,0))
exten => 1001,n(dest),Set(__PICKUPMARK=)
exten => 1001,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1001,hint,PJSIP/1001&Custom:DND1001,CustomPresence:1001

exten => 1002,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1002/ringtimer)}" > "0"]?${DB(AMPUSER/1002/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1002,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1002,n,Gosub(macro-exten-vm,s,1(novm,1002,0,0,0))
exten => 1002,n(dest),Set(__PICKUPMARK=)
exten => 1002,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1002,hint,PJSIP/1002&Custom:DND1002,CustomPresence:1002

exten => 1003,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1003/ringtimer)}" > "0"]?${DB(AMPUSER/1003/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1003,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1003,n,Gosub(macro-exten-vm,s,1(novm,1003,0,0,0))
exten => 1003,n(dest),Set(__PICKUPMARK=)
exten => 1003,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1003,hint,PJSIP/1003&Custom:DND1003,CustomPresence:1003

exten => 1004,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1004/ringtimer)}" > "0"]?${DB(AMPUSER/1004/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1004,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1004,n,Gosub(macro-exten-vm,s,1(novm,1004,0,0,0))
exten => 1004,n(dest),Set(__PICKUPMARK=)
exten => 1004,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1004,hint,PJSIP/1004&Custom:DND1004,CustomPresence:1004

exten => 1005,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1005/ringtimer)}" > "0"]?${DB(AMPUSER/1005/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1005,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1005,n,Gosub(macro-exten-vm,s,1(novm,1005,0,0,0))
exten => 1005,n(dest),Set(__PICKUPMARK=)
exten => 1005,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1005,hint,PJSIP/1005&Custom:DND1005,CustomPresence:1005

exten => 1006,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1006/ringtimer)}" > "0"]?${DB(AMPUSER/1006/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1006,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1006,n,Gosub(macro-exten-vm,s,1(novm,1006,0,0,0))
exten => 1006,n(dest),Set(__PICKUPMARK=)
exten => 1006,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1006,hint,PJSIP/1006&Custom:DND1006,CustomPresence:1006

exten => 1007,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1007/ringtimer)}" > "0"]?${DB(AMPUSER/1007/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1007,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1007,n,Gosub(macro-exten-vm,s,1(novm,1007,0,0,0))
exten => 1007,n(dest),Set(__PICKUPMARK=)
exten => 1007,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1007,hint,PJSIP/1007&Custom:DND1007,CustomPresence:1007

exten => 1008,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1008/ringtimer)}" > "0"]?${DB(AMPUSER/1008/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1008,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1008,n,Gosub(macro-exten-vm,s,1(novm,1008,0,0,0))
exten => 1008,n(dest),Set(__PICKUPMARK=)
exten => 1008,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1008,hint,PJSIP/1008&Custom:DND1008,CustomPresence:1008

exten => 1009,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1009/ringtimer)}" > "0"]?${DB(AMPUSER/1009/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1009,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1009,n,Gosub(macro-exten-vm,s,1(novm,1009,0,0,0))
exten => 1009,n(dest),Set(__PICKUPMARK=)
exten => 1009,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1009,hint,PJSIP/1009&Custom:DND1009,CustomPresence:1009

exten => 1010,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/1010/ringtimer)}" > "0"]?${DB(AMPUSER/1010/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 1010,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 1010,n,Gosub(macro-exten-vm,s,1(novm,1010,0,0,0))
exten => 1010,n(dest),Set(__PICKUPMARK=)
exten => 1010,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 1010,hint,PJSIP/1010&Custom:DND1010,CustomPresence:1010

exten => 9090,1,Set(__RINGTIMER=${IF($["${DB(AMPUSER/9090/ringtimer)}" > "0"]?${DB(AMPUSER/9090/ringtimer)}:${RINGTIMER_DEFAULT})})
exten => 9090,n,ExecIf($["${REGEX("from-queue" ${CHANNEL})}"="1" && "${CONTEXT}"="from-internal-xfer"]?Set(__CWIGNORE=))
exten => 9090,n,Gosub(macro-exten-vm,s,1(novm,9090,0,0,0))
exten => 9090,n(dest),Set(__PICKUPMARK=)
exten => 9090,n,GotoIf($["${IVR_CONTEXT}" != ""]?${IVR_CONTEXT},return,1)
exten => 9090,hint,PJSIP/9090&Custom:DND9090,CustomPresence:9090

exten => vmret,1,GotoIf($["${IVR_RETVM}" = "RETURN" & "${IVR_CONTEXT}" != ""]?playret)
exten => vmret,n,Hangup()
exten => vmret,n(playret),Playback(exited-vm-will-be-transfered&silence/1)
exten => vmret,n,Goto(${IVR_CONTEXT},return,1)

exten => h,1,Gosub(macro-hangupcall,s,1())

exten => _*80X.,hint,${DB(AMPUSER/${EXTEN:3}/hint)}
;--== end of [ext-local] ==--;


[from-did-direct-ivr]
include => from-did-direct-ivr-custom
exten => _.,1,GotoIf($["${IVR_ACCEPT_POUND}" = "1" & "${EXTEN:-1:1}" = "#"]?from-did-direct-ivr,${EXTEN:0:-1},1)
exten => _.,n,GotoIf($[${DIALPLAN_EXISTS(from-did-direct,${EXTEN},1)} = 0]?i,1)
exten => _.,n,Gosub(macro-blkvm-clr,s,1())
exten => _.,n,Set(__NODEST=)
exten => _.,n,Goto(from-did-direct,${EXTEN},1)

;--== end of [from-did-direct-ivr] ==--;


[macro-prepend-cid]
include => macro-prepend-cid-custom
exten => s,1,GotoIf($["${RGPREFIX}" = ""]?REPCID)
exten => s,n,GotoIf($["${RGPREFIX}" != "${CALLERID(name):0:${LEN(${RGPREFIX})}}"]?REPCID)
exten => s,n,Set(CALLERID(name)=${CALLERID(name):${LEN(${RGPREFIX})}})
exten => s,n,Set(_RGPREFIX=)
exten => s,n(REPCID),Set(_RGPREFIX=${ARG1})
exten => s,n,Set(CALLERID(name)=${RGPREFIX}${CALLERID(name)})
exten => s,n,Return()

;--== end of [macro-prepend-cid] ==--;


[outbound-allroutes]
include => outbound-allroutes-custom
exten => foo,1,Noop(bar)

;--== end of [outbound-allroutes] ==--;


[macro-outisbusy]
include => macro-outisbusy-custom
exten => s,1,Progress
exten => s,n,GotoIf($["${EMERGENCYROUTE}" = "YES"]?emergency,1)
exten => s,n,GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?intracompany,1)
exten => s,n,Playback(all-circuits-busy-now&please-try-call-later, noanswer)
exten => s,n,Congestion(20)
exten => s,n,Hangup()

exten => intracompany,1,Playback(all-circuits-busy-now&please-try-call-later, noanswer)
exten => intracompany,n,Congestion(20)
exten => intracompany,n,Hangup()

exten => emergency,1,Playback(all-circuits-busy-now&please-try-call-later)
exten => emergency,n,Congestion(20)
exten => emergency,n,Hangup()

;--== end of [macro-outisbusy] ==--;


[app-blackhole]
include => app-blackhole-custom
exten => hangup,1,Noop(Blackhole Dest: Hangup)
exten => hangup,n,Hangup()

exten => zapateller,1,Noop(Blackhole Dest: Play SIT Tone)
exten => zapateller,n,Answer
exten => zapateller,n,Zapateller()

exten => musiconhold,1,Noop(Blackhole Dest: Put caller on hold forever)
exten => musiconhold,n,Answer
exten => musiconhold,n,MusicOnHold()

exten => congestion,1,Noop(Blackhole Dest: Congestion)
exten => congestion,n,Progress
exten => congestion,n,Playtones(congestion)
exten => congestion,n,Congestion(20)
exten => congestion,n,Hangup()

exten => busy,1,Noop(Blackhole Dest: Busy)
exten => busy,n,Progress
exten => busy,n,Busy(20)
exten => busy,n,Hangup()

exten => ring,1,Noop(Blackhole Dest: Ring)
exten => ring,n,Answer
exten => ring,n,Playtones(ring)
exten => ring,n,Wait(300)
exten => ring,n,Hangup()

exten => no-service,1,Noop(Blackhole Dest: No service)
exten => no-service,n,Answer
exten => no-service,n,Wait(1)
exten => no-service,n,Zapateller()
exten => no-service,n,Playback(ss-noservice)
exten => no-service,n,Hangup()

;--== end of [app-blackhole] ==--;


[bad-number]
include => bad-number-custom
exten => _X.,1,ResetCDR()
exten => _X.,n,Set(CDR_PROP(disable)=true)
exten => _X.,n,Progress
exten => _X.,n,Wait(1)
exten => _X.,n,Playback(silence/1&cannot-complete-as-dialed&check-number-dial-again,noanswer)
exten => _X.,n,Wait(1)
exten => _X.,n,Congestion(20)
exten => _X.,n,Hangup()

exten => s,1,Goto(11,1)

;--== end of [bad-number] ==--;


[sub-presencestate-display]
include => sub-presencestate-display-custom
exten => s,1,Goto(state-${TOLOWER(${PRESENCE_STATE(CustomPresence:${ARG1},value)})},1)

exten => state-available,1,Set(PRESENCESTATE_DISPLAY=(Available))
exten => state-available,n,Return()

exten => state-chat,1,Set(PRESENCESTATE_DISPLAY=(Chat))
exten => state-chat,n,Return()

exten => state-away,1,Set(PRESENCESTATE_DISPLAY=(Away))
exten => state-away,n,Return()

exten => state-dnd,1,Set(PRESENCESTATE_DISPLAY=(DND))
exten => state-dnd,n,Return()

exten => state-xa,1,Set(PRESENCESTATE_DISPLAY=(Extended Away))
exten => state-xa,n,Return()

exten => state-unavailable,1,Set(PRESENCESTATE_DISPLAY=(Unavailable))
exten => state-unavailable,n,Return()

exten => _state-.,1,Set(PRESENCESTATE_DISPLAY=)
exten => _state-.,n,Return()

exten => state-,1,Set(PRESENCESTATE_DISPLAY=)
exten => state-,n,Return()

;--== end of [sub-presencestate-display] ==--;


[macro-confirm]
include => macro-confirm-custom
exten => s,1,Set(LOOPCOUNT=0)
exten => s,n,Set(__GOSUB_RESULT=ABORT)
exten => s,n,Noop(${ALT_CONFIRM_MSG} and arv= ${ARG1})
exten => s,n,ExecIf($["${ALT_CONFIRM_MSG}"="default"]?Set(ARG1=))
exten => s,n,ExecIf($["${ALT_CONFIRM_MSG}"="default"]?Set(ALT_CONFIRM_MSG=))
exten => s,n,Set(MSG1=${IF($["${ARG1}${ALT_CONFIRM_MSG}"=""]?incoming-call-1-accept-2-decline:${IF($[${LEN(${ALT_CONFIRM_MSG})}>0]?${ALT_CONFIRM_MSG}:${ARG1})})})
exten => s,n(start),Background(${MSG1},m,${CHANNEL(language)},macro-confirm)
exten => s,n,Read(INPUT,,1,,,4)
exten => s,n,GotoIf($[${LEN(${INPUT})} > 0]?${INPUT},1:t,1)

exten => 1,1,GotoIf($["${DB_EXISTS(RG/${ARG3}/${UNIQCHAN})}"="0"  & "${SHARED(ANSWER_STATUS,${FORCE_CONFIRM})}"=""]?toolate,1)
exten => 1,n,GotoIf($["${BLKVM_CHANNEL}" !="" & "${DB_EXISTS(RG/${ARG3}/${UNIQCHAN})}"="0" & "${SHARED(ANSWER_STATUS,${BLKVM_CHANNEL})}"=""]?toolate,1)
exten => 1,n,Set(cfchannel=${IF($[${REGEX("/from-queue/" ${UNIQCHAN})}]?${UNIQCHAN}:${BLKVM_CHANNEL})})
exten => 1,n,GotoIf($["${SHARED(BLKVM,${cfchannel})}"="" & "${QCALLBACK}"=""]?toolate,1)
exten => 1,n,Noop(Deleting: RG/${ARG3}/${UNIQCHAN} ${DB_DELETE(RG/${ARG3}/${UNIQCHAN})})
exten => 1,n,Gosub(macro-blkvm-clr,s,1())
exten => 1,n,Set(SHARED(ANSWER_STATUS,${FORCE_CONFIRM})=)
exten => 1,n(skip),Set(__GOSUB_RESULT=)
exten => 1,n,ExecIf($[("${MOHCLASS}"!="default") & ("${MOHCLASS}"!="")]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => 1,n(exitopt1),Return(${GOSUB_RETVAL})

exten => 2,1,Goto(noanswer,1)

exten => 3,1,SayDigits(${CALLCONFIRMCID})
exten => 3,n,GotoIf($["${DB_EXISTS(RG/${ARG3}/${UNIQCHAN})}"="0" & "${SHARED(ANSWER_STATUS,${FORCE_CONFIRM})}"=""]?toolate,1:s,start)

exten => t,1,GotoIf($["${DB_EXISTS(RG/${ARG3}/${UNIQCHAN})}"="0" & "${SHARED(ANSWER_STATUS,${FORCE_CONFIRM})}"=""]?toolate,1)
exten => t,n,Set(LOOPCOUNT=$[ ${LOOPCOUNT} + 1 ])
exten => t,n,GotoIf($[ ${LOOPCOUNT} < 5 ]?s,start:noanswer,1)

exten => _X,1,Background(invalid,m,${CHANNEL(language)},macro-confirm)
exten => _X,n,GotoIf($["${DB_EXISTS(RG/${ARG3}/${UNIQCHAN})}"="0" | "${SHARED(ANSWER_STATUS,${FORCE_CONFIRM})}"=""]?toolate,1)
exten => _X,n,Set(LOOPCOUNT=$[ ${LOOPCOUNT} + 1 ])
exten => _X,n,GotoIf($[ ${LOOPCOUNT} < 5 ]?s,start:noanswer,1)

exten => noanswer,1,Set(__GOSUB_RESULT=ABORT)
exten => noanswer,n(exitnoanswer),Hangup()

exten => toolate,1,Set(MSG2=${IF($["foo${ARG2}" != "foo"]?${ARG2}:"incoming-call-no-longer-avail")})
exten => toolate,n,Playback(${MSG2})
exten => toolate,n,Set(__GOSUB_RESULT=ABORT)
exten => toolate,n(exittoolate),Hangup()

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [macro-confirm] ==--;


[macro-auto-confirm]
include => macro-auto-confirm-custom
exten => s,1,Set(__GOSUB_RESULT=)
exten => s,n,Set(CFIGNORE=)
exten => s,n,Set(MASTER_CHANNEL(CFIGNORE)=)
exten => s,n,Set(FORWARD_CONTEXT=from-internal)
exten => s,n,Set(MASTER_CHANNEL(FORWARD_CONTEXT)=from-internal)
exten => s,n,Gosub(macro-blkvm-clr,s,1())
exten => s,n,Noop(Deleting: RG/${ARG1}/${UNIQCHAN} ${DB_DELETE(RG/${ARG1}/${UNIQCHAN})})
exten => s,n,ExecIf($[!${REGEX("[^0-9]" ${DIALEDPEERNUMBER})} && "${DB(AMPUSER/${AMPUSER}/cidname)}" != ""]?Set(MASTER_CHANNEL(CONNECTEDLINE(num))=${DIALEDPEERNUMBER}))
exten => s,n,ExecIf($[!${REGEX("[^0-9]" ${DIALEDPEERNUMBER})} && "${DB(AMPUSER/${AMPUSER}/cidname)}" != ""]?Set(MASTER_CHANNEL(CONNECTEDLINE(name))=${DB(AMPUSER/${DIALEDPEERNUMBER}/cidname)}))
exten => s,n,Return()

;--== end of [macro-auto-confirm] ==--;


[sub-pincheck]
include => sub-pincheck-custom
exten => s,1,Authenticate(${ARG1},)
exten => s,n,ResetCDR()
exten => s,n,Return()

;--== end of [sub-pincheck] ==--;


[sub-send-obroute-email]
include => sub-send-obroute-email-custom
exten => s,1,GosubIf($["${ARG8}"!="" ]?macro-setmusic,s,1(${ARG8}))
exten => s,n,GotoIf($["${FORCE_CONFIRM}"!="" ]?gosubconfirm:normal)
exten => s,n(gosubconfirm),Gosub(macro-confirm,s,1())
exten => s,n(normal),GotoIf($["${EMAILNOTIFICATION}" = "TRUE"]?sendEmail)
exten => s,n,Noop(email notifications disabled..exiting.)
exten => s,n,Return()
exten => s,n(sendEmail),AGI(agi://127.0.0.1/outboundRouteEmail.php,${ARG1},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6},${ROUTEID},${ROUTENAME},${CALLERIDNAMEINTERNAL},${CALLERIDNUMINTERNAL},${CHANNEL(LINKEDID)},${HOTDESKEXTEN},${EMERGENCYROUTE})
exten => s,n,Return()

;--== end of [sub-send-obroute-email] ==--;


[macro-privacy-mgr]
include => macro-privacy-mgr-custom
exten => s,1,Set(KEEPCID=${CALLERID(num)})
exten => s,n,Set(TESTCID=${IF($["${CALLERID(num):0:1}"="+"]?${MATH(1+${CALLERID(num):1})}:${MATH(1+${CALLERID(num)})})})
exten => s,n,ExecIf($[${LEN(${TESTCID})}=0]?Set(CALLERID(num)=))
exten => s,n,PrivacyManager(${ARG1},${ARG2})
exten => s,n,GotoIf($["${PRIVACYMGRSTATUS}"="FAILED"]?fail)
exten => s,n,GosubIf($["${CALLED_BLACKLIST}"="1"]?app-blacklist-check,s,1())
exten => s,n,Set(CALLERID(num-pres)=allowed_passed_screen)
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(fail),Noop(STATUS: ${PRIVACYMGRSTATUS} CID: ${CALLERID(num)} ${CALLERID(name)} CALLPRES: ${CALLLINGPRES})
exten => s,n,Playback(sorry-youre-having-problems&goodbye)
exten => s,n,Playtones(congestion)
exten => s,n,Congestion(20)

exten => h,1,Hangup()

;--== end of [macro-privacy-mgr] ==--;


[macro-user-callerid]
include => macro-user-callerid-custom
exten => lang-playback,1,GosubIf($[${DIALPLAN_EXISTS(macro-user-callerid,${CHANNEL(language)})}]?macro-user-callerid,${CHANNEL(language)},${ARG1}():macro-user-callerid,en,${ARG1}())
exten => lang-playback,n,Return()

exten => s,1,Set(TOUCH_MONITOR=${UNIQUEID})
exten => s,n,Set(CHANCONTEXT=${CUT(CHANNEL,@,2)})
exten => s,n,Set(CHANCONTEXT=${CUT(CHANCONTEXT,-,1)})
exten => s,n,Set(CHANEXTENCONTEXT=${CUT(CHANNEL,/,2)})
exten => s,n,Set(CHANEXTEN=${CUT(CHANEXTENCONTEXT,@,1)})
exten => s,n,Set(CALLERID(number)=${IF($["${CHANCONTEXT}" = "webcallback"]?${CHANEXTEN}:${CALLERID(number)})})
exten => s,n,Set(AMPUSER=${IF($["${AMPUSER}" = ""]?${CALLERID(number)}:${AMPUSER})})
exten => s,n,Set(HOTDESCKCHAN=${CUT(CHANNEL,/,2)})
exten => s,n,Set(HOTDESKEXTEN=${CUT(HOTDESCKCHAN,-,1)})
exten => s,n,Set(HOTDESKCALL=0)
exten => s,n,ExecIf($["${DB(EDEVICE/${HOTDESKEXTEN}/user)}"="DummyUser"]?Set(HOTDESKCALL=1))
exten => s,n,ExecIf($[${HOTDESKCALL}=1]?Set(CALLERID(name)=${DB(EDEVICE/${HOTDESKEXTEN}/location)}))
exten => s,n,GotoIf($["${CUT(CHANNEL,@,2):5:5}"="queue" | ${LEN(${AMPUSERCIDNAME})}]?report)
exten => s,n,ExecIf($["${REALCALLERIDNUM:1:2}" = ""]?Set(REALCALLERIDNUM=${CALLERID(number)}))
exten => s,n,Set(AMPUSER=${DB(DEVICE/${REALCALLERIDNUM}/user)})
exten => s,n,GotoIf($["${AMPUSER}" = "none"]?limit)
exten => s,n,Set(AMPUSERCIDNAME=${DB(AMPUSER/${AMPUSER}/cidname)})
exten => s,n,ExecIf($["${ARG2}" != "EXTERNAL" & ${DB_EXISTS(AMPUSER/${AMPUSER}/cidnum)} & "${AMPUSER}" != "${DB(AMPUSER/${AMPUSER}/cidnum)}"]?Set(__CIDMASQUERADING=TRUE))
exten => s,n,GotoIf($["${AMPUSERCIDNAME:1:2}" = ""]?report)
exten => s,n,Set(AMPUSERCID=${IF($["${ARG2}" != "EXTERNAL" & "${DB_EXISTS(AMPUSER/${AMPUSER}/cidnum)}" = "1"]?${DB_RESULT}:${AMPUSER})})
exten => s,n,Set(__DIAL_OPTIONS=${IF($["${DB_EXISTS(AMPUSER/${AMPUSER}/dialopts)}" = "1"]?${DB_RESULT}:${DIAL_OPTIONS})})
exten => s,n,Set(CALLERID(all)="${AMPUSERCIDNAME}" <${AMPUSERCID}>)
exten => s,n,ExecIf($["${DB(DEVICE/${ARG2}/tech)}"="custom"]?Set(CUSDIAL=${CUT(CUT(DB(DEVICE/${ARG2}/dial),/,2),@,1)}))
exten => s,n,ExecIf($["${DB(DEVICE/${ARG2}/tech)}"="custom" & "${DB(DEVICE/${CUSDIAL}/type)}" =""]?Set(CALLERID(all)=${IF($[${LEN(${DB(AMPUSER/${ARG2}/outboundcid)})}]?${DB(AMPUSER/${ARG2}/outboundcid)}:${CALLERID(all)})}))
exten => s,n,GotoIf($["${ARG1}"="LIMIT" & ${LEN(${AMPUSER})} & ${DB_EXISTS(AMPUSER/${AMPUSER}/concurrency_limit)} & ${DB(AMPUSER/${AMPUSER}/concurrency_limit)}>0 & ${GROUP_COUNT(${AMPUSER}@concurrency_limit)}>=${DB(AMPUSER/${AMPUSER}/concurrency_limit)}]?limit)
exten => s,n,ExecIf($["${ARG1}"="LIMIT" & ${LEN(${AMPUSER})}]?Set(GROUP(concurrency_limit)=${AMPUSER}))
exten => s,n,ExecIf($["${DB(AMPUSER/${AMPUSER}/language)}" != ""]?Set(CHANNEL(language)=${DB(AMPUSER/${AMPUSER}/language)}))
exten => s,n(report),Noop(Macro depricated!! To keep the same line numbers)
exten => s,n,Noop(Macro depricated !!  To keep the same line numbers)
exten => s,n(report2),GotoIf($[ "${ARG1}" = "SKIPTTL" | "${ARG1}" = "LIMIT" ]?continue)
exten => s,n,ExecIf($["${CALLEE_ACCOUNCODE}" = ""]?Set(__CALLEE_ACCOUNCODE=${DB(AMPUSER/${IF($["${ARG6}"="macro-exten-vm"]?${ARG2}:${ARG1})}/accountcode)}))
exten => s,n(report3),Set(__TTL=${IF($["foo${TTL}" = "foo"]?64:$[ ${TTL} - 1 ])})
exten => s,n,GotoIf($[ ${TTL} > 0 ]?continue)
exten => s,n,Wait(${RINGTIMER})
exten => s,n,Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,lang-playback,1(hook_0))
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(macroerror),Noop(Macro Limit Reached. Aborting Call)
exten => s,n,Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,lang-playback,1(hook_2))
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n(limit),Answer
exten => s,n,Wait(1)
exten => s,n,Gosub(macro-user-callerid,lang-playback,1(hook_1))
exten => s,n,Gosub(macro-hangupcall,s,1())
exten => s,n,Congestion(20)
exten => s,n(continue),Set(CALLERID(number)=${CALLERID(number):0:40})
exten => s,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => s,n,GotoIf($["${CALLERID(name)}" = ""]?cnum)
exten => s,n,Set(__MCNUM=${CALLERID(num)})
exten => s,n,Set(__MCNAME=${CALLERID(name)})
exten => s,n,Set(__MCEXTEN=${AMPUSER})
exten => s,n,Set(__MCORGCHAN=${CHANNEL})
exten => s,n,Set(CDR(cnam)=${CALLERID(name)})
exten => s,n(cnum),Set(CDR(cnum)=${CALLERID(num)})
exten => s,n(return),Return()
exten => s,n,Set(CHANNEL(language)=${MASTER_CHANNEL(CHANNEL(language))})

exten => h,1,Gosub(macro-hangupcall,s,1())

exten => en,1(hook_0),Playback(im-sorry&an-error-has-occurred&with&call-forwarding)
exten => en,n,Return()
exten => en,n(hook_1),Playback(beep&im-sorry&your&simul-call-limit-reached&goodbye)
exten => en,n,Return()
exten => en,n(hook_2),Playback(im-sorry&an-error-has-occurred)
exten => en,n,Return()

exten => ja,1(hook_0),Playback(im-sorry&call-forwarding&jp-no&an-error-has-occured)
exten => ja,n,Return()
exten => ja,n(hook_1),Playback(beep&im-sorry&simul-call-limit-reached)
exten => ja,n,Return()
exten => ja,n(hook_2),Playback(im-sorry&an-error-has-occured)
exten => ja,n,Return()

;--== end of [macro-user-callerid] ==--;


[macro-outbound-callerid]
include => macro-outbound-callerid-custom
exten => s,1,Noop(${REALCALLERIDNUM})
exten => s,n,Noop(${KEEPCID})
exten => s,n,Noop(${OUTKEEPCID_${ARG1}})
exten => s,n,ExecIf($["${CALLINGNAMEPRES_SV}" != ""]?Set(CALLERID(name-pres)=${CALLINGNAMEPRES_SV}))
exten => s,n,ExecIf($["${CALLINGNUMPRES_SV}" != ""]?Set(CALLERID(num-pres)=${CALLINGNUMPRES_SV}))
exten => s,n,Set(HOTDESCKCHAN=${CUT(CHANNEL,/,2)})
exten => s,n,Set(HOTDESKEXTEN=${CUT(HOTDESCKCHAN,-,1)})
exten => s,n,Set(HOTDESKCALL=0)
exten => s,n,ExecIf($["${DB(EDEVICE/${HOTDESKEXTEN}/user)}"="DummyUser"]?Set(HOTDESKCALL=1))
exten => s,n,ExecIf($[${HOTDESKCALL}=1]?Set(CALLERID(name)=${DB(EDEVICE/${HOTDESKEXTEN}/location)}))
exten => s,n,Set(ALLOWTHISROUTE=NO)
exten => s,n,ExecIf($["${EMERGENCYROUTE}" = "YES"]?Set(ALLOWTHISROUTE=YES))
exten => s,n,ExecIf($[${HOTDESKCALL}= 1 & ${ALLOWTHISROUTE} = NO ]?Hangup())
exten => s,n,ExecIf($["${REALCALLERIDNUM:1:2}" = ""]?Set(REALCALLERIDNUM=${CALLERID(number)}))
exten => s,n,ExecIf($[$["${CIDMASQUERADING}" = "TRUE"] & $[$["${AMPUSER}" = ""] | $["${AMPUSER}" = "${DB(AMPUSER/${FROMEXTEN}/cidnum)}"]]]?Set(AMPUSER=${FROMEXTEN}))
exten => s,n(start),GotoIf($[ $[${LEN(${REALCALLERIDNUM})} = 0] | $["${KEEPCID}" != "TRUE"] | $["${OUTKEEPCID_${ARG1}}" = "on"] ]?normcid)
exten => s,n,Set(USEROUTCID=${CALLERID(name)} <${REALCALLERIDNUM}>)
exten => s,n,GotoIf($["${CIDMASQUERADING}" = "TRUE"]?normcid)
exten => s,n,GotoIf($["${DB(AMPUSER/${REALCALLERIDNUM}/device)}" = "" & "${DB(DEVICE/${REALCALLERIDNUM}/user)}" = ""]?bypass)
exten => s,n(normcid),Set(USEROUTCID=${DB(AMPUSER/${AMPUSER}/outboundcid)})
exten => s,n(bypass),Set(EMERGENCYCID=${DB(DEVICE/${REALCALLERIDNUM}/emergency_cid)})
exten => s,n(hotdesk),ExecIf($[${HOTDESKCALL}= 1]?Set(EMERGENCYCID=${DB(EDEVICE/${HOTDESKEXTEN}/emergency_cid)}))
exten => s,n,Set(TRUNKOUTCID=${OUTCID_${ARG1}})
exten => s,n,GotoIf($["${EMERGENCYROUTE:1:2}" = "" | "${EMERGENCYCID:1:2}" = ""]?trunkcid)
exten => s,n,Set(CALLERID(all)=${EMERGENCYCID})
exten => s,n,GotoIf($["${CALLERID(name)}" = ""]?cnum)
exten => s,n,Set(CDR(outbound_cnam)=${CALLERID(name)})
exten => s,n(cnum),Set(CDR(outbound_cnum)=${CALLERID(num)})
exten => s,n(exit),Return(${GOSUB_RETVAL})
exten => s,n(trunkcid),ExecIf($[${LEN(${TRUNKOUTCID})} != 0]?Set(CALLERID(all)=${TRUNKOUTCID}))
exten => s,n(usercid),ExecIf($[${LEN(${USEROUTCID})} != 0]?Set(CALLERID(all)=${USEROUTCID}))
exten => s,n,ExecIf($[${LEN(${TRUNKCIDOVERRIDE})} != 0 | ${LEN(${FORCEDOUTCID_${ARG1}})} != 0]?Set(CALLERID(all)=${IF($[${LEN(${FORCEDOUTCID_${ARG1}})}=0]?${TRUNKCIDOVERRIDE}:${FORCEDOUTCID_${ARG1}})}))
exten => s,n,ExecIf($["${QCALLBACK}" = "1" & ${LEN(${FORCEDOUTCID_${ARG1}})} = 0]?Set(CALLERID(all)=${REALCALLERIDNUM}))
exten => s,n,ExecIf($[${LEN(${CALLERIDNUMINTERNAL})} = 0 & ${LEN(${AMPUSER})} = 0 &  ${LEN(${USEROUTCID})} = 0 & "${OUTKEEPCID_${ARG1}}" ="off" & ${LEN(${REALCALLERIDNUM})} != 0 ]?Set(CALLERID(all)=${REALCALLERIDNUM}))
exten => s,n,Set(TIOHIDE=no)
exten => s,n(hidecid),ExecIf($["${CALLERID(name)}"="hidden"]?Set(CALLERID(name-pres)=prohib_passed_screen))
exten => s,n,ExecIf($["${CALLERID(name)}"="hidden"]?Set(CALLERID(num-pres)=prohib_passed_screen))
exten => s,n,ExecIf($["${TIOHIDE}"="yes"]?Set(CALLERID(name-pres)=prohib_passed_screen))
exten => s,n,ExecIf($["${TIOHIDE}"="yes"]?Set(CALLERID(num-pres)=prohib_passed_screen))
exten => s,n,Set(CDR(outbound_cnum)=${CALLERID(num)})
exten => s,n,Set(CDR(outbound_cnam)=${CALLERID(name)})
exten => s,n,Return()

;--== end of [macro-outbound-callerid] ==--;


[from-zaptel]
include => from-zaptel-custom
include => from-dahdi
exten => foo,1,Noop(bar)

;--== end of [from-zaptel] ==--;


[from-dahdi]
include => from-dahdi-custom
exten => _X.,1,Set(DID=${EXTEN})
exten => _X.,n,Goto(s,1)

exten => s,1,Noop(Entering from-dahdi with DID == ${DID})
exten => s,n,Ringing()
exten => s,n,Set(DID=${IF($["${DID}"= ""]?s:${DID})})
exten => s,n,Noop(DID is now ${DID})
exten => s,n,GotoIf($["${CHANNEL:0:5}"="DAHDI"]?dahdiok:checkzap)
exten => s,n(checkzap),GotoIf($["${CHANNEL:0:3}"="Zap"]?zapok:neither)
exten => s,n(neither),Goto(from-pstn,${DID},1)
exten => s,n,Gosub(macro-Hangupcall,s,1(dummy))
exten => s,n(dahdiok),Noop(Is a DAHDi Channel)
exten => s,n,Set(CHAN=${CHANNEL:6})
exten => s,n,Set(CHAN=${CUT(CHAN,-,1)})
exten => s,n,Gosub(macro-from-dahdi-${CHAN},s,1(${DID},1))
exten => s,n,Noop(Returned from Macro from-dahdi-${CHAN})
exten => s,n,Goto(from-pstn,${DID},1)
exten => s,n(zapok),Noop(Is a Zaptel Channel)
exten => s,n,Set(CHAN=${CHANNEL:4})
exten => s,n,Set(CHAN=${CUT(CHAN,-,1)})
exten => s,n,Gosub(macro-from-dahdi-${CHAN},s,1(${DID},1))
exten => s,n,Noop(Returned from Macro from-dahdi-${CHAN})
exten => s,n,Goto(from-pstn,${DID},1)

;--== end of [from-dahdi] ==--;


[macro-dial-confirm]
include => macro-dial-confirm-custom
exten => s,1,Set(DB(RG/${ARG4}/${CHANNEL})=RINGING)
exten => s,n,Set(__UNIQCHAN=${CHANNEL})
exten => s,n,Set(USE_CONFIRMATION=TRUE)
exten => s,n,Set(RINGGROUP_INDEX=${ARG4})
exten => s,n,Set(FORCE_CONFIRM=)
exten => s,n,Set(ARG4=)
exten => s,n,Gosub(macro-dial,s,1(${ARG1},${ARG2},${ARG3}))
exten => s,n,Noop(Deleting: RG/${RINGGROUP_INDEX}/${CHANNEL} ${DB_DELETE(RG/${RINGGROUP_INDEX}/${CHANNEL})})
exten => s,n,Set(USE_CONFIRMATION=)
exten => s,n,Set(RINGGROUP_INDEX=)
exten => s,n,Return()

;--== end of [macro-dial-confirm] ==--;


[macro-setmusic]
include => macro-setmusic-custom
exten => s,1,Set(CHANNEL(musicclass)=${ARG1})
exten => s,n,Return()

;--== end of [macro-setmusic] ==--;


[macro-block-cf]
include => macro-block-cf-custom
exten => _X.,1,Hangup()

;--== end of [macro-block-cf] ==--;


[macro-vm]
include => macro-vm-custom
exten => s,1,Gosub(macro-user-callerid,s,1(SKIPTTL))
exten => s,n,Set(VMGAIN=${IF($["foo${VM_GAIN}"!="foo"]?"g(${VM_GAIN})": )})
exten => s,n,Gosub(macro-blkvm-check,s,1())
exten => s,n,GotoIf($["${GOSUB_RETVAL}" != "TRUE"]?vmx,1)
exten => s,n,Hangup()

exten => vmx,1,Set(MEXTEN=${ARG1})
exten => vmx,n,Set(MMODE=${ARG2})
exten => vmx,n,Set(RETVM=${ARG3})
exten => vmx,n,Set(MODE=${IF($["${MMODE}"="BUSY"]?busy:unavail)})
exten => vmx,n,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => vmx,n,Set(MODE=${IF($[(${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/temp.wav)} = 1) || (${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/temp.WAV)} = 1)]?temp:${MODE})})
exten => vmx,n,Noop(MODE IS: ${MODE})
exten => vmx,n,GotoIf($["${DB(AMPUSER/${MEXTEN}/vmx/${MODE}/state)}" != "enabled"]?chknomsg)
exten => vmx,n,Set(VM_OPTS=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/vmxopts/timeout)}" = "1"]?${DB_RESULT}:${VM_OPTS})})
exten => vmx,n(chknomsg),GotoIf($["${MMODE}"="NOMESSAGE"]?s-${MMODE},1)
exten => vmx,n,GotoIf($["${MMODE}" != "DIRECTDIAL"]?notdirect)
exten => vmx,n,Set(MODE=${IF($["${REGEX("[b]" ${VM_DDTYPE})}" = "1"]?busy:${MODE})})
exten => vmx,n(notdirect),Noop(Checking if ext ${MEXTEN} is enabled: ${DB(AMPUSER/${MEXTEN}/vmx/${MODE}/state)})
exten => vmx,n,GotoIf($["${DB(AMPUSER/${MEXTEN}/vmx/${MODE}/state)}" != "enabled"]?s-${MMODE},1)
exten => vmx,n,GotoIf($[(${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/temp.wav)} = 1) || (${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/temp.WAV)} = 1)]?tmpgreet)
exten => vmx,n,GotoIf($[(${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/${MODE}.wav)} = 0) && (${STAT(f,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/${MODE}.WAV)} = 0)]?nofile)
exten => vmx,n,Set(VMX_TIMEOUT=2)
exten => vmx,n,Set(VMX_REPEAT=1)
exten => vmx,n,Set(VMX_LOOPS=1)
exten => vmx,n,Set(LOOPCOUNT=0)
exten => vmx,n,Set(VMX_REPEAT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/repeat)}" = "1"]?${DB_RESULT}:${VMX_REPEAT})})
exten => vmx,n(vmxtime),Set(VMX_TIMEOUT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/timeout)}" = "1"]?${DB_RESULT}:${VMX_TIMEOUT})})
exten => vmx,n(vmxloops),Set(VMX_LOOPS=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/loops)}" = "1"]?${DB_RESULT}:${VMX_LOOPS})})
exten => vmx,n(vmxanswer),Answer
exten => vmx,n(loopstart),Read(ACTION,${ASTSPOOLDIR}/voicemail/${VMCONTEXT}/${MEXTEN}/${MODE},1,si,${VMX_REPEAT},${VMX_TIMEOUT})
exten => vmx,n,GotoIf($["${EXISTS(${ACTION})}" = "1"]?checkopt)
exten => vmx,n(noopt),Noop(Timeout: going to timeout dest)
exten => vmx,n,Set(VMX_OPTS=${DB(AMPUSER/${MEXTEN}/vmx/${MODE}/vmxopts/timeout)})
exten => vmx,n(chktime),GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/timedest/ext)}" = "0"]?dotime)
exten => vmx,n,Set(VMX_TIMEDEST_EXT=${DB_RESULT})
exten => vmx,n,Set(VMX_TIMEDEST_CONTEXT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/timedest/context)}" = "1"]?${DB_RESULT}:${VMX_TIMEDEST_CONTEXT})})
exten => vmx,n(timepri),Set(VMX_TIMEDEST_PRI=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/timedest/pri)}" = "1"]?${DB_RESULT}:${VMX_TIMEDEST_PRI})})
exten => vmx,n(dotime),Goto(${VMX_TIMEDEST_CONTEXT},${VMX_TIMEDEST_EXT},${VMX_TIMEDEST_PRI})
exten => vmx,n(checkopt),GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/${ACTION}/ext)}" = "1"]?doopt)
exten => vmx,n,GotoIf($["${ACTION}" = "0"]?o,1)
exten => vmx,n,GotoIf($["${ACTION}" = "*"]?adef,1)
exten => vmx,n,Set(LOOPCOUNT=$[${LOOPCOUNT} + 1])
exten => vmx,n,GotoIf($["${LOOPCOUNT}" > "${VMX_LOOPS}"]?toomany)
exten => vmx,n,Playback(pm-invalid-option&please-try-again)
exten => vmx,n,Goto(loopstart)
exten => vmx,n(toomany),Noop(Too Many invalid entries, got to invalid dest)
exten => vmx,n,Set(VMX_OPTS=${VMX_OPTS_LOOP})
exten => vmx,n,Set(VMX_OPTS=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/vmxopts/loops)}" = "1"]?${DB_RESULT}:${VMX_OPTS})})
exten => vmx,n(chkloop),GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/loopdest/ext)}" = "0"]?doloop)
exten => vmx,n,Set(VMX_LOOPDEST_EXT=${DB_RESULT})
exten => vmx,n,Set(VMX_LOOPDEST_CONTEXT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/loopdest/context)}" = "1"]?${DB_RESULT}:${VMX_LOOPDEST_CONTEXT})})
exten => vmx,n(looppri),Set(VMX_LOOPDEST_PRI=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/loopdest/pri)}" = "1"]?${DB_RESULT}:${VMX_LOOPDEST_PRI})})
exten => vmx,n(doloop),Goto(${VMX_LOOPDEST_CONTEXT},${VMX_LOOPDEST_EXT},${VMX_LOOPDEST_PRI})
exten => vmx,n(doopt),Noop(Got a valid option: ${DB_RESULT})
exten => vmx,n,Set(VMX_EXT=${DB_RESULT})
exten => vmx,n,GotoIf($["${VMX_EXT}" != "dovm"]?getdest)
exten => vmx,n(vmxopts),Set(VMX_OPTS=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/vmxopts/dovm)}" = "1"]?${DB_RESULT}:${VMX_OPTS_DOVM})})
exten => vmx,n(vmxdovm),Goto(dovm,1)
exten => vmx,n(getdest),Set(VMX_CONTEXT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/${ACTION}/context)}" = "1"]?${DB_RESULT}:${VMX_CONTEXT})})
exten => vmx,n(vmxpri),Set(VMX_PRI=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/${ACTION}/pri)}" = "1"]?${DB_RESULT}:${VMX_PRI})})
exten => vmx,n(vmxgoto),Goto(${VMX_CONTEXT},${VMX_EXT},${VMX_PRI})
exten => vmx,n(nofile),Noop(File for mode: ${MODE} does not exist, SYSTEMSTATUS: ${SYSTEMSTATUS}, going to normal voicemail)
exten => vmx,n,Goto(s-${MMODE},1)
exten => vmx,n(tmpgreet),Noop(Temporary Greeting Detected, going to normal voicemail)
exten => vmx,n,Goto(s-${MMODE},1)

exten => dovm,1,Noop(VMX Timeout - go to voicemail)
exten => dovm,n,VoiceMail(${MEXTEN}@${VMCONTEXT},${VMX_OPTS}${VMGAIN})
exten => dovm,n,Goto(exit-${VMSTATUS},1)

exten => s-BUSY,1,Noop(BUSY voicemail)
exten => s-BUSY,n,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => s-BUSY,n,VoiceMail(${MEXTEN}@${VMCONTEXT},${VM_OPTS}b${VMGAIN})
exten => s-BUSY,n,Goto(exit-${VMSTATUS},1)

exten => s-NOMESSAGE,1,Noop(NOMESSAGE (beep only) voicemail)
exten => s-NOMESSAGE,n,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => s-NOMESSAGE,n,VoiceMail(${MEXTEN}@${VMCONTEXT},s${VM_OPTS}${VMGAIN})
exten => s-NOMESSAGE,n,Goto(exit-${VMSTATUS},1)

exten => s-INSTRUCT,1,Noop(NOMESSAGE (beeb only) voicemail)
exten => s-INSTRUCT,n,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => s-INSTRUCT,n,VoiceMail(${MEXTEN}@${VMCONTEXT},${VM_OPTS}${VMGAIN})
exten => s-INSTRUCT,n,Goto(exit-${VMSTATUS},1)

exten => s-DIRECTDIAL,1,Noop(DIRECTDIAL voicemail)
exten => s-DIRECTDIAL,n,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => s-DIRECTDIAL,n,VoiceMail(${MEXTEN}@${VMCONTEXT},${VM_OPTS}${VM_DDTYPE}${VMGAIN})
exten => s-DIRECTDIAL,n,Goto(exit-${VMSTATUS},1)

exten => _s-.,1,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => _s-.,n,VoiceMail(${MEXTEN}@${VMCONTEXT},${VM_OPTS}u${VMGAIN})
exten => _s-.,n,Goto(exit-${VMSTATUS},1)

exten => o,1,Playback(one-moment-please)
exten => o,n,GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/0/ext)}" = "0"]?doopdef)
exten => o,n,Set(VMX_OPDEST_EXT=${DB_RESULT})
exten => o,n(opcontext),Set(VMX_OPDEST_CONTEXT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/0/context)}" = "1"]?${DB_RESULT}:${VMX_CONTEXT})})
exten => o,n(oppri),Set(VMX_OPDEST_PRI=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/0/pri)}" = "1"]?${DB_RESULT}:${VMX_PRI})})
exten => o,n,Goto(${VMX_OPDEST_CONTEXT},${VMX_OPDEST_EXT},${VMX_OPDEST_PRI})
exten => o,n(doopdef),GotoIf($["x${OPERATOR_XTN}"="x"]?nooper:from-internal,${OPERATOR_XTN},1)
exten => o,n(nooper),GotoIf($["x${FROM_DID}"="x"]?nodid)
exten => o,n,Dial(Local/${FROM_DID}@from-pstn,)
exten => o,n,Gosub(macro-hangup,s,1())
exten => o,n(nodid),Dial(Local/s@from-pstn,)
exten => o,n,Gosub(macro-hangup,s,1())

exten => a,1,Gosub(macro-get-vmcontext,s,1(${MEXTEN}))
exten => a,n,GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/novmstar)}" = "1"]?s,1)
exten => a,n,GotoIf($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/*/ext)}" = "0"]?adef,1)
exten => a,n,Set(VMX_ADEST_EXT=${DB_RESULT})
exten => a,n(acontext),Set(VMX_ADEST_CONTEXT=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/*/context)}" = "1"]?${DB_RESULT}:${VMX_CONTEXT})})
exten => a,n(apri),Set(VMX_ADEST_PRI=${IF($["${DB_EXISTS(AMPUSER/${MEXTEN}/vmx/${MODE}/*/pri)}" = "1"]?${DB_RESULT}:${VMX_PRI})})
exten => a,n,Goto(${VMX_ADEST_CONTEXT},${VMX_ADEST_EXT},${VMX_ADEST_PRI})

exten => adef,1,VoiceMailMain(${MEXTEN}@${VMCONTEXT})
exten => adef,n,GotoIf($["${RETVM}" = "RETURN"]?exit-RETURN,1)
exten => adef,n,Hangup()

exten => exit-FAILED,1,Playback(im-sorry&an-error-has-occurred)
exten => exit-FAILED,n,GotoIf($["${RETVM}" = "RETURN"]?exit-RETURN,1)
exten => exit-FAILED,n,Hangup()

exten => exit-SUCCESS,1,GotoIf($["${RETVM}" = "RETURN"]?exit-RETURN,1)
exten => exit-SUCCESS,n,Playback(goodbye)
exten => exit-SUCCESS,n,Hangup()

exten => exit-USEREXIT,1,GotoIf($["${RETVM}" = "RETURN"]?exit-RETURN,1)
exten => exit-USEREXIT,n,Playback(goodbye)
exten => exit-USEREXIT,n,Hangup()

exten => exit-RETURN,1,Noop(Returning From Voicemail because macro)
exten => exit-RETURN,n,GotoIf($["${RETVM}" = "RETURN"]?ext-local,vmret,1)

exten => t,1,Hangup()

;--== end of [macro-vm] ==--;


[macro-exten-vm]
include => macro-exten-vm-custom
exten => s,1,Gosub(macro-user-callerid,s,1(${ARG1},${ARG2},,,,macro-exten-vm))
exten => s,n,Set(RingGroupMethod=none)
exten => s,n,Set(__EXTTOCALL=${ARG2})
exten => s,n,Set(__PICKUPMARK=${ARG2})
exten => s,n,Set(RT=${IF($["${ARG1}"!="novm" | "${DB(CFU/${EXTTOCALL})}"!="" | "${DB(CFB/${EXTTOCALL})}"!="" | "${ARG3}"="1" | "${ARG4}"="1" | "${ARG5}"="1"]?${RINGTIMER}:)})
exten => s,n(checkrecord),Gosub(sub-record-check,s,1(exten,${EXTTOCALL},dontcare))
exten => s,n,GotoIf($["${CUT(CHANNEL,@,2):5:5}"="queue"|"${AMPUSER}"=""|${LEN(${FROM_DID})}|"${DB(AMPUSER/${EXTTOCALL}/answermode)}"!="intercom"|${LEN(${BLINDTRANSFER})}|"${EXTENSION_STATE(${EXTTOCALL}@ext-local)}"!="NOT_INUSE"|"${CC_RECALL}"!=""]?macrodial)
exten => s,n,Set(INTERCOM_EXT_DOPTIONS=${DIAL_OPTIONS})
exten => s,n,Set(INTERCOM_RETURN=TRUE)
exten => s,n,Gosub(ext-intercom,*80${EXTTOCALL},1())
exten => s,n,Set(INTERCOM_RETURN=)
exten => s,n,Set(INTERCOM_EXT_DOPTIONS=)
exten => s,n(macrodial),GosubIf($["${INTERCOM_CALL}"="TRUE" & ${LEN(${BLINDTRANSFER})}]?clrheader,1())
exten => s,n,Gosub(macro-dial-one,s,1(${RT},${DIAL_OPTIONS},${EXTTOCALL}))
exten => s,n,Set(SV_DIALSTATUS=${DIALSTATUS})
exten => s,n(calldocfu),GosubIf($[("${SV_DIALSTATUS}"="NOANSWER"|"${SV_DIALSTATUS}"="CHANUNAVAIL") & "${DB(CFU/${EXTTOCALL})}"!="" & "${SCREEN}"=""]?docfu,1())
exten => s,n(calldocfb),GosubIf($["${SV_DIALSTATUS}"="BUSY" & "${DB(CFB/${EXTTOCALL})}"!="" & "${SCREEN}"=""]?docfb,1())
exten => s,n,Set(DIALSTATUS=${SV_DIALSTATUS})
exten => s,n,ExecIf($[("${DIALSTATUS}"="NOANSWER"&"${ARG3}"="1")|("${DIALSTATUS}"="BUSY"&"${ARG4}"="1")|("${DIALSTATUS}"="CHANUNAVAIL"&"${ARG5}"="1")]?Return())
exten => s,n,GotoIf($["${ARG1}"="novm"]?s-${DIALSTATUS},1)
exten => s,n,Gosub(macro-vm,s,1(${ARG1},${DIALSTATUS},${IVR_RETVM}))

exten => docfu,1(docfu),ExecIf($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="-1"|("${ARG1}"="novm"&"${ARG3}"="1")]?StackPop())
exten => docfu,n,GotoIf($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="-1"|("${ARG1}"="novm"&"${ARG3}"="1")]?from-internal,${DB(CFU/${EXTTOCALL})},1)
exten => docfu,n,Set(RTCF=${IF($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="0"]?${RT}:${DB(AMPUSER/${EXTTOCALL}/cfringtimer)})})
exten => docfu,n,ExecIf($["${DIRECTION}" = "INBOUND"]?Set(DIAL_OPTIONS=${STRREPLACE(DIAL_OPTIONS,T)}))
exten => docfu,n,Dial(Local/${DB(CFU/${EXTTOCALL})}@from-internal/n,${RTCF},${DIAL_OPTIONS})
exten => docfu,n,Return()

exten => docfb,1(docfu),ExecIf($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="-1"|("${ARG1}"="novm"&"${ARG4}"="1")]?StackPop())
exten => docfb,n,GotoIf($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="-1"|("${ARG1}"="novm"&"${ARG4}"="1")]?from-internal,${DB(CFB/${EXTTOCALL})},1)
exten => docfb,n,Set(RTCF=${IF($["${DB(AMPUSER/${EXTTOCALL}/cfringtimer)}"="0"]?${RT}:${DB(AMPUSER/${EXTTOCALL}/cfringtimer)})})
exten => docfb,n,ExecIf($["${DIRECTION}" = "INBOUND"]?Set(DIAL_OPTIONS=${STRREPLACE(DIAL_OPTIONS,T)}))
exten => docfb,n,Dial(Local/${DB(CFB/${EXTTOCALL})}@from-internal/n,${RTCF},${DIAL_OPTIONS})
exten => docfb,n,Return()

exten => clrheader,1,ExecIf($[${LEN(${SIPURI})}&"${SIPURI}"="${SIP_URI_OPTIONS}"]?Set(SIP_URI_OPTIONS=))
exten => clrheader,n,ExecIf($[${LEN(${ALERTINFO})}]?SIPRemoveHeader(${ALERTINFO}))
exten => clrheader,n,ExecIf($[${LEN(${CALLINFO})}]?SIPRemoveHeader(${CALLINFO}))
exten => clrheader,n,Return()

exten => s-BUSY,1,GotoIf($["${IVR_RETVM}"="RETURN" & "${IVR_CONTEXT}"!=""]?exit,1)
exten => s-BUSY,n,Playtones(busy)
exten => s-BUSY,n,Busy(20)

exten => _s-!,1,GotoIf($["${IVR_RETVM}"="RETURN" & "${IVR_CONTEXT}"!=""]?exit,1)
exten => _s-!,n,Playtones(congestion)
exten => _s-!,n,Congestion(10)

exten => exit,1,Playback(beep&line-busy-transfer-menu&silence/1)
exten => exit,n,Return(${GOSUB_RETVAL})

;--== end of [macro-exten-vm] ==--;


[macro-simple-dial]
include => macro-simple-dial-custom
exten => s,1,Set(__EXTTOCALL=${ARG1})
exten => s,n,Set(RT=${ARG2})
exten => s,n,Set(CFUEXT=${DB(CFU/${EXTTOCALL})})
exten => s,n,Set(CFBEXT=${DB(CFB/${EXTTOCALL})})
exten => s,n,Set(CWI_TMP=${CWIGNORE})
exten => s,n(macrodial),Gosub(macro-dial-one,s,1(${RT},${DIAL_OPTIONS},${EXTTOCALL}))
exten => s,n,Set(__CWIGNORE=${CWI_TMP})
exten => s,n,Set(PR_DIALSTATUS=${DIALSTATUS})
exten => s,n(calldocfu),GosubIf($["${PR_DIALSTATUS}"="NOANSWER" & "${CFUEXT}"!=""]?docfu,1())
exten => s,n(calldocfb),GosubIf($["${PR_DIALSTATUS}"="BUSY" & "${CFBEXT}"!=""]?docfb,1())
exten => s,n,Set(DIALSTATUS=${PR_DIALSTATUS})
exten => s,n,Goto(s-${DIALSTATUS},1)

exten => docfu,1,GotoIf($["${DB(AMPUSER/${CFUEXT}/device)}" = "" ]?chlocal)
exten => docfu,n,Dial(Local/${CFUEXT}@ext-local,${RT},${DIAL_OPTIONS})
exten => docfu,n,Return()
exten => docfu,n(chlocal),ExecIf($["${DIRECTION}" = "INBOUND"]?Set(DIAL_OPTIONS=${STRREPLACE(DIAL_OPTIONS,T)}))
exten => docfu,n,Dial(Local/${CFUEXT}@from-internal/n,${RT},${DIAL_OPTIONS})
exten => docfu,n,Return()

exten => docfb,1,GotoIf($["${DB(AMPUSER/${CFBEXT}/device)}" = "" ]?chlocal)
exten => docfb,n,Dial(Local/${CFBEXT}@ext-local,${RT},${DIAL_OPTIONS})
exten => docfb,n,Return()
exten => docfb,n(chlocal),ExecIf($["${DIRECTION}" = "INBOUND"]?Set(DIAL_OPTIONS=${STRREPLACE(DIAL_OPTIONS,T)}))
exten => docfb,n,Dial(Local/${CFBEXT}@from-internal/n,${RT},${DIAL_OPTIONS})
exten => docfb,n,Return()

exten => _s-.,1,Noop(Extension is reporting ${EXTEN})
exten => _s-.,n,Return()

;--== end of [macro-simple-dial] ==--;


[originate-skipvm]
include => originate-skipvm-custom
exten => _.X,1,Gosub(macro-blkvm-set,s,1())
exten => _.X,n,Goto(from-internal,${EXTEN},1)

;--== end of [originate-skipvm] ==--;


[macro-blkvm-setifempty]
include => macro-blkvm-setifempty-custom
exten => s,1,GotoIf($[!${EXISTS(${BLKVM_CHANNEL})}]?init)
exten => s,n,Set(GOSUB_RETVAL=${SHARED(BLKVM,${BLKVM_CHANNEL})})
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(init),Set(__BLKVM_CHANNEL=${CHANNEL})
exten => s,n,Set(SHARED(BLKVM,${BLKVM_CHANNEL})=TRUE)
exten => s,n,Set(GOSUB_RETVAL=TRUE)
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-blkvm-setifempty] ==--;


[macro-blkvm-set]
include => macro-blkvm-set-custom
exten => s,1,ExecIf($[!${EXISTS(${BLKVM_CHANNEL})} | "{ARG1}" = "reset"]?Set(__BLKVM_CHANNEL=${CHANNEL}))
exten => s,n,Set(SHARED(BLKVM,${BLKVM_CHANNEL})=TRUE)
exten => s,n,Set(GOSUB_RETVAL=TRUE)
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-blkvm-set] ==--;


[macro-blkvm-clr]
include => macro-blkvm-clr-custom
exten => s,1,Set(SHARED(BLKVM,${BLKVM_CHANNEL})=)
exten => s,n,Set(GOSUB_RETVAL=)
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-blkvm-clr] ==--;


[macro-blkvm-check]
include => macro-blkvm-check-custom
exten => s,1,Set(GOSUB_RETVAL=${SHARED(BLKVM,${BLKVM_CHANNEL})})
exten => s,n,ExecIf($["${GOSUB_RETVAL}"="" & "${CC_RECALL}"="1"]?Set(GOSUB_RETVAL=TRUE))
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-blkvm-check] ==--;


[macro-hangupcall]
include => macro-hangupcall-custom
exten => s,1,Set(__MCVMSTATUS=${VMSTATUS})
exten => s,n,Gosub(app-missedcall-hangup,${EXTEN},1())
exten => s,n(start),GotoIf($["${USE_CONFIRMATION}"="" | "${RINGGROUP_INDEX}"="" | "${CHANNEL}"!="${UNIQCHAN}"]?theend)
exten => s,n(delrgi),Noop(Deleting: RG/${RINGGROUP_INDEX}/${CHANNEL} ${DB_DELETE(RG/${RINGGROUP_INDEX}/${CHANNEL})})
exten => s,n(theend),ExecIf($["${ONETOUCH_RECFILE}"!="" & "${CDR(recordingfile)}"=""]?Set(CDR(recordingfile)=${ONETOUCH_RECFILE}))
exten => s,n(hangup),Hangup()
exten => s,n,Return(${GOSUB_RETVAL})

;--== end of [macro-hangupcall] ==--;


[macro-user-logon]
include => macro-user-logon-custom
exten => s,1,Set(DEVICETYPE=${DB(DEVICE/${CALLERID(number)}/type)})
exten => s,n,Answer
exten => s,n,Wait(1)
exten => s,n,GotoIf($["${DEVICETYPE}" = "fixed"]?s-FIXED,1)
exten => s,n,Set(AMPUSER=${ARG1})
exten => s,n,GotoIf($["${AMPUSER}" != ""]?gotpass)
exten => s,n,Read(AMPUSER,please-enter-your-extension-then-press-pound,,,4,)
exten => s,n,GotoIf($["${AMPUSER}" = ""]?s-MAXATTEMPTS,1)
exten => s,n(gotpass),GotoIf($["${DB_EXISTS(AMPUSER/${AMPUSER}/password)}" = "0"]?s-NOUSER,1)
exten => s,n,Set(AMPUSERPASS=${DB_RESULT})
exten => s,n,GotoIf($[${LEN(${AMPUSERPASS})} = 0]?s-NOPASSWORD,1)
exten => s,n,Set(DEVICEUSER=${DB(DEVICE/${CALLERID(number)}/user)})
exten => s,n,GotoIf($["${DEVICEUSER}" = "${AMPUSER}"]?s-ALREADYLOGGEDON,1)
exten => s,n,Authenticate(${AMPUSERPASS},)
exten => s,n,AGI(agi://127.0.0.1/user_login_out.agi,login,${CALLERID(number)},${AMPUSER})
exten => s,n,Playback(agent-loginok)

exten => s-FIXED,1,Noop(Device is FIXED and cannot be logged into)
exten => s-FIXED,n,SayNumber(${CALLERID(number)},f)
exten => s-FIXED,n,Playback(vm-isunavail&vm-goodbye)
exten => s-FIXED,n,Hangup()

exten => s-ALREADYLOGGEDON,1,Noop(This device has already been logged into by this user)
exten => s-ALREADYLOGGEDON,n,Playback(vm-goodbye)
exten => s-ALREADYLOGGEDON,n,Hangup()

exten => s-NOPASSWORD,1,Noop(This extension does not exist or no password is set)
exten => s-NOPASSWORD,n,Playback(pbx-invalid)
exten => s-NOPASSWORD,n,Hangup()

exten => s-MAXATTEMPTS,1,Noop(Too many login attempts)
exten => s-MAXATTEMPTS,n,Playback(vm-goodbye)
exten => s-MAXATTEMPTS,n,Hangup()

exten => s-NOUSER,1,Noop(Invalid extension ${AMPUSER} entered)
exten => s-NOUSER,n,Playback(pbx-invalid)
exten => s-NOUSER,n,Goto(s,playagain)

;--== end of [macro-user-logon] ==--;


[macro-user-logoff]
include => macro-user-logoff-custom
exten => s,1,Set(DEVICETYPE=${DB(DEVICE/${CALLERID(number)}/type)})
exten => s,n,GotoIf($["${DEVICETYPE}" = "fixed"]?s-FIXED,1)
exten => s,n,AGI(agi://127.0.0.1/user_login_out.agi,logout,${CALLERID(number)})
exten => s,n(done),Playback(agent-loggedoff)

exten => s-FIXED,1,Noop(Device is FIXED and cannot be logged into)
exten => s-FIXED,n,Playback(an-error-has-occured&vm-goodbye)
exten => s-FIXED,n,Hangup()

;--== end of [macro-user-logoff] ==--;


[macro-dial-one]
include => macro-dial-one-custom
exten => s,1,Set(DEXTEN=${ARG3})
exten => s,n,Set(__MCEXTTOCALL=${EXTTOCALL})
exten => s,n,Set(__MCMULTI=${MD5(${DEXTEN}${FROMEXTEN})})
exten => s,n(setexttocall),ExecIf($[${LEN(${EXTTOCALL})}=0 & ${LEN(${DEXTEN})}>0]?Set(__EXTTOCALL=${DEXTEN}))
exten => s,n,Set(DIALSTATUS_CW=)
exten => s,n,GosubIf($["${FROM_DID}"!="" & "${SCREEN}"="" & "${SIGNORE}"="" & "${DB(AMPUSER/${DEXTEN}/screen)}"!=""]?screen,1())
exten => s,n,GosubIf($["${DB(CF/${DEXTEN})}"!=""]?cf,1())
exten => s,n,GotoIf($["${DEXTEN:-1}"="#" | "${DB(DND/${DEXTEN})}"=""]?skip1)
exten => s,n,Set(DEXTEN=)
exten => s,n,Set(DIALSTATUS=BUSY)
exten => s,n(skip1),GotoIf($["${DEXTEN}"=""]?nodial)
exten => s,n,GotoIf($["${DEXTEN:-1}"="#"]?continue)
exten => s,n,Set(EXTHASCW=${IF($["${CWIGNORE}"!=""]? :${DB(CW/${DEXTEN})})})
exten => s,n,GotoIf($["${EXTHASCW}"="" | "${DB(CFB/${DEXTEN})}"!="" | "${DB(CFU/${DEXTEN})}"!=""]?next1:cwinusebusy)
exten => s,n(next1),GotoIf($["${DB(CFU/${DEXTEN})}"!="" & ("${EXTENSION_STATE(${DEXTEN}@ext-local)}"="UNAVAILABLE" | "${EXTENSION_STATE(${DEXTEN}@ext-local)}"="UNKNOWN")]?docfu:skip3)
exten => s,n(docfu),Set(DEXTEN=)
exten => s,n,Set(DIALSTATUS=NOANSWER)
exten => s,n,Goto(nodial)
exten => s,n(skip3),GotoIf($["${EXTHASCW}"="" | "${DB(CFB/${DEXTEN})}"!=""]?next2:continue)
exten => s,n(next2),GotoIf($["${EXTENSION_STATE(${DEXTEN}@ext-local)}"="NOT_INUSE" | "${EXTENSION_STATE(${DEXTEN}@ext-local)}"="UNAVAILABLE" | "${EXTENSION_STATE(${DEXTEN}@ext-local)}"="UNKNOWN"]?continue)
exten => s,n,ExecIf($["${DB(CFB/${DEXTEN})}"!="" & "${CFIGNORE}"=""]?Set(DIALSTATUS=BUSY))
exten => s,n,GotoIf($["${EXTHASCW}"!="" | "${DEXTEN:-1}"="#"]?cwinusebusy)
exten => s,n,Set(DEXTEN=)
exten => s,n,Set(DIALSTATUS=BUSY)
exten => s,n,Goto(nodial)
exten => s,n(cwinusebusy),GotoIf($["${EXTHASCW}"!="" & "${CWINUSEBUSY}"="true"]?next3:continue)
exten => s,n(next3),ExecIf($["${EXTENSION_STATE(${DEXTEN}@ext-local)}"!="UNAVAILABLE" & "${EXTENSION_STATE(${DEXTEN}@ext-local)}"!="NOT_INUSE" & "${EXTENSION_STATE(${DEXTEN}@ext-local)}"!="UNKNOWN"]?Set(DIALSTATUS_CW=BUSY))
exten => s,n(continue),GotoIf($["${DEXTEN}"=""]?nodial)
exten => s,n,GosubIf($["${DEXTEN:-1}"!="#"]?dstring,1():dlocal,1())
exten => s,n,GotoIf($[${LEN(${DSTRING})}=0]?nodial)
exten => s,n,GotoIf($["${DEXTEN:-1}"="#"]?skiptrace)
exten => s,n,GosubIf($[${REGEX("^[\+]?[0-9]+$" ${CALLERID(number)})} = 1]?ctset,1():ctclear,1())
exten => s,n(skiptrace),Set(D_OPTIONS=${IF($["${NODEST}"!="" & ${REGEX("(U[(]macro-auto-blkvm[)])" ${ARG2})} != 1]?${ARG2}U(macro-auto-blkvm):${ARG2})})
exten => s,n,GosubIf($["${ALERT_INFO}"!="" & "${HASH(SIPHEADERS,Alert-Info)}"=""]?func-set-sipheader,s,1(Alert-Info,${ALERT_INFO}))
exten => s,n,Noop(Blind Transfer: ${BLINDTRANSFER}, Attended Transfer: ${ATTENDEDTRANSFER}, User: ${AMPUSER}, Alert Info: ${ALERT_INFO})
exten => s,n,ExecIf($["${ALERT_INFO}"="" & ${LEN(${AMPUSER})}!=0 & ${LEN(${BLINDTRANSFER})}=0 & ${LEN(${ATTENDEDTRANSFER})}=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($[${LEN(${BLINDTRANSFER})}!=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($[${LEN(${ATTENDEDTRANSFER})}!=0]?Set(ALERT_INFO=))
exten => s,n,ExecIf($["${RVOL}"!=""]?Set(ALERT_INFO=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${RVOL}))
exten => s,n,ExecIf($["${RVOL}"="" & "${DB(AMPUSER/${EXTTOCALL}/rvolume)}" != ""]?Set(ALERT_INFO=${IF($["${ALERT_INFO}"!=""]?${ALERT_INFO}:Normal)}\;volume=${DB(AMPUSER/${EXTTOCALL}/rvolume)}))
exten => s,n,GosubIf($["${ALERT_INFO}"!="" & "${ALERT_INFO}"!=" "]?func-set-sipheader,s,1(Alert-Info,${ALERT_INFO}))
exten => s,n,ExecIf($[("${MOHCLASS}"!="default") & ("${MOHCLASS}"!="")]?Set(CHANNEL(musicclass)=${MOHCLASS}))
exten => s,n,GosubIf($["${QUEUEWAIT}"!=""]?qwait,1())
exten => s,n,Set(__CWIGNORE=${CWIGNORE})
exten => s,n,Set(__KEEPCID=TRUE)
exten => s,n,GotoIf($["${USEGOTO}"="1"]?usegoto,1)
exten => s,n,GotoIf($["${DB(AMPUSER/${EXTTOCALL}/cidname)}" = "" || "${DB(AMPUSER/${AMPUSER}/cidname)}" = ""]?godial)
exten => s,n,Gosub(sub-presencestate-display,s,1(${EXTTOCALL}))
exten => s,n,Set(CONNECTEDLINE(name,i)=${DB(AMPUSER/${EXTTOCALL}/cidname)} ${PRESENCESTATE_DISPLAY})
exten => s,n,Set(CONNECTEDLINE(num)=${EXTTOCALL})
exten => s,n,Set(D_OPTIONS=${D_OPTIONS})
exten => s,n(godial),Gosub(macro-dialout-one-predial-hook,s,1())
exten => s,n,ExecIf($["${DIRECTION}" = "INBOUND"]?Set(D_OPTIONS=${STRREPLACE(D_OPTIONS,T)}I))
exten => s,n,ExecIf($["${DB(AMPUSER/${DEXTEN}/cwtone)}" = "enabled" & "${EXTENSION_STATE(${DEXTEN}@ext-local)}" = "INUSE"]?Set(CWRING=r(callwaiting)):Set(CWRING=))
exten => s,n(dialapp),Noop()
exten => s,n,ExecIf($["${FROMQ}" = "true"]?Set(D_OPTIONS=${STRREPLACE(D_OPTIONS,T)}))
exten => s,n,ExecIf($["${ivrreturn}" = "1"]?Set(D_OPTIONS=${D_OPTIONS}g))
exten => s,n(dial),Gosub(dialOne-with-exten,${DEXTEN},1(${ARG1}))
exten => s,n,ExecIf($["${DIALSTATUS}"="ANSWER" & "${CALLER_DEST}"!=""]?Return())
exten => s,n,ExecIf($["${DIALSTATUS_CW}"!=""]?Set(DIALSTATUS=${DIALSTATUS_CW}))
exten => s,n,GosubIf($[("${SCREEN}"!=""&("${DIALSTATUS}"="TORTURE"|"${DIALSTATUS}"="DONTCALL"))|"${DIALSTATUS}"="ANSWER"]?s-${DIALSTATUS},1())
exten => s,n,Return(${GOSUB_RETVAL})
exten => s,n(nodial),Noop()
exten => s,n,ExecIf($["${DIALSTATUS}" = ""]?Set(DIALSTATUS=NOANSWER))
exten => s,n,Noop(Returned from dial-one with nothing to call and DIALSTATUS: ${DIALSTATUS})
exten => s,n,Return(${GOSUB_RETVAL})

exten => h,1,Gosub(macro-hangupcall,s,1())

exten => usegoto,1,Set(USEGOTO=)
exten => usegoto,n,Goto(from-internal,${DSTRING},1)

exten => screen,1,GotoIf($["${DB(AMPUSER/${DEXTEN}/screen)}"!="nomemory" | "${CALLERID(number)}"=""]?memory)
exten => screen,n,ExecIf($[${REGEX("^[0-9a-zA-Z ]+$" ${CALLERID(number)})} = 1]?System(rm -f ${ASTVARLIBDIR}/sounds/priv-callerintros/${CALLERID(number)}.*))
exten => screen,n(memory),Set(__SCREEN=${DB(AMPUSER/${DEXTEN}/screen)})
exten => screen,n,Set(__SCREEN_EXTEN=${DEXTEN})
exten => screen,n,Set(ARG2=${ARG2}p)
exten => screen,n,Return()

exten => cf,1,Set(CFAMPUSER=${IF($["${AMPUSER}"=""]?${CALLERID(number)}:${AMPUSER})})
exten => cf,n,ExecIf($["${DB(CF/${DEXTEN})}"="${CFAMPUSER}" | "${DB(CF/${DEXTEN})}"="${REALCALLERIDNUM}" | "${CUT(CUT(BLINDTRANSFER,-,1),/,1)}" = "${DB(CF/${DEXTEN})}" | "${DEXTEN}"="${DB(CF/${DEXTEN})}"]?Return())
exten => cf,n,ExecIf($["${DB(AMPUSER/${DEXTEN}/cfringtimer)}" != "0" & "${DB(AMPUSER/${DEXTEN}/cfringtimer)}" != ""]?Set(ARG1=${IF($["${DB(AMPUSER/${DEXTEN}/cfringtimer)}"="-1"]? : ${DB(AMPUSER/${DEXTEN}/cfringtimer)})}))
exten => cf,n,ExecIf($["${DB(AMPUSER/${DEXTEN}/cfringtimer)}" == "0"]?Set(ARG1=${IF($["${DB(FREEPBXCONF/CFRINGTIMERDEFAULT)}"="-1"]? : ${DB(FREEPBXCONF/CFRINGTIMERDEFAULT)})}))
exten => cf,n,Set(DEXTEN=${IF($["${CFIGNORE}"=""]?"${DB(CF/${DEXTEN})}#": )})
exten => cf,n,Set(__DIVERSION_REASON=${IF($["${DEXTEN}"!=""]?"unconditional": )})
exten => cf,n,ExecIf($["${DEXTEN}"!=""]?Return())
exten => cf,n,Set(DIALSTATUS=NOANSWER)
exten => cf,n,Return()

exten => qwait,1,ExecIf($["${SAVEDCIDNAME}" = ""]?Set(__SAVEDCIDNAME=${CALLERID(name)}))
exten => qwait,n,Set(ELAPSED=${MATH($[${EPOCH}+30-${QUEUEWAIT}]/60,int)})
exten => qwait,n,Set(CALLERID(name)=M${ELAPSED}:${SAVEDCIDNAME})
exten => qwait,n,Return()

exten => ctset,1,Set(DB(CALLTRACE/${DEXTEN})=${CALLERID(number)})
exten => ctset,n,Return()

exten => ctclear,1,Noop(Deleting: CALLTRACE/${DEXTEN} ${DB_DELETE(CALLTRACE/${DEXTEN})})
exten => ctclear,n,Return()

exten => dstring,1,Set(DSTRING=)
exten => dstring,n,Set(DEVICES=${DB(AMPUSER/${DEXTEN}/device)})
exten => dstring,n,ExecIf($["${DEVICES}"=""]?Return())
exten => dstring,n,ExecIf($["${DEVICES:0:1}"="&"]?Set(DEVICES=${DEVICES:1}))
exten => dstring,n,Set(LOOPCNT=${FIELDQTY(DEVICES,&)})
exten => dstring,n,Set(ITER=1)
exten => dstring,n(begin),Set(THISDIAL=${DB(DEVICE/${CUT(DEVICES,&,${ITER})}/dial)})
exten => dstring,n,GotoIf($["${THISDIAL:0:5}"!="PJSIP"]?docheck)
exten => dstring,n,Noop(Debug: Found PJSIP Destination ${THISDIAL})
exten => dstring,n,GotoIf($[ ${REGEX("(/.+/|@)" ${THISDIAL})} = 1 ]?doset)
exten => dstring,n,Noop(Debug: Updating PJSIP Destination with PJSIP_DIAL_CONTACTS)
exten => dstring,n,Set(THISDIAL=${PJSIP_DIAL_CONTACTS(${THISDIAL:6})})
exten => dstring,n,ExecIf($["${THISDIAL}"=""]?Set(DIALSTATUS=CHANUNAVAIL))
exten => dstring,n(docheck),GotoIf($["${THISDIAL}"=""]?skipset)
exten => dstring,n(doset),Set(DSTRING=${DSTRING}${THISDIAL}&)
exten => dstring,n(skipset),Set(ITER=$[${ITER}+1])
exten => dstring,n,GotoIf($[${ITER}<=${LOOPCNT}]?begin)
exten => dstring,n,ExecIf($["${DSTRING:-1}"!="&"]?Return())
exten => dstring,n,Set(DSTRING=${DSTRING:0:$[${LEN(${DSTRING})}-1]})
exten => dstring,n,Return()

exten => dlocal,1,Set(DSTRING=${IF($["${ARG1}"=""]?${DEXTEN:0:${MATH(${LEN(${DEXTEN})}-1,int)}}:Local/${DEXTEN:0:${MATH(${LEN(${DEXTEN})}-1,int)}}@from-internal/n)})
exten => dlocal,n,Set(USEGOTO=${IF($["${ARG1}"=""]?1:0)})
exten => dlocal,n,Return()

exten => s-ANSWER,1,Noop(Call successfully answered - Hanging up now)
exten => s-ANSWER,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => s-ANSWER,n(bye),Gosub(macro-hangupcall,s,1())

exten => s-TORTURE,1,Goto(app-blackhole,musiconhold,1)
exten => s-TORTURE,n,Gosub(macro-hangupcall,s,1())

exten => s-DONTCALL,1,Answer
exten => s-DONTCALL,n,Wait(1)
exten => s-DONTCALL,n,Zapateller()
exten => s-DONTCALL,n,Playback(ss-noservice)
exten => s-DONTCALL,n,Gosub(macro-hangupcall,s,1())

exten => s-CHANUNAVAIL,1,Gosub(macro-vm,s,1(${SCREEN_EXTEN},BUSY,${IVR_RETVM}))
exten => s-CHANUNAVAIL,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => s-CHANUNAVAIL,n(return),ExecIf($["${IVR_RETVM}"!="RETURN" | "${IVR_CONTEXT}"=""]?Hangup())
exten => s-CHANUNAVAIL,n,Return()

exten => s-NOANSWER,1,Gosub(macro-vm,s,1(${SCREEN_EXTEN},BUSY,${IVR_RETVM}))
exten => s-NOANSWER,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => s-NOANSWER,n(return),ExecIf($["${IVR_RETVM}"!="RETURN" | "${IVR_CONTEXT}"=""]?Hangup())
exten => s-NOANSWER,n,Return()

exten => s-BUSY,1,Gosub(macro-vm,s,1(${SCREEN_EXTEN},BUSY,${IVR_RETVM}))
exten => s-BUSY,n,GotoIf($["${ivrreturn}" = "1"]?${IVR_CONTEXT},return,1)
exten => s-BUSY,n(return),ExecIf($["${IVR_RETVM}"!="RETURN" | "${IVR_CONTEXT}"=""]?Hangup())
exten => s-BUSY,n,Return()

;--== end of [macro-dial-one] ==--;


[dialOne-with-exten]
include => dialOne-with-exten-custom
exten => _[+-X].,1,Set(CHANNEL(hangup_handler_push)=app-missedcall-hangup,${DialMCEXT},1)
exten => _[+-X].,n,Dial(${DSTRING},${ARG1},${D_OPTIONS}${CWRING}b(func-apply-sipheaders^s^1))
exten => _[+-X].,n,Return()

exten => _X,1,Set(CHANNEL(hangup_handler_push)=app-missedcall-hangup,${DialMCEXT},1)
exten => _X,n,Dial(${DSTRING},${ARG1},${D_OPTIONS}${CWRING}b(func-apply-sipheaders^s^1))
exten => _X,n,Return()

exten => h,1,Gosub(macro-hangupcall,s,1())

;--== end of [dialOne-with-exten] ==--;


[func-set-sipheader]
include => func-set-sipheader-custom
exten => s,1,Noop(Sip Add Header function called. Adding ${ARG1} = ${ARG2})
exten => s,n,Set(HASH(__SIPHEADERS,${ARG1})=${ARG2})
exten => s,n,Return()

;--== end of [func-set-sipheader] ==--;


[func-apply-sipheaders]
include => func-apply-sipheaders-custom
exten => s,1,Noop(Applying SIP Headers to channel ${CHANNEL})
exten => s,n,Set(localchan=${CUT(CHANNEL,/,2)})
exten => s,n,Set(DialMCEXT=${CUT(localchan,-,1)})
exten => s,n,Set(CHANNEL(hangup_handler_push)=app-missedcall-hangup,${DialMCEXT},1)
exten => s,n,Set(Dchan=${CUT(CHANNEL,/,2)})
exten => s,n,Set(TECH=${CUT(CHANNEL,/,1)})
exten => s,n,Set(SIPHEADERKEYS=${HASHKEYS(SIPHEADERS)})
exten => s,n,While($["${SET(sipkey=${SHIFT(SIPHEADERKEYS)})}" != ""])
exten => s,n,Set(sipheader=${HASH(SIPHEADERS,${sipkey})})
exten => s,n,ExecIf($["${sipheader}" = "unset" & "${TECH}" = "PJSIP"]?Set(PJSIP_HEADER(remove,${sipkey})=))
exten => s,n,ExecIf($["${sipheader}" != "unset" & "${sipkey}" = "Alert-Info" & ${REGEX("^<[^>]*>" ${sipheader})} != 1 & ${REGEX("\;info=" ${sipheader})} != 1]?Set(sipheader=<http://127.0.0.1>\;info=${sipheader}))
exten => s,n,ExecIf($["${sipheader}" != "unset" & "${sipkey}" = "Alert-Info" & ${REGEX("^<[^>]*>" ${sipheader})} != 1]?Set(sipheader=<http://127.0.0.1>${sipheader}))
exten => s,n,ExecIf($["${TECH}" = "PJSIP" & "${sipheader}" != "unset"]?Set(PJSIP_HEADER(add,${sipkey})=${sipheader}))
exten => s,n,EndWhile
exten => s,n,Return()

;--== end of [func-apply-sipheaders] ==--;


[dialparties]
include => dialparties-custom
exten => s,1,Noop(Starting New Dialparties)
exten => s,n,ClearHash(dialparties_FMFMLIST)
exten => s,n,ClearHash(dialparties_EXTLIST)
exten => s,n,ClearHash(dialparties)
exten => s,n,Set(HASH(dialparties,ARG_CNT)=1)
exten => s,n,While($["${ARG${HASH(dialparties,ARG_CNT)}}" != ""])
exten => s,n,Noop(ARG${HASH(dialparties,ARG_CNT)}: ${ARG${HASH(dialparties,ARG_CNT)}})
exten => s,n,Set(HASH(dialparties,ARG_CNT)=${MATH(${HASH(dialparties,ARG_CNT)}+1,int)})
exten => s,n,EndWhile
exten => s,n,Set(HASH(dialparties,CWINUSEBUSY)=${CWINUSEBUSY})
exten => s,n,Set(HASH(dialparties,CWIGNORE)=${TOUPPER(${FILTER(A-Za-z0-9,${CWIGNORE})})})
exten => s,n,Set(HASH(dialparties,CFIGNORE)=${TOUPPER(${FILTER(A-Za-z0-9,${CFIGNORE})})})
exten => s,n,Set(HASH(dialparties,SIGNORE)=${TOUPPER(${FILTER(A-Za-z0-9,${SIGNORE})})})
exten => s,n,Set(HASH(dialparties,AMPUSER)=${FILTER(A-Za-z0-9,${AMPUSER})})
exten => s,n,Set(HASH(dialparties,FMGRP)=${FMGRP})
exten => s,n,Set(HASH(dialparties,NODEST)=${NODEST})
exten => s,n,Set(HASH(dialparties,CIDNUM)=${CALLERID(num)})
exten => s,n,Set(HASH(dialparties,CIDNAME)=${CALLERID(name)})
exten => s,n,Noop(Caller ID name is ${HASH(dialparties,CIDNAME)} number is ${HASH(dialparties,CIDNUM)})
exten => s,n,Noop(CW Ignore is: ${HASH(dialparties,CWIGNORE)})
exten => s,n,Noop(CF Ignore is: ${HASH(dialparties,CFIGNORE)})
exten => s,n,Noop(CW IN_USE/BUSY is: ${HASH(dialparties,CWINUSEBUSY)})
exten => s,n,Set(HASH(dialparties,QUEUEWAIT)=${FILTER(A-Za-z0-9,${QUEUEWAIT})})
exten => s,n,GosubIf($["${QUEUEWAIT}"!=""]?dialparties-queuewait,s,1())
exten => s,n,Set(__KEEPCID=TRUE)
exten => s,n,Set(DIALSTATUS_CW=)
exten => s,n,Set(HASH(dialparties,TIMER)=${ARG1})
exten => s,n,Set(HASH(dialparties,DIALOPTS)=${ARG2})
exten => s,n,Set(HASH(dialparties,RGMETHOD)=${FILTER(A-Za-z0-9\-,${RingGroupMethod})})
exten => s,n,Set(HASH(dialparties,ALERTINFO)=${ALERT_INFO})
exten => s,n,GosubIf($["${HASH(dialparties,ALERTINFO)}"!=""]?dialparties-alertinfo,s,1())
exten => s,n,GosubIf($["${SIPADDHEADER}"!=""]?dialparties-setheader,s,1())
exten => s,n,ExecIf($["${FMGRP}"=""]?Set(HASH(dialparties,PR_DIALSTATUS)=))
exten => s,n,ExecIf($["${USE_CONFIRMATION}"=""]?Set(HASH(dialparties,USE_CONFIRMATION)=FALSE))
exten => s,n,Set(HASH(dialparties,RINGGROUP_INDEX)=${RINGGROUP_INDEX})
exten => s,n,Noop(USE_CONFIRMATION: ${HASH(dialparties,USE_CONFIRMATION)})
exten => s,n,Noop(RINGGROUP_INDEX: ${HASH(dialparties,RINGGROUP_INDEX)})
exten => s,n,ExecIf($["${HASH(dialparties,TIMER)}"=""]?Set(HASH(dialparties,TIMER)=0))
exten => s,n,ExecIf($["${HASH(dialparties,DIALOPTS)}"=""]?Set(HASH(dialparties,DIALOPTS)=))
exten => s,n,ExecIf($["${HASH(dialparties,RGMETHOD)}"=""]?Set(HASH(dialparties,RGMETHOD)=none))
exten => s,n,Noop(Methodology of ring is ${HASH(dialparties,RGMETHOD)})
exten => s,n,Set(HASH(dialparties,RECALL_MASTERMODE)=${HASH(dialparties,RGMETHOD)})
exten => s,n,Gosub(dialparties-setmodes,s,1())
exten => s,n,ExecIf($["${HASH(dialparties,CWIGNORE)}"!="" & "${HASH(dialparties,RGMETHOD)}"="ringallv2"]?Set(__CWIGNORE=))
exten => s,n,GosubIf($["${HASH(dialparties,USE_CONFIRMATION)}"!="FALSE" & "${HASH(dialparties,RGMETHOD)}"!="ringall" & "${HASH(dialparties,RGMETHOD)}"!="ringallv2" & "${HASH(dialparties,RGMETHOD)}"!="hunt" & "${HASH(dialparties,RGMETHOD)}"!="random"]?dialparties-invalidringmethod,s,1())
exten => s,n,Set(I=0)
exten => s,n,Set(ARG_CNT=3)
exten => s,n,While($["${ARG${ARG_CNT}}" != ""])
exten => s,n,Set(TMPARG=${ARG${ARG_CNT}})
exten => s,n,While($["${SET(HASH(dialparties,ext)=${SHIFT(TMPARG,-)})}" != ""])
exten => s,n,Set(HASH(dialparties_EXTLIST,${I})=${HASH(dialparties,ext)})
exten => s,n,Noop(Added extension ${HASH(dialparties,ext)} to extension map)
exten => s,n,Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,Set(ARG_CNT=${MATH(${ARG_CNT}+1,int)})
exten => s,n,EndWhile
exten => s,n,GosubIf($["${HASH(dialparties,RGMETHOD)}"="ringallv2" & "${HASH(dialparties,FMGRP)}"!=""]?dialparties-preringprep,s,1())
exten => s,n,Set(HASH(dialparties,ALREADY_SCREENED)=${SCREEN})
exten => s,n,Set(HASH(dialparties,FROM_OUTSIDE)=${FROM_DID})
exten => s,n,Set(HASH(dialparties,PRIMARY_EXT)=${HASH(dialparties_EXTLIST,0)})
exten => s,n,GosubIf($["${HASH(dialparties,FROM_OUTSIDE)}"!="" & $["${HASH(dialparties,RGMETHOD)}"="none" | "${HASH(dialparties,FMGRP)}"!="${HASH(dialparties,PRIMARY_EXT)}"] & "${HASH(dialparties,SIGNORE)}"="FALSE" & "${HASH(dialparties,ALREADY_SCREENED)}"="" & $["${HASH(dialparties,NODEST)}"="" | "${HASH(dialparties,FMGRP)}"="NODEST"]]?dialparties-callscreencheck,s,1())
exten => s,n,Gosub(dialparties-checkcfextensions,s,1())
exten => s,n,Gosub(dialparties-checkdndextensions,s,1())
exten => s,n,Gosub(dialparties-mainloop,s,1())
exten => s,n,ExecIf($["${HASH(dialparties,FINALDS)}" != "" & ${REGEX("&$" ${HASH(dialparties,FINALDS)})}]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS):0:-1}))
exten => s,n,Noop(Final DS so far is ${HASH(dialparties,FINALDS)})
exten => s,n,GosubIf($["${HASH(dialparties,RGMETHOD)}"="firstnotonphone"]?dialparties-firstnotonphone,s,1())
exten => s,n,Set(Z=0)
exten => s,n,While($["${SET(HASH(dialparties,dsvalue)=${HASH(DSORDEREDARRAY,${Z})})}" != ""])
exten => s,n,Set(FILTERED_DIAL=${FILTERED_DIAL}${HASH(dialparties,dsvalue)}-)
exten => s,n,ExecIf($["${HASH(dialparties,dsvalue)}"!="${HASH(dialparties,FMGRP)}"]?Set(FMGL_DIAL=${FMGL_DIAL}${HASH(DSORDEREDARRAYNOREPLACE,${Z})}-))
exten => s,n,Set(Z=${MATH(${Z}+1,int)})
exten => s,n,EndWhile
exten => s,n,ExecIf($["${FILTERED_DIAL}" != "" & ${REGEX("-$" ${FILTERED_DIAL})}]?Set(FILTERED_DIAL=${FILTERED_DIAL:0:-1}))
exten => s,n,ExecIf($["${FMGL_DIAL}" != "" & ${REGEX("-$" ${FMGL_DIAL})}]?Set(FMGL_DIAL=${FMGL_DIAL:0:-1}))
exten => s,n,Noop(Filtered ARG3: ${FILTERED_DIAL})
exten => s,n,Noop(RING ALL V2: ${FMGL_DIAL})
exten => s,n,Set(HASH(dialparties,HUNT_LOOPS)=0)
exten => s,n,GosubIf($["${HASH(dialparties,RGMETHOD)}"="hunt" | "${HASH(dialparties,RGMETHOD)}"="random" | "${HASH(dialparties,RGMETHOD)}"="memoryhunt" | "${HASH(dialparties,RGMETHOD)}"="firstavailable" | "${HASH(dialparties,RGMETHOD)}"="firstnotonphone"]?dialparties-builddshunt,s,1())
exten => s,n,ExecIf($["${HASH(dialparties,FINALDS)}" != "" & ${REGEX("&$" ${HASH(dialparties,FINALDS)})}]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS):0:-1}))
exten => s,n,Gosub(dialparties-checkblkvm,s,1())
exten => s,n,GosubIf($["${HASH(dialparties,RGMETHOD)}"="ringallv2"]?dialparties-ringallv2,s,1())
exten => s,n,Gosub(dialparties-checkblkvm,s,1())
exten => s,n,ExecIf($["${DIRECTION}"="INBOUND"]?Set(HASH(dialparties,DIALOPTS)=${REPLACE(HASH(dialparties,DIALOPTS),T,)}))
exten => s,n,GosubIf($["${HASH(dialparties,FINALDS)}"!=""]?dialparties-finalbuild,s,1())
exten => s,n,ExecIf($["${HASH(dialparties,FINALDS)}"="" & "${DIALSTATUS}"!=""]?Set(DIALSTATUS=NOANSWER))
exten => s,n,Gosub(dialparties-setrvol,s,1())
exten => s,n,ClearHash(DSORDEREDARRAYNOREPLACE)
exten => s,n,ClearHash(DSORDEREDARRAY)
exten => s,n,ClearHash(DSARRAY)
exten => s,n,ClearHash(dialparties_FMFMLIST)
exten => s,n,ClearHash(dialparties_EXTLIST)
exten => s,n,ClearHash(dialparties_EXT_HUNT)
exten => s,n,Set(ds=${HASH(dialparties,FINALDS)})
exten => s,n,Set(TIMEOUT=${HASH(dialparties,TIMER)})
exten => s,n,Set(DIALOPTS=${HASH(dialparties,DIALOPTS)})
exten => s,n,Noop(Jumping to Priority: ${MACRODIALGOTO_PRI})
exten => s,n,ClearHash(dialparties)
exten => s,n,Noop(End of dialparties)
exten => s,n,Return()

;--== end of [dialparties] ==--;


[dialparties-queuewait]
include => dialparties-queuewait-custom
exten => s,1,Set(ELAPSED=${ROUND(${MATH(${EPOCH}-${QUEUEWAIT},int)}))})
exten => s,n,GotoIf($["${SAVEDCIDNAME}"!=""]?skipsavedcidname)
exten => s,n,Set(__SAVEDCIDNAME=${CIDNAME})
exten => s,n,Set(CALLERID(name)=M:${ELAPSED}:${CIDNAME})
exten => s,n(skipsavedcidname),Set(CALLERID(name)=M:${ELAPSED}:${SAVEDCIDNAME})
exten => s,n,Return()

;--== end of [dialparties-queuewait] ==--;


[dialparties-alertinfo]
include => dialparties-alertinfo-custom
exten => s,1,Noop(Setting Alert-Info:  ${HASH(dialparties,ALERTINFO)})
exten => s,n,ExecIf($["${RVOL}"!=""]?Set(ALERTINFO=${ALERTINFO}\;volume=${RVOL}):Set(ALERTINFO=${ALERTINFO}))
exten => s,n,Set(HASH(__SIPHEADERS,Alert-Info)=${ALERTINFO})
exten => s,n,Return()

;--== end of [dialparties-alertinfo] ==--;


[dialparties-setheader]
include => dialparties-setheader-custom
exten => s,1,Set(HKEY=${CUT(SIPADDHEADER,:,1)})
exten => s,n,Set(HVAL=${CUT(SIPADDHEADER,:,2)})
exten => s,n,Set(HASH(__SIPHEADERS,${HKEY})=${HVAL})
exten => s,n,Return()

;--== end of [dialparties-setheader] ==--;


[dialparties-setmodes]
include => dialparties-setmodes-custom
exten => s,1,GotoIf($["${DIALPLAN_EXISTS(dialparties-setmodes,${HASH(dialparties,RGMETHOD)},1)}"="1"]?${HASH(dialparties,RGMETHOD)},1:default,1)

exten => ringall-prim,1,Set(HASH(dialparties,RGMETHOD)=ringall)
exten => ringall-prim,n,Set(HASH(dialparties,MASTERMODE)=1)
exten => ringall-prim,n,Return()

exten => hunt-prim,1,Set(HASH(dialparties,RGMETHOD)=hunt)
exten => hunt-prim,n,Set(HASH(dialparties,MASTERMODE)=1)
exten => hunt-prim,n,Return()

exten => memoryhunt-prim,1,Set(HASH(dialparties,RGMETHOD)=memoryhunt)
exten => memoryhunt-prim,n,Set(HASH(dialparties,MASTERMODE)=1)
exten => memoryhunt-prim,n,Return()

exten => ringallv2-prim,1,Set(HASH(dialparties,RGMETHOD)=ringallv2)
exten => ringallv2-prim,n,Set(HASH(dialparties,MASTERMODE)=1)
exten => ringallv2-prim,n,Return()

exten => default,1,Set(HASH(dialparties,PR_DIALSTATUS)=)
exten => default,n,Set(HASH(dialparties,MASTERMODE)=0)
exten => default,n,Return()

;--== end of [dialparties-setmodes] ==--;


[dialparties-preringprep]
include => dialparties-preringprep-custom
exten => s,1,Set(HASH(dialparties,FMGRP_PRIMARYREMOVED)=0)
exten => s,n,Set(HASH(dialparties,FMGRP_PRERING)=${DB(AMPUSER/${HASH(dialparties,FMGRP)}/followme/prering)})
exten => s,n,ExecIf($["${HASH(dialparties,FMGRP_PRERING)}" <= "1"]?Set(HASH(dialparties,FMGRP_PRERING)=2))
exten => s,n,Set(HASH(dialparties,FMGRP_GRPTIME)=${DB(AMPUSER/${HASH(dialparties,FMGRP)}/followme/grptime)})
exten => s,n,Noop(got fmgrp_prering: ${HASH(dialparties,FMGRP_PRERING)}, fmgrp_grptime: ${HASH(dialparties,FMGRP_GRPTIME)})
exten => s,n,Set(HASH(dialparties,FMGRP_TOTALPRERING)=${MATH(${HASH(dialparties,FMGRP_GRPTIME)} + ${HASH(dialparties,FMGRP_PRERING)},int)})
exten => s,n,Noop(fmgrp_totalprering: ${HASH(dialparties,FMGRP_TOTALPRERING)})
exten => s,n,Set(HASH(dialparties,FMGRP_REALPRERING)=${HASH(dialparties,FMGRP_TOTALPRERING)})
exten => s,n,Set(I=1)
exten => s,n,Set(EXTLISTKEYS=${HASHKEYS(dialparties_EXTLIST)})
exten => s,n,While($["${SET(HASH(dialparties,ext)=${SHIFT(EXTLISTKEYS)})}" != ""])
exten => s,n,Set(HASH(dialparties,extval)=${HASH(dialparties_EXTLIST,${HASH(dialparties,ext)})})
exten => s,n,GotoIf($["${HASH(dialparties,extval)}"="${FMGRP}"]?found)
exten => s,n,Set(HASH(dialparties_FMFMLIST,${I})=${HASH(dialparties,extval)})
exten => s,n,Set(I=${MATH(${I}+1,int)})
exten => s,n,Goto(next1)
exten => s,n(found),Noop(found extension in pre-ring and array)
exten => s,n,Set(HASH(dialparties,FMGRP_REALPRERING)=${HASH(dialparties,FMGRP_PRERING)})
exten => s,n(next1),EndWhile
exten => s,n,Set(HASH(dialparties_FMFMLIST,0)=${HASH(dialparties,FMGRP)})
exten => s,n,ClearHash(dialparties_EXTLIST)
exten => s,n,Set(EXTLISTKEYS=${HASHKEYS(dialparties_FMFMLIST)})
exten => s,n,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,ext)=${SHIFT(EXTLISTKEYS)})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties_FMFMLIST,${HASH(dialparties,ext)})}"=""]?next2)
exten => s,n,Set(HASH(dialparties_EXTLIST,${I})=${HASH(dialparties_FMFMLIST,${HASH(dialparties,ext)})})
exten => s,n,Set(I=${MATH(${I}+1,int)})
exten => s,n(next2),EndWhile
exten => s,n,Noop(ringallv2 ring times: REALPRERING: ${HASH(dialparties,FMGRP_REALPRERING)}, PRERING: ${HASH(dialparties,FMGRP_PRERING)})
exten => s,n,Return()

;--== end of [dialparties-preringprep] ==--;


[dialparties-callscreencheck]
include => dialparties-callscreencheck-custom
exten => s,1,Set(HASH(dialparties,SCREEN_CALL)=${DB(AMPUSER/${PRIMARY_EXT}/screen)})
exten => s,n,GotoIf($["${HASH(dialparties,SCREEN_CALL)}"!=""]?return)
exten => s,n,GotoIf($["${HASH(dialparties,SCREEN_CALL)}"="nomemory" & "${HASH(dialparties,CIDNUM)}"!="" & ${REGEX("[^ a-zA-Z\d]" ${HASH(dialparties,CIDNUM)})}]?return)
exten => s,n,System(rm -f ${ASTVARLIBDIR}/sounds/priv-callerintros/${HASH(dialparties,CIDNUM)}.*)
exten => s,n,Set(SCREEN=TRUE)
exten => s,n,Set(__SCREEN=${HASH(dialparties,SCREEN_CALL)})
exten => s,n,Set(__SCREEN_EXTEN=${HASH(dialparties,PRIMARY_EXT)})
exten => s,n,Noop(Extension ${HASH(dialparties,PRIMARY_EXT)} has call screening on)
exten => s,n,Goto(exit)
exten => s,n(return),Noop(Extension ${HASH(dialparties,PRIMARY_EXT)} has call screening off)
exten => s,n(exit),Return()

;--== end of [dialparties-callscreencheck] ==--;


[dialparties-checkcfextensions]
include => dialparties-checkcfextensions-custom
exten => s,1,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}"=""]?next)
exten => s,n,Noop(Working with extension ${HASH(dialparties,workingext)})
exten => s,n,GotoIf($[${REGEX("#$" ${HASH(dialparties,workingext)})}]?skipcf)
exten => s,n,Set(HASH(dialparties,CF)=${DB(CF/${HASH(dialparties,workingext)})})
exten => s,n,GotoIf($["${HASH(dialparties,CF)}"=""]?nocf)
exten => s,n,ExecIf($["${AMPUSER}" = ""]?Set(HASH(dialparties,AMPUSER)=${CIDNUM}):Set(HASH(dialparties,AMPUSER)=${AMPUSER}))
exten => s,n,GotoIf($["${AMPUSER}" = "${HASH(dialparties,CF)}" | ${REALCALLERIDNUM} = ${CF} | "${CUT(BLINDTRANSFER,/${HASH(dialparties,CF)}-)}" != ""]?ignored)
exten => s,n,GotoIf($["${HASH(dialparties,CFIGNORE)}" != ""]?cfignore)
exten => s,n,Set(HASH(dialparties_EXTLIST,${I})=${CF}#)
exten => s,n,Noop(Extension ${HASH(dialparties,workingext)} has call forward set to ${HASH(dialparties,CF)})
exten => s,n,GotoIf($["${HASH(dialparties,RGMETHOD)}" != "none"]?next)
exten => s,n,Set(__DIVERSION_REASON=unconditional)
exten => s,n,Set(HASH(dialparties,CFRT)=${DB(AMPUSER/${HASH(dialparties,workingext)}/cfringtimer)})
exten => s,n,GotoIf($["${HASH(dialparties,CFRT)}" = ""]?next)
exten => s,n,ExecIf($["${HASH(dialparties,CFRT)}" < "0"]?Set(HASH(dialparties,CFRT)=))
exten => s,n,Noop(Ring timer changed to CF ringtimer value of ${HASH(dialparties,CFRT)})
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}" != "${HASH(dialparties,PRIMARY_EXT)}"]?next)
exten => s,n,Set(HASH(dialparties,MASTERMODE)=0)
exten => s,n,Set(PR_DIALSTATUS=)
exten => s,n,Goto(next)
exten => s,n(cfignore),Set(HASH(dialparties_EXTLIST,${I}))=)
exten => s,n,Noop(Extension ${HASH(dialparties,workingext)} has call forward set to ${HASH(dialparties,CF)})
exten => s,n,Set(DIALSTATUS=NOANSWER)
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}" = "${HASH(dialparties,CF)}"]?loop)
exten => s,n,Goto(next)
exten => s,n(loop),Noop(Loop detected, extension ${HASH(dialparties,workingext)} cf is ignored)
exten => s,n,Goto(next)
exten => s,n(ignored),Noop(Extension ${HASH(dialparties,workingext)} cf is ignored)
exten => s,n,Goto(next)
exten => s,n(skipcf),Noop(Extension ${HASH(dialparties,workingext)} appears to be CF, skipping checks)
exten => s,n,Goto(next)
exten => s,n(nocf),Noop(Extension ${HASH(dialparties,workingext)} cf is disabled)
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,Return()

;--== end of [dialparties-checkcfextensions] ==--;


[dialparties-checkdndextensions]
include => dialparties-checkdndextensions-custom
exten => s,1,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}"=""]?next)
exten => s,n,Noop(Working with extension ${HASH(dialparties,workingext)})
exten => s,n,GotoIf($[${REGEX("#$" ${HASH(dialparties,workingext)})}]?skipdnd)
exten => s,n,Set(HASH(dialparties,DND)=${DB(DND/${HASH(dialparties,workingext)})})
exten => s,n,GotoIf($["${HASH(dialparties,DND)}"!="" | "${PR_DIALSTATUS}"="BUSY"]?dnd:nodnd)
exten => s,n(dnd),Noop(Extension ${HASH(dialparties,workingext)} has do not disturb enabled, or followme pre-ring returned busy)
exten => s,n,Set(HASH(dialparties_EXTLIST,${I})=)
exten => s,n,Set(DIALSTATUS=BUSY)
exten => s,n,GotoIf($["${HASH(dialparties,PRIMARY_EXT)}"="${HASH(dialparties,workingext)}" & "${HASH(dialparties,MASTERMODE)}"="1"]?skipremaining:primarycheck)
exten => s,n(skipremaining),Set(HASH(dialparties,SKIPREMAINING)=1)
exten => s,n,Noop(Primary extension is DND, so if mastermode, all should be dnd)
exten => s,n,Goto(next)
exten => s,n(primarycheck),GotoIf($["${HASH(dialparties,PRIMARY_EXT)}"!="${HASH(dialparties,workingext)}"]?next)
exten => s,n,Set(HASH(dialparties,FMGRP_PRIMARYREMOVED)=1)
exten => s,n,Goto(next)
exten => s,n(skipdnd),Noop(Extension ${HASH(dialparties,workingext)} appears to be CF, skipping checks)
exten => s,n,Goto(next)
exten => s,n(nodnd),Noop(Extension ${HASH(dialparties,workingext)} do not disturb is disabled)
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n(exit),Return()

;--== end of [dialparties-checkdndextensions] ==--;


[dialparties-isextavail]
include => dialparties-isextavail-custom
exten => s,1,Set(HASH(dialparties,EXTSTATESTATUS)=)
exten => s,n,ExecIf($["${AMPUSER}" = "${ARG1}"]?Set(HASH(dialparties,EXTSTATE_RESULT)=INUSE_ORIGINATOR):Set(HASH(dialparties,EXTSTATE_RESULT)=${EXTENSION_STATE(${ARG1}@ext-local)}))
exten => s,n,GotoIf($["${DIALPLAN_EXISTS(dialparties-isextavail,${HASH(dialparties,EXTSTATE_RESULT)},1)}"="1"]?${HASH(dialparties,EXTSTATE_RESULT)},1:default,1)

exten => NOT_INUSE,1,Set(HASH(dialparties,EXTSTATESTATUS)=0)
exten => NOT_INUSE,n,Goto(finish,1)

exten => INUSE_ORIGINATOR,1,Set(HASH(dialparties,EXTSTATESTATUS)=1)
exten => INUSE_ORIGINATOR,n,Goto(finish,1)

exten => INUSE,1,Set(HASH(dialparties,EXTSTATESTATUS)=1)
exten => INUSE,n,Goto(finish,1)

exten => BUSY,1,Set(HASH(dialparties,EXTSTATESTATUS)=2)
exten => BUSY,n,Goto(finish,1)

exten => RINGING,1,Set(HASH(dialparties,EXTSTATESTATUS)=8)
exten => RINGING,n,Goto(finish,1)

exten => RINGINUSE,1,Set(HASH(dialparties,EXTSTATESTATUS)=9)
exten => RINGINUSE,n,Goto(finish,1)

exten => HOLDINUSE,1,Set(HASH(dialparties,EXTSTATESTATUS)=10)
exten => HOLDINUSE,n,Goto(finish,1)

exten => ONHOLD,1,Set(HASH(dialparties,EXTSTATESTATUS)=16)
exten => ONHOLD,n,Goto(finish,1)

exten => UNAVAILABLE,1,Set(HASH(dialparties,EXTSTATESTATUS)=4)
exten => UNAVAILABLE,n,Goto(finish,1)

exten => UNKNOWN,1,Set(HASH(dialparties,EXTSTATESTATUS)=4)
exten => UNKNOWN,n,Goto(finish,1)

exten => default,1,Set(HASH(dialparties,EXTSTATESTATUS)=4)
exten => default,n,Goto(finish,1)

exten => finish,1,Noop(EXTENSION_STATE: ${HASH(dialparties,EXTSTATESTATUS)} (${HASH(dialparties,EXTSTATE_RESULT)}))
exten => finish,n,Return(${HASH(dialparties,EXTSTATESTATUS)})

;--== end of [dialparties-isextavail] ==--;


[dialparties-mainloop]
include => dialparties-mainloop-custom
exten => s,1,Set(I=0)
exten => s,n,Set(HASH(dialparties,EXTLISTCOUNT)=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}"=""]?next)
exten => s,n,Set(HASH(dialparties,EXTLISTCOUNT)=${MATH(${HASH(dialparties,EXTLISTCOUNT)} + 1,int)})
exten => s,n,Noop(Working with extension ${HASH(dialparties,workingext)})
exten => s,n,Gosub(dialparties-isextavail,s,1(${HASH(dialparties,workingext)}))
exten => s,n,GotoIf($["${HASH(dialparties,SKIPREMAINING)}" = "1"]?next)
exten => s,n,ExecIf($["${HASH(dialparties,CWIGNORE)}" != ""]?Set(HASH(dialparties,EXTHASCW)=0):Set(HASH(dialparties,EXTHASCW)=${DB(CW/${HASH(dialparties,workingext)})}))
exten => s,n,ExecIf($["${HASH(dialparties,EXTHASCW)}" = ""]?Set(HASH(dialparties,EXTHASCW)=0))
exten => s,n,Set(HASH(dialparties,EXTCFB)=${DB(CFB/${HASH(dialparties,workingext)})})
exten => s,n,ExecIf($["${HASH(dialparties,EXTCFB)}" != ""]?Set(HASH(dialparties,EXTHASCFB)=1):Set(HASH(dialparties,EXTHASCFB)=0))
exten => s,n,Set(HASH(dialparties,EXTCFU)=${DB(CFU/${HASH(dialparties,workingext)})})
exten => s,n,ExecIf($["${HASH(dialparties,EXTCFU)}" != ""]?Set(HASH(dialparties,EXTHASCFU)=1):Set(HASH(dialparties,EXTHASCFU)=0))
exten => s,n,Noop(extnum ${HASH(dialparties,workingext)} has:: cw: ${HASH(dialparties,EXTHASCW)}, hascfb: ${HASH(dialparties,EXTHASCFB)} [${HASH(dialparties,EXTCFB)}], hascfu: ${HASH(dialparties,EXTHASCFU)} [${HASH(dialparties,EXTCFU)}])
exten => s,n,GotoIf($["${HASH(dialparties,MASTERMODE)}"!="1"]?finishmastermodecwchecks)
exten => s,n,Set(HASH(dialparties,MASTERMODE)=0)
exten => s,n,GotoIf($[$["${HASH(dialparties,EXTHASCW)}" = "1" & "${HASH(dialparties,EXTSTATESTATUS)}" != "0" & "${HASH(dialparties,EXTSTATESTATUS)}" != "4"] = 0]?checknocw)
exten => s,n,Set(HASH(dialparties,SKIPREMAINING)=1)
exten => s,n,Noop(In mastermode with cw enabled so ${HASH(dialparties,workingext)} will be tried and others skipped)
exten => s,n,Goto(finishmastermodecwchecks)
exten => s,n(checknocw),GotoIf($[$["${HASH(dialparties,EXTHASCW)}" = "0" & "${HASH(dialparties,EXTSTATESTATUS)}" != "0" & "${HASH(dialparties,EXTSTATESTATUS)}" != "4"] = 0]?finishmastermodecwchecks)
exten => s,n,Set(HASH(dialparties,SKIPREMAINING)=1)
exten => s,n,Noop(In mastermode with cw enabled so ${HASH(dialparties,workingext)} will be processed in case cfb set)
exten => s,n,Goto(finishmastermodecwchecks)
exten => s,n(finishmastermodecwchecks),Noop(Extension ${HASH(dialparties,workingext)} has ExtensionState: ${HASH(dialparties,EXTSTATESTATUS)})
exten => s,n,Gosub(dialparties-checkcfextension,s,1())
exten => s,n,Noop(Now working with: ${HASH(dialparties,workingext)})
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}" = ""]?next)
exten => s,n,Set(HASH(dialparties,REALEXT)=${REPLACE(HASH(dialparties,workingext),#,)})
exten => s,n,GotoIf($["${HASH(DSARRAY,${HASH(dialparties,REALEXT)})}" != ""]?inhash)
exten => s,n,Set(HASH(DSARRAY,${HASH(dialparties,REALEXT)})=1)
exten => s,n,Set(HASH(DSORDEREDARRAY,${I})=${HASH(dialparties,REALEXT)})
exten => s,n,Set(HASH(DSORDEREDARRAYNOREPLACE,${I})=${HASH(dialparties,workingext)})
exten => s,n,Gosub(dialparties-getdialstring,s,1())
exten => s,n,GotoIf($["${HASH(dialparties,DIALSTRING)}" = ""]?updatecallerid)
exten => s,n,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}${HASH(dialparties,DIALSTRING)})
exten => s,n(updatecallerid),Gosub(dialparties-call-trace,s,1())
exten => s,n,Goto(next)
exten => s,n(inhash),Noop(${HASH(dialparties,REALEXT)} already in the dialstring, ignoring duplicate)
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n(exit),Return()

;--== end of [dialparties-mainloop] ==--;


[dialparties-checkcfextension]
include => dialparties-checkcfextension-custom
exten => s,1,GotoIf($[${REGEX("#$" ${HASH(dialparties,workingext)})}]?return)
exten => s,n,GotoIf($["${HASH(dialparties,EXTHASCW)}"="0" | "${HASH(dialparties,EXTHASCFB)}"="1" | "${HASH(dialparties,EXTHASCFU)}"="1"]?check1,1)
exten => s,n,GotoIf($["${HASH(dialparties,RGMETHOD)}"="none" | "${HASH(dialparties,EXTHASCW)}"="1" | "${HASH(dialparties,CWINUSEBUSY)}"!=""]?check2,1)
exten => s,n,GotoIf($["${HASH(dialparties,EXTHASCW)}"="1" | "${HASH(dialparties,RGMETHOD)}"="firstnotonphone"]?check3,1)
exten => s,n,GotoIf($["${HASH(dialparties,RGMETHOD)}"="firstavailable"]?check4,1)
exten => s,n(return),Return()

exten => check1,1,GotoIf($["${HASH(dialparties,EXTHASCFU)}"="1" & "${HASH(dialparties,EXTSTATESTATUS)}" != "4"]?check1-1,1)
exten => check1,n,GotoIf($["${HASH(dialparties,EXTHASCW)}"="0" | "${HASH(dialparties,EXTHASCFB)}"="1"]?check1-2,1)
exten => check1,n,GotoIf($["${HASH(dialparties,EXTSTATESTATUS)}" < "0"]?check1-3,1)
exten => check1,n,Goto(s,return)

exten => check1-1,1,GotoIf($["${HASH(dialparties,RGMETHOD)}"!="" & "${HASH(dialparties,RGMETHOD)}" != "none" & "${HASH(dialparties,CFIGNORE)}"=""]?check1-1-1,1)
exten => check1-1,n,Noop(Extension ${HASH(dialparties,workingext)} has call forward on no answer set and is unavailable)
exten => check1-1,n,Set(DIALSTATUS=NOANSWER)
exten => check1-1,n,Set(HASH(dialparties,workingext)=)
exten => check1-1,n,Goto(s,return)

exten => check1-1-1,1,Noop(Extension ${HASH(dialparties,workingext)} has call forward on no answer set and is unavailable and is part of a Ring Group forwarding to ${HASH(dialparties,EXTCFU)})
exten => check1-1-1,n,Set(HASH(dialparties,workingext)=${HASH(dialparties,workingext)}#)
exten => check1-1-1,n,Goto(s,return)

exten => check1-2,1,Noop(Checking CW and CFB status for extension ${HASH(dialparties,workingext)})
exten => check1-2,n,GotoIf($["${HASH(dialparties,EXTSTATESTATUS)}">"0" & "${HASH(dialparties,EXTSTATESTATUS)}" != "4"]?check1-2-1,1)
exten => check1-2,n,GotoIf($["${HASH(dialparties,EXTSTATESTATUS)}"="4"]?check1-2-2,1)
exten => check1-2,n,Goto(s,return)

exten => check1-2-1,1,Noop(Extension ${HASH(dialparties,workingext)} is not available to be called)
exten => check1-2-1,n,GotoIf($["${HASH(dialparties,EXTHASCFB)}"="1" & "${HASH(dialparties,CFIGNORE)}"="" & "${HASH(dialparties,EXTHASCW)}"="0"]?check1-2-1-1,1)
exten => check1-2-1,n,GotoIf($["${HASH(dialparties,EXTHASCW)}"="0"]?check1-2-1-2,1)
exten => check1-2-1,n,Noop(Extension ${HASH(dialparties,workingext)} has call waiting enabled)
exten => check1-2-1,n,Goto(s,return)

exten => check1-2-1-1,1,GotoIf($["${HASH(dialparties,RGMETHOD)}"="0"]?check1-2-1-1-1,1)
exten => check1-2-1-1,n,Noop(Extension ${HASH(dialparties,workingext)} has call forward on busy set to ${HASH(dialparties,EXTCFB)})
exten => check1-2-1-1,n,Set(HASH(dialparties,workingext)=${HASH(dialparties,EXTCFB)}#)
exten => check1-2-1-1,n,Goto(s,return)

exten => check1-2-1-1-1,1,Noop(Extension ${HASH(dialparties,workingext)} has call forward on busy set to ${HASH(dialparties,EXTCFB)}, dropping to macro-dial)
exten => check1-2-1-1-1,n,Set(HASH(dialparties,workingext)=)
exten => check1-2-1-1-1,n,Set(DIALSTATUS=BUSY)
exten => check1-2-1-1-1,n,Set(__DIVERSION_REASON=user-busy)
exten => check1-2-1-1-1,n,Goto(s,return)

exten => check1-2-1-2,1,Noop(Extension ${HASH(dialparties,workingext)} has call waiting disabled)
exten => check1-2-1-2,n,Set(HASH(dialparties,workingext)=)
exten => check1-2-1-2,n,Set(DIALSTATUS=BUSY)
exten => check1-2-1-2,n,Set(__DIVERSION_REASON=user-busy)
exten => check1-2-1-2,n,Goto(s,return)

exten => check1-2-2,1,Noop(Extension ${HASH(dialparties,workingext)} is not available to be called)
exten => check1-2-2,n,Set(HASH(dialparties,workingext)=)
exten => check1-2-2,n,Goto(s,return)

exten => check1-3,1,Noop(ExtensionState for ${HASH(dialparties,workingext)} could not be read...assuming ok)
exten => check1-3,n,Goto(s,return)

exten => check2,1,GotoIf($["${EXTSTATESTATUS}">"0" & "${EXTSTATESTATUS}" != "4"]?check2-1,1)
exten => check2,n,Goto(s,return)

exten => check2-1,1,Set(DIALSTATUS_CW=BUSY)
exten => check2-1,n,Noop(Extension ${HASH(dialparties,workingext)} has call waiting enabled with state: ${EXTSTATESTATUS})
exten => check2-1,n,Goto(s,return)

exten => check3,1,Noop(Extension ${HASH(dialparties,workingext)} has ExtensionState: ${EXTSTATESTATUS})
exten => check3,n,GotoIf($["${EXTSTATESTATUS}" != "0"]?check3-1,1)
exten => check3,n,Goto(s,return)

exten => check3-1,1,Noop(Extension ${HASH(dialparties,workingext)} has call waiting enabled but blocked for hunt)
exten => check3-1,n,Set(HASH(dialparties,workingext)=)
exten => check3-1,n,Set(DIALSTATUS=BUSY)
exten => check3-1,n,Goto(s,return)

exten => check4,1,Noop(Extension ${HASH(dialparties,workingext)} has ExtensionState: ${EXTSTATESTATUS})
exten => check4,n,GotoIf($["${EXTSTATESTATUS}" = "4"]?check4-1,1)
exten => check4,n,Goto(s,return)

exten => check4-1,1,Noop(Extension ${HASH(dialparties,workingext)} is unavailable so dont include in firstavailable hunt)
exten => check4-1,n,Set(HASH(dialparties,workingext)=)
exten => check4-1,n,Set(DIALSTATUS=BUSY)
exten => check4-1,n,Goto(s,return)

;--== end of [dialparties-checkcfextension] ==--;


[dialparties-getdialstring]
include => dialparties-getdialstring-custom
exten => s,1,Set(HASH(dialparties,DIALSTRING)=)
exten => s,n,GotoIf($[$[${REGEX("#" ${HASH(dialparties,workingext)})}] = 0]?internal,1)
exten => s,n,Set(HASH(dialparties,workingext)=${REPLACE(HASH(dialparties,workingext),#,)})
exten => s,n,ExecIf($["${HASH(dialparties,USE_CONFIRMATION)}"="FALSE"]?Set(HASH(dialparties,DIALSTRING)=Local/${HASH(dialparties,workingext)}@from-internal/n&):Set(HASH(dialparties,DIALSTRING)=Local/RG-${HASH(dialparties,RINGGROUP_INDEX)}*-${HASH(dialparties,workingext)}#@from-internal&))
exten => s,n,Noop(Built External dialstring component for ${HASH(dialparties,workingext)}: ${HASH(dialparties,DIALSTRING)})
exten => s,n,Return()

exten => internal,1,Set(DEVICES=${DB(AMPUSER/${HASH(dialparties,workingext)}/device)})
exten => internal,n,While($["${SET(DEVICE=${SHIFT(DEVICES,&)})}" != ""])
exten => internal,n,Noop(Working with device ${DEVICE})
exten => internal,n,GotoIf($["${HASH(dialparties,USE_CONFIRMATION)}"!="FALSE"]?useconfirmation)
exten => internal,n,Set(HASH(dialparties,DEVICE_DS)=${DB(DEVICE/${DEVICE}/dial)})
exten => internal,n,GotoIf($[${REGEX("^PJSIP" ${HASH(dialparties,DEVICE_DS)})}]?pjsip:setds)
exten => internal,n(pjsip),Noop(Discovered PJSIP Endpoint ${HASH(dialparties,DEVICE_DS)})
exten => internal,n,Set(HASH(dialparties,DEVICE_DS)=${PJSIP_DIAL_CONTACTS(${HASH(dialparties,DEVICE_DS):6})})
exten => internal,n,GotoIf($["${HASH(dialparties,DEVICE_DS)}"!=""]?foundcontacts:nocontacts)
exten => internal,n(foundcontacts),Noop(Discovered PJSIP Endpoint ${HASH(dialparties,DEVICE_DS)})
exten => internal,n,Goto(setds)
exten => internal,n(nocontacts),Noop(Discovered PJSIP Endpoint ${HASH(dialparties,DEVICE_DS)})
exten => internal,n,Goto(next)
exten => internal,n(setds),Set(HASH(dialparties,DIALSTRING)=${HASH(dialparties,DIALSTRING)}${HASH(dialparties,DEVICE_DS)}&)
exten => internal,n,Goto(next)
exten => internal,n(useconfirmation),Set(HASH(dialparties,DIALSTRING)=Local/LC-${DEVICE}@from-internal&)
exten => internal,n,Goto(next)
exten => internal,n(next),EndWhile
exten => internal,n,Return()

;--== end of [dialparties-getdialstring] ==--;


[dialparties-call-trace]
include => dialparties-call-trace-custom
exten => s,1,GotoIf($["${REGEX("#$" ${HASH(dialparties,workingext)})}" = "0" && $["${HASH(dialparties,RGMETHOD)}"="hunt" | "${HASH(dialparties,RGMETHOD)}"="random" | "${HASH(dialparties,RGMETHOD)}"="memoryhunt" | "${HASH(dialparties,RGMETHOD)}"="firstavailable" | "${HASH(dialparties,RGMETHOD)}"="firstnotonphone"]]?notrace)
exten => s,n,ExecIf($["${HASH(dialparties,CIDNUM)}"!=""]?Set(DB(CALLTRACE/${HASH(dialparties,workingext)})})=${HASH(dialparties,CIDNUM)}):Noop(DbDel CALLTRACE/${HASH(dialparties,workingext)} - Caller ID is not defined. ${DB_DELETE(CALLTRACE/${HASH(dialparties,workingext)})}))
exten => s,n,Goto(return)
exten => s,n(notrace),Set(HASH(dialparties_EXT_HUNT,${HASH(dialparties,workingext)})=${HASH(dialparties,DIALSTRING)})
exten => s,n(return),Return()

;--== end of [dialparties-call-trace] ==--;


[dialparties-firstnotonphone]
include => dialparties-firstnotonphone-custom
exten => s,1,Set(I=0)
exten => s,n,Set(Z=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,Gosub(dialparties-isextavail,s,1(${HASH(dialparties,workingext)}))
exten => s,n,GotoIf($["${GOSUB_RETVAL}"!="0"]?next)
exten => s,n,Set(HASH(dialparties_EXTENAVAIL,${Z})=${HASH(dialparties,workingext)})
exten => s,n,Set(HASH(dialparties_DSARRAYNEW,${HASH(dialparties,workingext)})=1)
exten => s,n,Set(Z=${MATH(${Z}+1,int)})
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties_DSARRAYNEW,${HASH(dialparties,workingext)})}"=""]?next1)
exten => s,n,Set(HASH(dialparties_EXTENAVAIL,${I})=${HASH(dialparties,workingext)})
exten => s,n,Set(HASH(dialparties_DSARRAYNEW,${HASH(dialparties,workingext)})=1)
exten => s,n,Set(Z=${MATH(${Z}+1,int)})
exten => s,n(next1),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,ClearHash(dialparties_EXTLIST)
exten => s,n,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTENAVAIL,${I})})}" != ""])
exten => s,n,Set(HASH(dialparties_EXTENAVAIL,${I})=${HASH(dialparties,workingext)})
exten => s,n(next2),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,ClearHash(dialparties_EXTENAVAIL)
exten => s,n,ClearHash(dialparties_DSARRAYNEW)
exten => s,n,Return()

;--== end of [dialparties-firstnotonphone] ==--;


[dialparties-builddshunt]
include => dialparties-builddshunt-custom
exten => s,1,GotoIf($["${HASH(dialparties,CIDNUM)}"=""]?return)
exten => s,n,Set(DB(CALLTRACE/${HASH(dialparties,workingext)})})=${HASH(dialparties,CIDNUM)})
exten => s,n,GosubIf($["${HASH(dialparties,RGMETHOD)}"="random"]?dialparties-builddshunt-shuffle,s,1())
exten => s,n,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties_EXT_HUNT,${HASH(dialparties,workingext)})}"=""]?next)
exten => s,n,Set(HASH(dialparties,myhuntmember)=HuntMember${HASH(dialparties,HUNT_LOOPS)})
exten => s,n,GotoIf($[$["${HASH(dialparties,RGMETHOD)}"="hunt" | "${HASH(dialparties,RGMETHOD)}"="random" | "${HASH(dialparties,RGMETHOD)}"="firstavailable" | "${HASH(dialparties,RGMETHOD)}"="firstnotonphone"] = 0]?memoryhunt)
exten => s,n,Set(${HASH(dialparties,myhuntmember)}=${HASH(dialparties_EXT_HUNT,${HASH(dialparties,workingext)})})
exten => s,n,Goto(increaseloopcount)
exten => s,n(memoryhunt),GotoIf($["${HASH(dialparties,RGMETHOD)}"!="memoryhunt"]?increaseloopcount)
exten => s,n,ExecIf($["${HASH(dialparties,HUNT_LOOPS)}"="0"]?Set(HASH(dialparties,DSHUNT)=${HASH(dialparties_EXT_HUNT,${HASH(dialparties,workingext)})}):Set(HASH(dialparties,DSHUNT)=${HASH(dialparties,DSHUNT)}${HASH(dialparties_EXT_HUNT,${HASH(dialparties,workingext)})}))
exten => s,n,Set(${HASH(dialparties,myhuntmember)}=${HASH(dialparties,DSHUNT)})
exten => s,n(increaseloopcount),ExecIf($["${${HASH(dialparties,myhuntmember)}}" != "" & ${REGEX("&$" ${${HASH(dialparties,myhuntmember)}})}]?Set(${HASH(dialparties,myhuntmember)}=${${HASH(dialparties,myhuntmember)}:0:-1}))
exten => s,n,Set(HASH(dialparties,HUNT_LOOPS)=${MATH(${HASH(dialparties,HUNT_LOOPS)}+1,int)})
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n(return),Return()

;--== end of [dialparties-builddshunt] ==--;


[dialparties-builddshunt-shuffle]
include => dialparties-builddshunt-shuffle-custom
exten => s,1,Set(I=0)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,Set(rand=${RAND(0,5000)})
exten => s,n,While($["${HASH(dialparties_EXTLISTRAND,${HASH(dialparties,workingext)}:${rand})}"!=""])
exten => s,n,Set(rand=${RAND(0,5000)})
exten => s,n,EndWhile
exten => s,n,Set(HASH(dialparties_EXTLISTRAND,${HASH(dialparties,workingext)}:${rand})=${HASH(dialparties,workingext)})
exten => s,n,Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,ClearHash(dialparties_EXTLIST)
exten => s,n,Set(dialparties_EXTLISTRANDKEYS=${SORT(${HASHKEYS(dialparties_EXTLISTRAND)})})
exten => s,n,Set(I=0)
exten => s,n,While($["${SET(dialparties_EXTLISTRANDKEY=${SHIFT(dialparties_EXTLISTRANDKEYS)})}" != ""])
exten => s,n,Set(HASH(dialparties_EXTLIST,${I})=${dialparties_EXTLISTRANDKEY})
exten => s,n,Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,ClearHash(dialparties_EXTLISTRAND)
exten => s,n,Return()

;--== end of [dialparties-builddshunt-shuffle] ==--;


[dialparties-checkblkvm]
include => dialparties-checkblkvm-custom
exten => s,1,GotoIf($[$["${HASH(dialparties,NODEST)}"!="" & "${HASH(dialparties,USE_CONFIRMATION)}"="FALSE"] = 0]?endblkvm)
exten => s,n,GotoIf($[$[${REGEX("macro-auto-blkvm" ${HASH(dialparties,DIALOPTS)})} | ${REGEX("auto-confirm" ${HASH(dialparties,DIALOPTS)})} | ${REGEX("confirm" ${HASH(dialparties,DIALOPTS)})}] = 0]?addblkvm)
exten => s,n,Noop(NODEST: ${HASH(dialparties,NODEST)} blkvm enabled macro already in dialopts: ${HASH(dialparties,DIALOPTS)})
exten => s,n,Goto(endblkvm)
exten => s,n(addblkvm),Set(HASH(dialparties,DIALOPTS)=${HASH(dialparties,DIALOPTS)}U(macro-auto-blkvm))
exten => s,n,Noop(NODEST: ${HASH(dialparties,NODEST)} adding U(macro-auto-blkvm) to dialopts: ${HASH(dialparties,DIALOPTS)})
exten => s,n(endblkvm),Return()

;--== end of [dialparties-checkblkvm] ==--;


[dialparties-ringallv2]
include => dialparties-ringallv2-custom
exten => s,1,GotoIf($["${HASH(dialparties,SKIPREMAINING)}" = "1" | $["${HASH(dialparties,EXTLISTCOUNT)}"="1" & "${HASH(dialparties,FMGRP_PRIMARYREMOVED)}"="0"]]?timerrealprering,1)
exten => s,n,GotoIf($["${HASH(dialparties,EXTLISTCOUNT)}"="1" & "${HASH(dialparties,FMGRP_PRIMARYREMOVED)}"="1"]?timergrptime,1)
exten => s,n,GotoIf($["${HASH(dialparties,EXTLISTCOUNT)}"="1"]?timertotalprering,1)
exten => s,n,Set(HASH(dialparties,TIMER)=${HASH(dialparties,FMGRP_TOTALPRERING)})
exten => s,n,Set(HASH(dialparties,FINALDS)=Local/FMPR-${HASH(dialparties_EXTLIST,0)}@from-internal&Local/FMGL-)
exten => s,n,Set(I=1)
exten => s,n,While($["${SET(HASH(dialparties,workingext)=${HASH(dialparties_EXTLIST,${I})})}" != ""])
exten => s,n,GotoIf($["${HASH(dialparties,workingext)}"="" | "${HASH(dialparties,workingext)}"="${HASH(dialparties,PRIMARY_EXT)}"]?next)
exten => s,n,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}${HASH(dialparties,workingext)}-)
exten => s,n(next),Set(I=${MATH(${I}+1,int)})
exten => s,n,EndWhile
exten => s,n,ExecIf($["${HASH(dialparties,FINALDS)}" != "" & ${REGEX("-$" ${HASH(dialparties,FINALDS)})}]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS):0:-1}))
exten => s,n,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}@from-internal)
exten => s,n,Set(_FMUNIQUE=${CHANNEL})
exten => s,n,Set(_RingGroupMethod=ringall)
exten => s,n,Set(_FMPRERING=${MATH(${HASH(dialparties,FMGRP_PRERING)}-2,int)})
exten => s,n,Set(_FMREALPRERING=${HASH(dialparties,FMGRP_REALPRERING)})
exten => s,n,Set(_FMGRPTIME=${HASH(dialparties,FMGRP_GRPTIME)})
exten => s,n,ExecIf($["${HASH(dialparties,RECALL_MASTERMODE)}" = "ringallv2"]?Set(_FMPRIME=FALSE):Set(_FMPRIME=TRUE))
exten => s,n,Noop(FMUNIQUE: ${FMUNIQUE}, FMRERING: ${FMPRERING}, FMREALPRERING: ${FMREALPRERING}, FMGRPTIME: ${FMGRPTIME})
exten => s,n,GotoIf($["${HASH(dialparties,USE_CONFIRMATION)}"!="FALSE"]?useconfirmation,1)
exten => s,n,Return()

exten => timerrealprering,1,Set(HASH(dialparties,TIMER)=${HASH(dialparties,FMGRP_REALPRERING)})
exten => timerrealprering,n,Return()

exten => timergrptime,1,Set(HASH(dialparties,TIMER)=${HASH(dialparties,FMGRP_GRPTIME)})
exten => timergrptime,n,Return()

exten => timertotalprering,1,Set(HASH(dialparties,TIMER)=${HASH(dialparties,FMGRP_TOTALPRERING)})
exten => timertotalprering,n,Return()

exten => useconfirmation,1,Set(_USE_CONFIRMATION=${HASH(dialparties,USE_CONFIRMATION)})
exten => useconfirmation,n,Set(_RINGGROUP_INDEX=${HASH(dialparties,RINGGROUP_INDEX)})
exten => useconfirmation,n,Set(HASH(dialparties,USE_CONFIRMATION)=FALSE)
exten => useconfirmation,n,Return()

;--== end of [dialparties-ringallv2] ==--;


[dialparties-finalbuild]
include => dialparties-finalbuild-custom
exten => s,1,GotoIf($["${HASH(dialparties,RGMETHOD)}"="hunt" | "${HASH(dialparties,RGMETHOD)}"="random" | "${HASH(dialparties,RGMETHOD)}"="memoryhunt" | "${HASH(dialparties,RGMETHOD)}"="firstavailable" | "${HASH(dialparties,RGMETHOD)}"="firstnotonphone"]?hunt,1:nohunt,1)

exten => hunt,1,Set(HASH(dialparties,FINALDS)=,)
exten => hunt,n,ExecIf($["${HASH(dialparties,TIMER)}"!=""]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}${HASH(dialparties,TIMER)}))
exten => hunt,n,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)},${DIALOPTS})
exten => hunt,n,Set(HuntMembers=${HASH(dialparties,HUNT_LOOPS)})
exten => hunt,n,Set(MACRODIALGOTO_PRI=huntdial)
exten => hunt,n,Return()

exten => nohunt,1,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)},)
exten => nohunt,n,ExecIf($["${HASH(dialparties,TIMER)}"!=""]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}${HASH(dialparties,TIMER)}))
exten => nohunt,n,ExecIf($["${HASH(dialparties,TIMER)}"!="" & "${HASH(dialparties,USE_CONFIRMATION)}"!="FALSE"]?Set(__RT=${HASH(dialparties,TIMER)}))
exten => nohunt,n,Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)},${HASH(dialparties,DIALOPTS)})
exten => nohunt,n,ExecIf($["${HASH(dialparties,SCREEN)}"!=""]?Set(HASH(dialparties,FINALDS)=${HASH(dialparties,FINALDS)}p))
exten => nohunt,n,GotoIf($["${HASH(dialparties,USE_CONFIRMATION)}"!="FALSE"]?useconfirmation,1)
exten => nohunt,n(nohuntend),Set(MACRODIALGOTO_PRI=normdial)
exten => nohunt,n,Return()

exten => useconfirmation,1,Set(__RG_IDX=${HASH(dialparties,RINGGROUP_INDEX)})
exten => useconfirmation,n,ExecIf($["${HASH(dialparties,CIDNUM)}"!=""]?Set(__CALLCONFIRMCID=${HASH(dialparties,CIDNUM)}):Set(__CALLCONFIRMCID=999))
exten => useconfirmation,n,Goto(nohunt,nohuntend)

;--== end of [dialparties-finalbuild] ==--;


[dialparties-setrvol]
include => dialparties-setrvol-custom
exten => s,1,Set(HASH(dialparties,RVOL_MODE)=${RVOL_MODE})
exten => s,n,Set(HASH(dialparties,RVOL)=${RVOL})
exten => s,n,Set(HASH(dialparties,RVOL_PARENT)=${RVOL_PARENT})
exten => s,n,Noop(RVOL_MODE is: ${HASH(dialparties,RVOL_MODE)} )
exten => s,n,Noop(RVOL is: ${HASH(dialparties,RVOL)})
exten => s,n,Noop(RVOLPARENT is: ${HASH(dialparties,RVOL_PARENT)})
exten => s,n,GotoIf($["${DIALPLAN_EXISTS(dialparties-setrvol,${HASH(dialparties,RVOL_MODE)},1)}"="1"]?${HASH(dialparties,RVOL_MODE)},1)
exten => s,n,Return()

exten => force,1,Set(__RVOL=${HASH(dialparties,RVOL_PARENT)})

exten => no,1,Return()
exten => no,n,Return()
exten => no,n,Set(__RVOL=${HASH(dialparties,RVOL)})
exten => no,n,Return()
exten => no,n,Return()

exten => yes,1,Set(__RVOL=${HASH(dialparties,RVOL_PARENT)})

exten => never,1,Set(__RVOL=${HASH(dialparties,RVOL)})

;--== end of [dialparties-setrvol] ==--;


[macro-pinsets]
include => macro-pinsets-custom
exten => s,1,Set(try=1)
exten => s,n,GotoIf($[${ARG2} = 1]?cdr,1)
exten => s,n,GotoIf($["${DB(AMPUSER/${AMPUSER}/pinless)}" != "NOPASSWD"]?auth:return)
exten => s,n(auth),Progress
exten => s,n,Read(dtmf,agent-pass,0,n,1,10)
exten => s,n,GotoIf($["${DB(PINSETS/${ARG1}/${dtmf})}" = "${ARG1}"]?return:askpin)
exten => s,n(askpin),Set(try=$[${try}+1])
exten => s,n,GotoIf($[${try} > 4]?hangup)
exten => s,n,Read(dtmf,auth-incorrect,0,n,1,10)
exten => s,n(validate),GotoIf($["${DB(PINSETS/${ARG1}/${dtmf})}" = "${ARG1}"]?return:askpin)
exten => s,n(hangup),Hangup()
exten => s,n(return),Return()

exten => cdr,1,GotoIf($["${DB(AMPUSER/${AMPUSER}/pinless)}" != "NOPASSWD"]?auth:return)
exten => cdr,n,Set(try=1)
exten => cdr,n(auth),Progress
exten => cdr,n,Read(dtmf,agent-pass,0,n,1,10)
exten => cdr,n,GotoIf($["${DB(PINSETS/${ARG1}/${dtmf})}" = "${ARG1}"]?setaccountcode:askpin)
exten => cdr,n(askpin),Set(try=$[${try}+1])
exten => cdr,n,GotoIf($[${try} > 4]?hangup)
exten => cdr,n,Read(dtmf,auth-incorrect,0,n,1,10)
exten => cdr,n(validate),GotoIf($["${DB(PINSETS/${ARG1}/${dtmf})}" = "${ARG1}"]?setaccountcode:askpin)
exten => cdr,n(hangup),Hangup()
exten => cdr,n(setaccountcode),Set(CHANNEL(accountcode)=${dtmf})
exten => cdr,n(return),Return()

;--== end of [macro-pinsets] ==--;


[ext-featurecodes]
include => ext-featurecodes-custom
exten => *38,1,Goto(from-internal,*38,1)

exten => *40,1,Goto(from-internal,*40,1)

exten => *41,1,Goto(from-internal,*41,1)

exten => *39,1,Goto(from-internal,*39,1)

exten => *30,1,Goto(from-internal,*30,1)

exten => *31,1,Goto(from-internal,*31,1)

exten => *10,1,Goto(from-internal,*10,1)

exten => 7777,1,Goto(from-internal,7777,1)

exten => 666,1,Goto(from-internal,666,1)

exten => *43,1,Goto(from-internal,*43,1)

exten => *60,1,Goto(from-internal,*60,1)

exten => *85,1,Goto(from-internal,*85,1)

exten => *98,1,Goto(from-internal,*98,1)

;--== end of [ext-featurecodes] ==--;


[app-missedcall]
include => app-missedcall-custom
exten => *56,1,Goto(app-missedcall-on,s,1)

exten => *57,1,Goto(app-missedcall-off,s,1)

exten => *58,1,Goto(app-missedcall-toggle,s,1)

;--== end of [app-missedcall] ==--;


[app-missedcall-on]
include => app-missedcall-on-custom
exten => s,1,Gosub(macro-user-callerid,s,1())
exten => s,n,AGI(agi://127.0.0.1/missedcallnotify.php,${AMPUSER},enable)
exten => s,n(hangup),Hangup()

;--== end of [app-missedcall-on] ==--;


[app-missedcall-off]
include => app-missedcall-off-custom
exten => s,1,Gosub(macro-user-callerid,s,1())
exten => s,n,AGI(agi://127.0.0.1/missedcallnotify.php,${AMPUSER},disable)
exten => s,n(hangup),Hangup()

;--== end of [app-missedcall-off] ==--;


[app-missedcall-toggle]
include => app-missedcall-toggle-custom
exten => s,1,Gosub(macro-user-callerid,s,1())
exten => s,n,AGI(agi://127.0.0.1/missedcallnotify.php,${AMPUSER},toggle)
exten => s,n(hangup),Hangup()

;--== end of [app-missedcall-toggle] ==--;


[app-missedcall-hangup]
include => app-missedcall-hangup-custom
exten => _.,1,Noop(Dialed: ${EXTEN})
exten => _.,n,Noop(Caller: ${MCEXTEN})
exten => _.,n,GotoIf($["${CHANNEL(LINKEDID)}"!="${CHANNEL(UNIQUEID)}" & "${EXTEN}"="s"]?exit)
exten => _.,n,Set(EXTENNUM=${CUT(EXTEN,@,1)})
exten => _.,n,Set(FEXTENNUM=${IF($[["${EXTENNUM:0:2}"="90"] || ["${EXTENNUM:0:2}"="98"]]?${EXTENNUM:2}:${EXTEN})})
exten => _.,n,GotoIf($[${DB_EXISTS(AMPUSER/${FEXTENNUM}/missedcall)} & "${DB(AMPUSER/${FEXTENNUM}/missedcall)}"="disable"]?exit)
exten => _.,n,AGI(agi://127.0.0.1/missedcallnotify.php,${FEXTENNUM},,${FEXTENNUM},${DB_EXISTS(AMPUSER/${FEXTENNUM}/missedcall)},${DB(AMPUSER/${FEXTENNUM}/missedcall)},${CHANNEL},${DIALSTATUS},${MCQUEUE},${MCGROUP},${FMFM})
exten => _.,n(exit),Return()

;--== end of [app-missedcall-hangup] ==--;


[paging-chanspy]
include => paging-chanspy-custom
exten => s,1,Answer
exten => s,n,Wait(1)
exten => s,n,Playback(beep&extension)
exten => s,n,SayAlpha(${AMPUSER})
exten => s,n,Playback(calling)
exten => s,n,SayDigits(${DIALED})
exten => s,n,ExecIf($["${DEVICE_STATE(${ORIG_CHANNEL})}" = "NOT_INUSE"]?Playback(sorry&this&channel&has-expired))
exten => s,n,ExecIf($["${DEVICE_STATE(${ORIG_CHANNEL})}" = "NOT_INUSE"]?Busy(5))
exten => s,n,ExecIf($["${DEVICE_STATE(${ORIG_CHANNEL})}" = "NOT_INUSE"]?Hangup())
exten => s,n,ChanSpy(${ORIG_CHANNEL},qEB)
exten => s,n,Hangup()

;--== end of [paging-chanspy] ==--;


[from-internal-additional]
include => from-internal-additional-custom
include => app-cf-unavailable-prompt-on
include => app-cf-unavailable-on
include => app-cf-unavailable-off
include => app-cf-prompting-on
include => app-cf-on
include => app-cf-off-any
include => app-cf-off
include => app-cf-busy-prompting-on
include => app-cf-busy-on
include => app-cf-busy-off-any
include => app-cf-busy-off
include => app-cf-toggle
include => ext-cf-hints
include => app-callwaiting-cwon
include => app-callwaiting-cwoff
include => ext-meetme
include => app-dictate-send
include => app-dictate-record
include => app-dnd-toggle
include => app-dnd-on
include => app-dnd-off
include => ext-dnd-hints
include => app-fax
include => app-fmf-toggle
include => ext-findmefollow
include => fmgrps
include => app-hotelwakeup
include => app-speakingclock
include => app-speakextennum
include => app-echo-test
include => app-calltrace
include => app-miscapps
include => ext-intercom-users
include => park-hints
include => ext-queues
include => app-queue-toggle
include => app-queue-caller-count
include => app-recordings
include => ext-group
include => grps
include => app-vmmain
include => app-dialvm
include => vmblast-grp
include => app-allowlist
include => app-blacklist
include => app-contactmanager-sd
include => ext-local-confirm
include => findmefollow-ringallv2
include => app-pickup
include => ext-test
include => ext-local
include => outbound-allroutes
include => app-missedcall
exten => h,1,Hangup()

;--== end of [from-internal-additional] ==--;


[from-internal-noxfer-additional]
include => from-internal-noxfer-additional-custom
exten => h,1,Hangup()

;--== end of [from-internal-noxfer-additional] ==--;
